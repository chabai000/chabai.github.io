<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mybatis</title>
      <link href="/posts/62590/"/>
      <url>/posts/62590/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><h2 id="MyBatis历史"><a href="#MyBatis历史" class="headerlink" title="MyBatis历史"></a>MyBatis历史</h2><ul><li>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下，iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github</li><li>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</li></ul><h2 id="MyBatis特性"><a href="#MyBatis特性" class="headerlink" title="MyBatis特性"></a>MyBatis特性</h2><ol><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li><li>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li></ol><h2 id="MyBatis下载"><a href="#MyBatis下载" class="headerlink" title="MyBatis下载"></a>MyBatis下载</h2><ul><li><a href="https://github.com/mybatis/mybatis-3">MyBatis下载地址</a></li><li><img src="/../UpPictures/mybatisPictures/MyBatis%E4%B8%8B%E8%BD%BD.png"></li></ul><h2 id="和其它持久化层技术对比"><a href="#和其它持久化层技术对比" class="headerlink" title="和其它持久化层技术对比"></a>和其它持久化层技术对比</h2><ul><li>JDBC  <ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤  </li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见  </li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA<ul><li>操作简便，开发效率高  </li><li>程序中的长难复杂 SQL 需要绕过框架  </li><li>内部自动生产的 SQL，不容易做特殊优化  </li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。  </li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis<ul><li>轻量级，性能出色  </li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据  </li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><h1 id="搭建MyBatis"><a href="#搭建MyBatis" class="headerlink" title="搭建MyBatis"></a>搭建MyBatis</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>IDE：idea 2019.2  </li><li>构建工具：maven 3.5.4  </li><li>MySQL版本：MySQL 5.7  </li><li>MyBatis版本：MyBatis 3.5.7</li></ul><h2 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h2><ul><li><p>打包方式：jar</p></li><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="创建MyBatis的核心配置文件"><a href="#创建MyBatis的核心配置文件" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h2><blockquote><p>习惯上命名为<code>mybatis-config.xml</code>，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。<br>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息<br>核心配置文件存放的位置是src&#x2F;main&#x2F;resources目录下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--设置连接数据库的环境--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--引入映射文件--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建mapper接口"><a href="#创建mapper接口" class="headerlink" title="创建mapper接口"></a>创建mapper接口</h2><blockquote><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mybatis.mapper;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* 添加用户信息  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建MyBatis的映射文件"><a href="#创建MyBatis的映射文件" class="headerlink" title="创建MyBatis的映射文件"></a>创建MyBatis的映射文件</h2><ul><li>相关概念：ORM（Object Relationship Mapping）对象关系映射。  <ul><li>对象：Java的实体类对象  </li><li>关系：关系型数据库  </li><li>映射：二者之间的对应关系</li></ul></li></ul><table><thead><tr><th>Java概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段&#x2F;列</td></tr><tr><td>对象</td><td>记录&#x2F;行</td></tr></tbody></table><ul><li>映射文件的命名规则<ul><li>表所对应的实体类的类名+Mapper.xml</li><li>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml </li><li>因此一个映射文件对应一个实体类，对应一张表的操作</li><li>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</li><li>MyBatis映射文件存放的位置是src&#x2F;main&#x2F;resources&#x2F;mappers目录下</li></ul></li><li>MyBatis中可以面向接口操作数据，要保证两个一致<ul><li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</li><li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span>  </span><br><span class="line">insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)  </span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="通过junit测试功能"><a href="#通过junit测试功能" class="headerlink" title="通过junit测试功能"></a>通过junit测试功能</h2><ul><li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">        <span class="comment">//获取sqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line">        <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line">    <span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  </span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        <span class="comment">//sqlSession.commit();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>此时需要手动提交事务，如果要自动提交事务，则在获取sqlSession对象时，使用<code>SqlSession sqlSession = sqlSessionFactory.openSession(true);</code>，传入一个Boolean类型的参数，值为true，这样就可以自动提交</li></ul><h2 id="加入log4j日志功能"><a href="#加入log4j日志功能" class="headerlink" title="加入log4j日志功能"></a>加入log4j日志功能</h2><ol><li><p>加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加入log4j的配置文件</p><ul><li>log4j的配置文件名为log4j.xml，存放的位置是src&#x2F;main&#x2F;resources目录下</li><li>日志的级别：FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试) 从左到右打印的内容越来越详细</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="核心配置文件详解"><a href="#核心配置文件详解" class="headerlink" title="核心配置文件详解"></a>核心配置文件详解</h1><blockquote><p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)：<br>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//MyBatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://MyBatis.org/dtd/MyBatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        typeAlias：设置某个具体的类型的别名</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        type：需要设置别名的类型的全类名</span></span><br><span class="line"><span class="comment">        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot; alias=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environments：设置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environment：设置具体的连接数据库的环境信息</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">            type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">            type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理</span></span><br><span class="line"><span class="comment">            type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            dataSource：设置数据源</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">            type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">            type=&quot;POOLED&quot;：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建</span></span><br><span class="line"><span class="comment">            type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建</span></span><br><span class="line"><span class="comment">            type=&quot;JNDI&quot;：调用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置驱动类的全类名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        以包为单位，将包下所有的映射文件引入核心配置文件</span></span><br><span class="line"><span class="comment">        注意：</span></span><br><span class="line"><span class="comment">1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下</span></span><br><span class="line"><span class="comment">2. mapper接口要和mapper映射文件的名字一致</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><img src="/../UpPictures/mybatisPictures/mapper%E6%8E%A5%E5%8F%A3%E5%92%8Cmapper%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E5%8C%85%E4%B8%8B.png"></li></ul><h1 id="默认的类型别名"><a href="#默认的类型别名" class="headerlink" title="默认的类型别名"></a>默认的类型别名</h1><p><img src="/../UpPictures/mybatisPictures/%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D1.png"><br><img src="/../UpPictures/mybatisPictures/%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D2.png"></p><h1 id="MyBatis的增删改查"><a href="#MyBatis的增删改查" class="headerlink" title="MyBatis的增删改查"></a>MyBatis的增删改查</h1><ol><li><p>添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">     delete from t_user where id = 6</span><br><span class="line"> <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">     update t_user set username = &#x27;张三&#x27; where id = 5</span><br><span class="line"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>查询一个实体类对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span>  </span><br><span class="line">select * from t_user where id = 2  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>查询集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>注意：<ol><li>查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系  <ul><li>resultType：自动映射，用于属性名和表中字段名一致的情况  </li><li>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</li></ul></li><li>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</li></ol></li></ul><h1 id="MyBatis获取参数值的两种方式（重点）"><a href="#MyBatis获取参数值的两种方式（重点）" class="headerlink" title="MyBatis获取参数值的两种方式（重点）"></a>MyBatis获取参数值的两种方式（重点）</h1><ul><li>MyBatis获取参数值的两种方式：${}和#{}  </li><li>${}的本质就是字符串拼接，#{}的本质就是占位符赋值  </li><li>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li></ul><h2 id="单个字面量类型的参数"><a href="#单个字面量类型的参数" class="headerlink" title="单个字面量类型的参数"></a>单个字面量类型的参数</h2><ul><li>若mapper接口中的方法参数为单个的字面量类型，此时可以使用${}和#{}以任意的名称（最好见名识意）获取参数的值，注意${}需要手动加单引号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">select * from t_user where username = &#x27;$&#123;username&#125;&#x27;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多个字面量类型的参数"><a href="#多个字面量类型的参数" class="headerlink" title="多个字面量类型的参数"></a>多个字面量类型的参数</h2><ul><li>若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中<ol><li>以arg0,arg1…为键，以参数为值；</li><li>以param1,param2…为键，以参数为值；</li></ol></li><li>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号。</li><li>使用arg或者param都行，要注意的是，arg是从arg0开始的，param是从param1开始的</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="map集合类型的参数"><a href="#map集合类型的参数" class="headerlink" title="map集合类型的参数"></a>map集合类型的参数</h2><ul><li>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLoginByMap(Map&lt;String,Object&gt; map);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLoginByMap</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;usermane&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByMap(map);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实体类类型的参数"><a href="#实体类类型的参数" class="headerlink" title="实体类类型的参数"></a>实体类类型的参数</h2><ul><li>若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">12</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">mapper.insertUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-Param标识参数"><a href="#使用-Param标识参数" class="headerlink" title="使用@Param标识参数"></a>使用@Param标识参数</h2><ul><li>可以通过@Param注解标识mapper接口中的方法参数，此时，会将这些参数放在map集合中 <ol><li>以@Param注解的value属性值为键，以参数为值；</li><li>以param1,param2…为键，以参数为值；</li></ol></li><li>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User CheckLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;CheckLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLoginByParam</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">mapper.CheckLoginByParam(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>建议分成两种情况进行处理<ol><li>实体类类型的参数</li><li>使用@Param标识参数</li></ol></li></ul><h1 id="MyBatis的各种查询功能"><a href="#MyBatis的各种查询功能" class="headerlink" title="MyBatis的各种查询功能"></a>MyBatis的各种查询功能</h1><ol><li>如果查询出的数据只有一条，可以通过<ol><li>实体类对象接收</li><li>List集合接收</li><li>Map集合接收，结果<code>&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;</code></li></ol></li><li>如果查询出的数据有多条，一定不能用实体类对象接收，会抛异常TooManyResultsException，可以通过<ol><li>实体类类型的LIst集合接收</li><li>Map类型的LIst集合接收</li><li>在mapper接口的方法上添加@MapKey注解</li></ol></li></ol><h2 id="查询一个实体类对象"><a href="#查询一个实体类对象" class="headerlink" title="查询一个实体类对象"></a>查询一个实体类对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询一个List集合"><a href="#查询一个List集合" class="headerlink" title="查询一个List集合"></a>查询一个List集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询单个数据"><a href="#查询单个数据" class="headerlink" title="查询单个数据"></a>查询单个数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询用户的总记录数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 在MyBatis中，对于Java中常用的类型都设置了类型别名  </span></span><br><span class="line"><span class="comment"> * 例如：java.lang.Integer--&gt;int|integer  </span></span><br><span class="line"><span class="comment"> * 例如：int--&gt;_int|_integer  </span></span><br><span class="line"><span class="comment"> * 例如：Map--&gt;map,List--&gt;list  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_integer&quot;</span>&gt;</span></span><br><span class="line">select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询一条数据为map集合"><a href="#查询一条数据为map集合" class="headerlink" title="查询一条数据为map集合"></a>查询一条数据为map集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果：&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询多条数据为map集合"><a href="#查询多条数据为map集合" class="headerlink" title="查询多条数据为map集合"></a>查询多条数据为map集合</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span>  </span><br><span class="line">select * from t_user  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">[&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;]</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的map集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h1 id="特殊SQL的执行"><a href="#特殊SQL的执行" class="headerlink" title="特殊SQL的执行"></a>特殊SQL的执行</h1><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户名进行模糊查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/26 21:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByLike</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;username&quot;) String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span>  </span><br><span class="line">select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>其中<code>select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</code>是最常用的</li></ul><h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><ul><li>只能使用${}，如果使用#{}，则解析后的sql语句为<code>delete from t_user where id in (&#39;1,2,3&#39;)</code>，这样是将<code>1,2,3</code>看做是一个整体，只有id为<code>1,2,3</code>的数据会被删除。正确的语句应该是<code>delete from t_user where id in (1,2,3)</code>，或者<code>delete from t_user where id in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/26 22:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMore</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMore(<span class="string">&quot;1,2,3,8&quot;</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态设置表名"><a href="#动态设置表名" class="headerlink" title="动态设置表名"></a>动态设置表名</h2><ul><li>只能使用${}，因为表名不能加单引号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定表中的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableName </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 14:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByTable</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByTable(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByTable&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加功能获取自增的主键"><a href="#添加功能获取自增的主键" class="headerlink" title="添加功能获取自增的主键"></a>添加功能获取自增的主键</h2><ul><li><p>使用场景</p><ul><li>t_clazz(clazz_id,clazz_name)  </li><li>t_student(student_id,student_name,clazz_id)</li></ul><ol><li>添加班级信息  </li><li>获取新添加的班级的id  </li><li>为班级分配学生，即将某学的班级id修改为新添加的班级的id</li></ol></li><li><p>在mapper.xml中设置两个属性</p><ul><li>useGeneratedKeys：设置使用自增的主键</li></ul><ul><li>keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 15:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values (null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;ton&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">mapper.insertUser(user);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="comment">//输出：user&#123;id=10, username=&#x27;ton&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@321.com&#x27;&#125;，自增主键存放到了user的id属性中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义映射resultMap"><a href="#自定义映射resultMap" class="headerlink" title="自定义映射resultMap"></a>自定义映射resultMap</h1><h2 id="resultMap处理字段和属性的映射关系"><a href="#resultMap处理字段和属性的映射关系" class="headerlink" title="resultMap处理字段和属性的映射关系"></a>resultMap处理字段和属性的映射关系</h2><ul><li>resultMap：设置自定义映射  <ul><li>属性：  <ul><li>id：表示自定义映射的唯一标识，不能重复</li><li>type：查询的数据要映射的实体类的类型</li></ul></li><li>子标签：  <ul><li>id：设置主键的映射关系  </li><li>result：设置普通字段的映射关系  </li><li>子标签属性：  <ul><li>property：设置映射关系中实体类中的属性名  </li><li>column：设置映射关系中表中的字段名</li></ul></li></ul></li></ul></li><li>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射，即使字段名和属性名一致的属性也要映射，也就是全部属性都要列出来</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）。此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系  </p><ol><li><p>可以通过为字段起别名的方式，保证和实体类中的属性名保持一致  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select eid,emp_name empName,age,sex,email from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>可以在MyBatis的核心配置文件中的<code>setting</code>标签中，设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰，例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为userName。<a href="#%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3">核心配置文件详解</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="多对一映射处理"><a href="#多对一映射处理" class="headerlink" title="多对一映射处理"></a>多对一映射处理</h2><blockquote><p>查询员工信息以及员工所对应的部门信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;  </span><br><span class="line"><span class="keyword">private</span> Integer eid;  </span><br><span class="line"><span class="keyword">private</span> String empName;  </span><br><span class="line"><span class="keyword">private</span> Integer age;  </span><br><span class="line"><span class="keyword">private</span> String sex;  </span><br><span class="line"><span class="keyword">private</span> String email;  </span><br><span class="line"><span class="keyword">private</span> Dept dept;</span><br><span class="line"><span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="级联方式处理映射关系"><a href="#级联方式处理映射关系" class="headerlink" title="级联方式处理映射关系"></a>级联方式处理映射关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用association处理映射关系"><a href="#使用association处理映射关系" class="headerlink" title="使用association处理映射关系"></a>使用association处理映射关系</h3><ul><li>association：处理多对一的映射关系</li><li>property：需要处理多对的映射关系的属性名</li><li>javaType：该属性的类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询员工信息"><a href="#1-查询员工信息" class="headerlink" title="1. 查询员工信息"></a>1. 查询员工信息</h4><ul><li>select：设置分布查询的sql的唯一标识（namespace.SQLId或mapper接口的全类名.方法名）</li><li>column：设置分步查询的条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EmpMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 20:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Emp <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-查询部门信息"><a href="#2-查询部门信息" class="headerlink" title="2. 查询部门信息"></a>2. 查询部门信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DeptMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment"> * 分步查询第二步：通过did查询员工对应的部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 20:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处的resultMap仅是处理字段和属性的映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getEmpAndDeptByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一对多映射处理"><a href="#一对多映射处理" class="headerlink" title="一对多映射处理"></a>一对多映射处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer did;</span><br><span class="line">    <span class="keyword">private</span> String deptName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line"><span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h3><ul><li>collection：用来处理一对多的映射关系</li><li>ofType：表示该属性对饮的集合中存储的数据的类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmp(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分步查询-1"><a href="#分步查询-1" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询部门信息"><a href="#1-查询部门信息" class="headerlink" title="1. 查询部门信息"></a>1. 查询部门信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> did </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Dept</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-根据部门id查询部门中的所有员工"><a href="#2-根据部门id查询部门中的所有员工" class="headerlink" title="2. 根据部门id查询部门中的所有员工"></a>2. 根据部门id查询部门中的所有员工</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment"> * 分步查询第二步：根据部门id查询部门中的所有员工</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.Emp&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 22:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getDeptAndEmpByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><ul><li>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：<ul><li>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载  </li><li>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载</li></ul></li><li>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType&#x3D;”lazy(延迟加载)|eager(立即加载)”</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">System.out.println(emp.getEmpName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关闭延迟加载，两条SQL语句都运行了<img src="/../UpPictures/mybatisPictures/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%951.png"></li><li>开启延迟加载，只运行获取emp的SQL语句<br><img src="/../UpPictures/mybatisPictures/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%952.png"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">System.out.println(emp.getEmpName());</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">System.out.println(emp.getDept());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>开启后，需要用到查询dept的时候才会调用相应的SQL语句<img src="/../UpPictures/mybatisPictures/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%953.png"></p></li><li><p>fetchType：当开启了全局的延迟加载之后，可以通过该属性手动控制延迟加载的效果，fetchType&#x3D;”lazy(延迟加载)|eager(立即加载)”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><ul><li>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</li></ul><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul><li>if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</li><li>在where后面添加一个恒成立条件<code>1=1</code><ul><li>这个恒成立条件并不会影响查询的结果</li><li>这个<code>1=1</code>可以用来拼接<code>and</code>语句，例如：当empName为null时<ul><li>如果不加上恒成立条件，则SQL语句为<code>select * from t_emp where and age = ? and sex = ? and email = ?</code>，此时<code>where</code>会与<code>and</code>连用，SQL语句会报错</li><li>如果加上一个恒成立条件，则SQL语句为<code>select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?</code>，此时不报错</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where 1=1</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and emp_name = #&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><ul><li>where和if一般结合使用：<ul><li>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字  </li><li>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and&#x2F;or去掉</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>注意：where标签不能去掉条件后多余的and&#x2F;or</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这种用法是错误的，只能去掉条件前面的and/or，条件后面的不行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><ul><li>trim用于去掉或添加标签中的内容  </li><li>常用属性<ul><li>prefix：在trim标签中的内容的前面添加某些内容  </li><li>suffix：在trim标签中的内容的后面添加某些内容 </li><li>prefixOverrides：在trim标签中的内容的前面去掉某些内容  </li><li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li></ul></li><li>若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下<code>select * from t_emp</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">sex = #&#123;sex&#125; or</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByCondition</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">List&lt;Emp&gt; emps= mapper.getEmpByCondition(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../UpPictures/mybatisPictures/trim%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p><h2 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><ul><li><code>choose、when、otherwise</code>相当于<code>if...else if..else</code></li><li>when至少要有一个，otherwise至多只有一个</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">did = 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByChoose</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.getEmpByChoose(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../UpPictures/mybatisPictures/choose%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p><ul><li>相当于<code>if a else if b else if c else d</code>，只会执行其中一个</li></ul><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><ul><li><p>属性：  </p><ul><li>collection：设置要循环的数组或集合  </li><li>item：表示集合或数组中的每一个数据  </li><li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如<code>,</code></li><li>open：设置foreach标签中的内容的开始符  </li><li>close：设置foreach标签中的内容的结束符</li></ul></li><li><p>批量删除</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(Integer[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">delete from t_emp where eid in</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">#&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMoreByArray</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMoreByArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../UpPictures/mybatisPictures/foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png"></p></li><li><p>批量添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreByList(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">insert into t_emp values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">(null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertMoreByList</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;b&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;c&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">List&lt;Emp&gt; emps = Arrays.asList(emp1, emp2, emp3);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertMoreByList(emps);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../UpPictures/mybatisPictures/foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png"></p></li></ul><h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><ul><li>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</li><li>声明sql片段：<code>&lt;sql&gt;</code>标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span>eid,emp_name,age,sex,email<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引用sql片段：<code>&lt;include&gt;</code>标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="MyBatis的缓存"><a href="#MyBatis的缓存" class="headerlink" title="MyBatis的缓存"></a>MyBatis的缓存</h1><h2 id="MyBatis的一级缓存"><a href="#MyBatis的一级缓存" class="headerlink" title="MyBatis的一级缓存"></a>MyBatis的一级缓存</h2><ul><li>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问  </li><li>使一级缓存失效的四种情况：  <ol><li>不同的SqlSession对应不同的一级缓存  </li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ol></li></ul><h2 id="MyBatis的二级缓存"><a href="#MyBatis的二级缓存" class="headerlink" title="MyBatis的二级缓存"></a>MyBatis的二级缓存</h2><ul><li>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取  </li><li>二级缓存开启的条件<ol><li>在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”，默认为true，不需要设置</li><li>在映射文件中设置标签<cache /></li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ol></li><li>使二级缓存失效的情况：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</li></ul><h2 id="二级缓存的相关配置"><a href="#二级缓存的相关配置" class="headerlink" title="二级缓存的相关配置"></a>二级缓存的相关配置</h2><ul><li>在mapper配置文件中添加的cache标签可以设置一些属性</li><li>eviction属性：缓存回收策略  <ul><li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。  </li><li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。  </li><li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。  </li><li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li><li>默认的是 LRU</li></ul></li><li>flushInterval属性：刷新间隔，单位毫秒<ul><li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句（增删改）时刷新</li></ul></li><li>size属性：引用数目，正整数<ul><li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li></ul></li><li>readOnly属性：只读，true&#x2F;false<ul><li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。  </li><li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false</li></ul></li></ul><h2 id="MyBatis缓存查询的顺序"><a href="#MyBatis缓存查询的顺序" class="headerlink" title="MyBatis缓存查询的顺序"></a>MyBatis缓存查询的顺序</h2><ul><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用  </li><li>如果二级缓存没有命中，再查询一级缓存  </li><li>如果一级缓存也没有命中，则查询数据库  </li><li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li></ul><h2 id="整合第三方缓存EHCache（了解）"><a href="#整合第三方缓存EHCache（了解）" class="headerlink" title="整合第三方缓存EHCache（了解）"></a>整合第三方缓存EHCache（了解）</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="各个jar包的功能"><a href="#各个jar包的功能" class="headerlink" title="各个jar包的功能"></a>各个jar包的功能</h3><table><thead><tr><th>jar包名称</th><th>作用</th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td>ehcache</td><td>EHCache核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td>logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table><h3 id="创建EHCache的配置文件ehcache-xml"><a href="#创建EHCache的配置文件ehcache-xml" class="headerlink" title="创建EHCache的配置文件ehcache.xml"></a>创建EHCache的配置文件ehcache.xml</h3><ul><li>名字必须叫<code>ehcache.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="设置二级缓存的类型"><a href="#设置二级缓存的类型" class="headerlink" title="设置二级缓存的类型"></a>设置二级缓存的类型</h3><ul><li>在xxxMapper.xml文件中设置二级缓存类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加入logback日志"><a href="#加入logback日志" class="headerlink" title="加入logback日志"></a>加入logback日志</h3><ul><li>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。创建logback的配置文件<code>logback.xml</code>，名字固定，不可改变</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="EHCache配置文件说明"><a href="#EHCache配置文件说明" class="headerlink" title="EHCache配置文件说明"></a>EHCache配置文件说明</h3><table><thead><tr><th>属性名</th><th>是否必须</th><th>作用</th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>timeToLiveSeconds</td><td>否</td><td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出</td></tr></tbody></table><h1 id="MyBatis的逆向工程"><a href="#MyBatis的逆向工程" class="headerlink" title="MyBatis的逆向工程"></a>MyBatis的逆向工程</h1><ul><li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的</li><li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：  <ul><li>Java实体类  </li><li>Mapper接口  </li><li>Mapper映射文件</li></ul></li></ul><h2 id="创建逆向工程的步骤"><a href="#创建逆向工程的步骤" class="headerlink" title="创建逆向工程的步骤"></a>创建逆向工程的步骤</h2><h3 id="添加依赖和插件"><a href="#添加依赖和插件" class="headerlink" title="添加依赖和插件"></a>添加依赖和插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MyBatis核心依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建MyBatis的核心配置文件-1"><a href="#创建MyBatis的核心配置文件-1" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建逆向工程的配置文件"><a href="#创建逆向工程的配置文件" class="headerlink" title="创建逆向工程的配置文件"></a>创建逆向工程的配置文件</h3><ul><li>文件名必须是：<code>generatorConfig.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="执行MBG插件的generate目标"><a href="#执行MBG插件的generate目标" class="headerlink" title="执行MBG插件的generate目标"></a>执行MBG插件的generate目标</h3><ul><li><img src="/../UpPictures/mybatisPictures/%E6%89%A7%E8%A1%8CMBG%E6%8F%92%E4%BB%B6%E7%9A%84generate%E7%9B%AE%E6%A0%87.png"></li><li>如果出现报错：<code>Exception getting JDBC Driver</code>，可能是pom.xml中，数据库驱动配置错误<ul><li>dependency中的驱动<img src="/../UpPictures/mybatisPictures/dependency%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png"></li><li>mybatis-generator-maven-plugin插件中的驱动<img src="/../UpPictures/mybatisPictures/%E6%8F%92%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png"></li><li>两者的驱动版本应该相同</li></ul></li><li>执行结果<img src="/../UpPictures/mybatisPictures/%E9%80%86%E5%90%91%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></li></ul><h2 id="QBC"><a href="#QBC" class="headerlink" title="QBC"></a>QBC</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li><code>selectByExample</code>：按条件查询，需要传入一个example对象或者null；如果传入一个null，则表示没有条件，也就是查询所有数据</li><li><code>example.createCriteria().xxx</code>：创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</li><li><code>example.or().xxx</code>：将之前添加的条件通过or拼接其他条件<br><img src="/../UpPictures/mybatisPictures/example%E7%9A%84%E6%96%B9%E6%B3%95.png"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMBG</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="type">EmpExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line"><span class="comment">//名字为张三，且年龄大于等于20</span></span><br><span class="line">example.createCriteria().andEmpNameEqualTo(<span class="string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="number">20</span>);</span><br><span class="line"><span class="comment">//或者did不为空</span></span><br><span class="line">example.or().andDidIsNotNull();</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(example);</span><br><span class="line">emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../UpPictures/mybatisPictures/example%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p><h3 id="增改"><a href="#增改" class="headerlink" title="增改"></a>增改</h3><ul><li><code>updateByPrimaryKey</code>：通过主键进行数据修改，如果某一个值为null，也会将对应的字段改为null<ul><li><code>mapper.updateByPrimaryKey(new Emp(1,&quot;admin&quot;,22,null,&quot;456@qq.com&quot;,3));</code></li><li><img src="/../UpPictures/mybatisPictures/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png"></li></ul></li><li><code>updateByPrimaryKeySelective()</code>：通过主键进行选择性数据修改，如果某个值为null，则不修改这个字段<ul><li><code>mapper.updateByPrimaryKeySelective(new Emp(2,&quot;admin2&quot;,22,null,&quot;456@qq.com&quot;,3));</code></li><li><img src="/../UpPictures/mybatisPictures/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png"></li></ul></li></ul><h1 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h1><h2 id="分页插件使用步骤"><a href="#分页插件使用步骤" class="headerlink" title="分页插件使用步骤"></a>分页插件使用步骤</h2><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h3><ul><li>在MyBatis的核心配置文件（mybatis-config.xml）中配置插件</li><li><img src="/../UpPictures/mybatisPictures/%E9%85%8D%E7%BD%AE%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.png"></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分页插件的使用"><a href="#分页插件的使用" class="headerlink" title="分页插件的使用"></a>分页插件的使用</h2><h3 id="开启分页功能"><a href="#开启分页功能" class="headerlink" title="开启分页功能"></a>开启分页功能</h3><ul><li>在查询功能之前使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能<ul><li>pageNum：当前页的页码  </li><li>pageSize：每页显示的条数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../UpPictures/mybatisPictures/%E5%88%86%E9%A1%B5%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p><h3 id="分页相关数据"><a href="#分页相关数据" class="headerlink" title="分页相关数据"></a>分页相关数据</h3><h4 id="方法一：直接输出"><a href="#方法一：直接输出" class="headerlink" title="方法一：直接输出"></a>方法一：直接输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//在查询到List集合后，打印分页数据</span></span><br><span class="line">System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>分页相关数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false&#125;[Emp&#123;eid=1, empName=&#x27;admin&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=2, empName=&#x27;admin2&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=3, empName=&#x27;王五&#x27;, age=12, sex=&#x27;女&#x27;, email=&#x27;123@qq.com&#x27;, did=3&#125;, Emp&#123;eid=4, empName=&#x27;赵六&#x27;, age=32, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;, did=1&#125;]</span><br></pre></td></tr></table></figure></li></ul><h4 id="方法二使用PageInfo"><a href="#方法二使用PageInfo" class="headerlink" title="方法二使用PageInfo"></a>方法二使用PageInfo</h4><ul><li>在查询获取list集合之后，使用<code>PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(List&lt;T&gt; list, intnavigatePages)</code>获取分页相关数据<ul><li>list：分页之后的数据  </li><li>navigatePages：导航分页的页码数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">PageInfo&lt;Emp&gt; page = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(emps,<span class="number">5</span>);</span><br><span class="line">System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>分页相关数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PageInfo&#123;</span><br><span class="line">pageNum=1, pageSize=4, size=4, startRow=1, endRow=4, total=8, pages=2, </span><br><span class="line">list=Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false&#125;[Emp&#123;eid=1, empName=&#x27;admin&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=2, empName=&#x27;admin2&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=3, empName=&#x27;王五&#x27;, age=12, sex=&#x27;女&#x27;, email=&#x27;123@qq.com&#x27;, did=3&#125;, Emp&#123;eid=4, empName=&#x27;赵六&#x27;, age=32, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;, did=1&#125;], </span><br><span class="line">prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=5, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]&#125;</span><br></pre></td></tr></table></figure></li><li><p>其中list中的数据等同于方法一中直接输出的page数据</p></li></ul><h4 id="常用数据："><a href="#常用数据：" class="headerlink" title="常用数据："></a>常用数据：</h4><ul><li>pageNum：当前页的页码  </li><li>pageSize：每页显示的条数  </li><li>size：当前页显示的真实条数  </li><li>total：总记录数  </li><li>pages：总页数  </li><li>prePage：上一页的页码  </li><li>nextPage：下一页的页码</li><li>isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页  </li><li>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页  </li><li>navigatePages：导航分页的页码数  </li><li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot3web开发（二）</title>
      <link href="/posts/28917/"/>
      <url>/posts/28917/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringBoot的web开发能力，由SpringMVC提供。</p></blockquote><h5 id="1、Web场景"><a href="#1、Web场景" class="headerlink" title="1、Web场景"></a>1、Web场景</h5><p><strong>1.自动配置</strong></p><blockquote><p>Spring Boot 为 Spring MVC 提供了自动配置，适用于大多数应用程序</p></blockquote><ol><li>导入web场景，场景启动器导入了相关场景的所有依赖：starter-json、starter-tomcat、springmvc</li></ol><p><img src="/../UpPictures/SpringBoot3web%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89Pictures/image-20240323203422434.png" alt="image-20240323203422434"></p><p><img src="/../UpPictures/SpringBoot3web%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89Pictures/image-20240323210924526.png" alt="image-20240323210924526"></p><ol start="2"><li><p>每个场景启动器都引入了一个spring-boot-starter，核心场景启动器，核心场景启动器引入了spring-boot-autoconfigure包，spring-boot-autoconfigure里面囊括了所有场景的所有配置，只要这个包下的所有类都能生效，那么相当于SpringBoot官方写好的整合功能就生效了，SpringBoot默认却扫描不到 spring-boot-autoconfigure下写好的所有配置类。（这些配置类给我们做了整合操作），默认只扫描主程序所在的包。</p><p><img src="/../UpPictures/SpringBoot3web%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89Pictures/image-20240323204248438.png" alt="image-20240323204248438"></p></li><li><p>但可使用主程序@EnableAutoConfiguration注解批量的把142个配置类全部导入进来，@EnableAutoConfiguration注解使用@Import(AutoConfigurationImportSelector.class)批量导入组件到容器（这时就真的导入到容器了，可供我们使用了），这142个配置类来自于spring-boot-autoconfigure.jar下的META-ININF&#x2F;spring.org.springframework.boot.autoconfigure.AutoConfiguratio</p><p>n.imports文件</p><p><img src="/../UpPictures/SpringBoot3web%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89Pictures/image-20240323204427089.png" alt="image-20240323204427089"></p><p><img src="/../UpPictures/SpringBoot3web%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89Pictures/image-20240323204443164.png" alt="image-20240323204443164"></p><p><img src="/../UpPictures/SpringBoot3web%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89Pictures/image-20240323204505169.png" alt="image-20240323204505169"></p></li><li><p>这142个自动配置类按需生效</p><p><img src="/../UpPictures/SpringBoot3web%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89Pictures/image-20240323205513675.png" alt="image-20240323205513675"></p></li><li><p>绑定了配置文件的一堆配置项（暂时不看响应式编程的），分析清楚绑定属性后，在需要时我们可以自定义配置</p><ul><li><p>SpringMVC的所有配置 spring.mvc（其他同理自己一个个找着看）</p><p><img src="/../UpPictures/SpringBoot3web%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89Pictures/image-20240323205826386.png" alt="image-20240323205826386"></p></li><li><p>Web场景通用配置 spring.web</p></li><li><p>文件上传配置 spring.servlet.multipart</p></li><li><p>服务器的配置 server: 比如：编码方式</p></li></ul></li></ol><p><strong>2.默认效果(现在简单了解，接下来的小结会逐一分析这些默认效果在底层是怎么配出来的，以及该怎么使用)</strong></p><blockquote><p>这些自动配置类，给容器放了很多组件，产生了一些默认的功能，这些默认功能有哪些默认效果，我们在开发时什么要配什么可以不配要分析清楚。</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.servlet.spring-mvc.auto-configuration">官方文档</a>  <a href="https://springdoc.cn/spring-boot/web.html#web.servlet.spring-mvc.auto-configuration">中文文档</a></p></blockquote><p>自动配置在Spring的默认值基础上增加了以下功能:</p><ol><li>包含了 ContentNegotiatingViewResolver 和 BeanNameViewResolver 组件，方便视图解析</li><li>默认的静态资源处理机制： 静态资源放在 static 文件夹下即可直接访问</li><li>自动注册了 Converter,GenericConverter,Formatter组件，适配常见数据类型转换和格式化需求</li><li>支持 HttpMessageConverters，可以方便返回json等数据类型</li><li>注册 MessageCodesResolver，方便国际化及错误消息处理</li><li>支持 静态 index.html</li><li>自动使用ConfigurableWebBindingInitializer，实现消息处理、数据绑定、类型转化、数据校验等功能</li></ol><p>三个使用案例（重要）：</p><blockquote><p>● 如果想保持 springboot mvc 的默认配置，并且自定义更多的 mvc 配置，如：interceptors, formatters, view controllers 等。可以使用@Configuration注解添加一个 WebMvcConfigurer 类型的配置类，并不要标注 @EnableWebMvc<br>● 如果想保持 boot mvc 的默认配置，但要自定义核心组件实例，比如：RequestMappingHandlerMapping, RequestMappingHandlerAdapter, 或ExceptionHandlerExceptionResolver，给容器中放一个 WebMvcRegistrations 组件即可<br>● 如果想全面接管 Spring MVC，@Configuration 标注一个配置类，并加上 @EnableWebMvc注解，实现 WebMvcConfigurer 接口</p></blockquote><h5 id="2、静态资源"><a href="#2、静态资源" class="headerlink" title="2、静态资源"></a>2、静态资源</h5>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot3快速入门</title>
      <link href="/posts/30322/"/>
      <url>/posts/30322/</url>
      
        <content type="html"><![CDATA[<h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a><strong>1、简介</strong></h3><p>1.前置知识</p><ul><li>Java17</li><li>Spring、SpringMVC、MyBatis</li><li>Maven、IDEA</li></ul><p>2.环境要求</p><table><thead><tr><th>环境&amp;工具</th><th>版本（or later）</th></tr></thead><tbody><tr><td>SpringBoot</td><td>3.0.5+</td></tr><tr><td>IDEA</td><td>2021.2.1+</td></tr><tr><td>Java</td><td>17+</td></tr><tr><td>Maven</td><td>3.5+</td></tr><tr><td>Tomcat</td><td>10.0+</td></tr><tr><td>Servlet</td><td>5.0+</td></tr><tr><td>GraalVM Community</td><td>22.3+</td></tr><tr><td>Native Build Tools</td><td>0.9.19+</td></tr></tbody></table><p>3.SpringBoot是什么</p><p>SpringBoot 帮我们简单、快速地创建一个独立的、生产级别的 <strong>Spring 应用（说明：SpringBoot底层是Spring）</strong></p><p>大多数 SpringBoot 应用只需要编写少量配置即可快速整合 Spring 平台以及第三方技术</p><p><strong>特性：</strong></p><ul><li><p>快速创建独立 Spring 应用</p><ul><li><p>以前SSM：导包、写配置、启动运行很麻烦</p></li><li><p>现在：直接嵌入Tomcat、Jetty or Undertow（无需部署 war 包）【Servlet容器】</p></li><li><p>以前部署到服务器：linux  java tomcat mysql： war 放到 tomcat 的 webapps下</p></li><li><p>现在：jar： java环境；  java -jar</p></li></ul></li><li><p><strong>重点</strong>：提供可选的starter，简化应用<strong>整合</strong></p><ul><li><p><strong>场景启动器</strong>（starter）：web、json、邮件、oss（对象存储）、异步、定时任务、缓存…</p></li><li><p>以前：导包一堆，控制好版本。</p></li><li><p>现在（springboot）：为每一种场景准备了一个依赖； <strong>web-starter。mybatis-starter</strong></p></li></ul></li><li><p><strong>重点：</strong>按需自动配置 Spring 以及 第三方库</p><ul><li><p>如果这些场景我要使用（生效）。这个场景的所有配置都会自动配置好。</p></li><li><p><strong>约定大于配置</strong>：每个场景都有很多默认配置。</p></li><li><p>想自定义：配置文件中修改几项就可以</p></li></ul></li><li><p>提供生产级特性：如 监控指标、健康检查、外部化配置等</p><ul><li><p>监控指标、健康检查（k8s）、外部化配置（&#x2F;app&#x2F;demo.jar想要改配置的话，不用改源码，在&#x2F;app&#x2F;application.properties更改配置即可）</p></li><li><p>无代码生成、无xml</p></li></ul></li></ul><p><strong>总结</strong>：简化开发，简化配置，简化整合，简化部署，简化监控，简化运维。</p><h3 id="2、快速体验"><a href="#2、快速体验" class="headerlink" title="2、快速体验"></a><strong>2、快速体验</strong></h3><blockquote><p>场景：浏览器发送**&#x2F;hello**请求，返回”<strong>Hello,Spring Boot 3!</strong>“</p></blockquote><h4 id="1-开发流程"><a href="#1-开发流程" class="headerlink" title="1. 开发流程"></a>1. 开发流程</h4><ol><li><p><strong>创建项目</strong></p><blockquote><p>可参考官方文档<a href="https://spring.io/projects/spring-boot">https://spring.io/projects/spring-boot</a></p></blockquote><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319103210300-1711115879852.png" alt="image-20240319103210300"></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319103234509.png" alt="image-20240319103234509"></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319103316998.png" alt="image-20240319103316998"></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319103351544.png" alt="image-20240319103351544"></p><p>1.创建一个空项目（方便我们后续放其他相关代码）</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319103637215.png" alt="image-20240319103637215"></p><p>2.创建maven项目</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319103728699.png" alt="image-20240319103728699"></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319104438260.png" alt="image-20240319104438260"></p><p>3.让maven项目继承父项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--所有springboot项目都必须继承自 spring-boot-starter-parent 父项目--&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;3.2.3&lt;/version&gt;</span><br><span class="line">   &lt;/parent&gt;</span><br></pre></td></tr></table></figure><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319105148655.png" alt="image-20240319105148655"></p></li><li><p><strong>导入场景</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--web开发的场景启动器--&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319105629779.png" alt="image-20240319105629779"></p></li><li><p><strong>主程序</strong></p><p>&#x3D;&#x3D;springboot默认只扫描主程序同级包及其子包&#x3D;&#x3D;</p><p>&#x3D;&#x3D;余胜军版还有另外两种启动方式可以了解下&#x3D;&#x3D;</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319110131325.png" alt="image-20240319110131325"></p></li><li><p><strong>业务</strong></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319111124446.png" alt="image-20240319111124446"></p></li><li><p><strong>测试</strong></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319111310858.png" alt="image-20240319111310858"></p></li><li><p><strong>打包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--SpringBoot应用打包插件 建议加上版本号不然会报错--&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.2.3&lt;/version&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319111512448.png" alt="image-20240319111512448"></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319112156204.png" alt="image-20240319112156204"></p><p>&#x3D;&#x3D;运行时报错的话把环境变量换成高版本jdk就好了&#x3D;&#x3D;</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319115845052.png" alt="image-20240319115845052"></p></li><li><p><strong>运维</strong></p><blockquote><p>假如要改端口号为8081</p></blockquote><p>以前：在应用里边找配置文件该</p><p>现在：外部化配置改</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319120651799.png" alt="image-20240319120651799"></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319120615417.png" alt="image-20240319120615417"></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319120818430.png" alt="image-20240319120818430"></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319120834088.png" alt="image-20240319120834088"></p><p>成功更改端口号</p></li></ol><h4 id="2-特性小结"><a href="#2-特性小结" class="headerlink" title="2. 特性小结"></a>2. 特性小结</h4><ol><li><p><strong>简化整合</strong></p><p>场景启动器：导入相关的场景，拥有相关的功能。</p><p>SpringBoot官方支持的所有场景：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters</a></p><ul><li><p>官方提供的场景：命名为：spring-boot-starter-*</p></li><li><p>第三方提供的场景：命名为：*-spring-boot-starter</p></li></ul></li></ol><p>   场景一导入，万物皆就绪。</p><p>   <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319145515217.png" alt="image-20240319145515217"></p><p>   <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319145541481.png" alt="image-20240319145541481"></p><ol start="2"><li><p><strong>简化开发</strong></p><p>无需编写任何配置，直接开发业务</p></li><li><p><strong>简化配置</strong></p><p>application.properties,集中式管理配置，这里配置即可。配置基本都有默认值。</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319150206856.png" alt="image-20240319150206856"></p><p>可参考官方文档看可以配置什么<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties</a></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319150553418.png" alt="image-20240319150553418"></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319150625336.png" alt="image-20240319150625336"></p></li><li><p><strong>简化部署</strong></p><p>打包为可执行jar包</p><p>linux服务器上有java环境即可运行。</p></li><li><p><strong>简化运维</strong></p><p>修改配置（外部放一个application.properties），监控，健康检查。。。。。</p></li></ol><h4 id="3-Spring-Initializr-创建向导（推荐）"><a href="#3-Spring-Initializr-创建向导（推荐）" class="headerlink" title="3. Spring Initializr 创建向导（推荐）"></a>3. Spring Initializr 创建向导（推荐）</h4><p>   &#x3D;&#x3D;注：这种直接创建的可能需要自己改文件格式&#x3D;&#x3D;</p><p>   <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319160627292.png" alt="image-20240319160627292"></p><p>   1.新建模块</p><p>   <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319155458100.png" alt="image-20240319155458100"></p><p>   2.选择模板</p><p>   <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319155750884.png" alt="image-20240319155750884"></p><p>   3.成功创建，已经帮我们做好一些配置</p><p>   <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319161217222.png" alt="image-20240319161217222"></p><p>   4.写个程序测试下</p><p>   <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319161501004.png" alt="image-20240319161501004"></p><p>   <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319161439806.png" alt="image-20240319161439806"></p><p>   5.目录介绍</p><p>   <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319161856636.png" alt="image-20240319161856636"></p><h3 id="3、应用分析"><a href="#3、应用分析" class="headerlink" title="3、应用分析"></a><strong>3、应用分析</strong></h3><h4 id="1-依赖管理机制"><a href="#1-依赖管理机制" class="headerlink" title="1. 依赖管理机制"></a>1. <strong>依赖管理机制</strong></h4><p>   思考：</p><p>   1、为什么导入<code>starter-web</code>所有相关依赖都导入进来？</p><ul><li><p>开发什么场景，导入什么<strong>场景启动器。</strong></p></li><li><p><strong>maven依赖传递原则。A-B-C： A就拥有B和C</strong></p></li><li><p>导入 场景启动器。 场景启动器 自动把这个场景的所有核心依赖全部导入进来</p></li></ul><p>   2、为什么版本号都不用写？</p><ul><li>每个boot项目都有一个父项目<code>spring-boot-starter-parent</code></li><li>parent的父项目是<code>spring-boot-dependencies</code></li><li>父项目 <strong>版本仲裁中心</strong>，把所有常见的jar的依赖版本都声明好了。</li><li>比如：<code>mysql-connector-j</code></li></ul><p>   3、自定义版本号</p><ul><li><p>利用maven的就近原则</p><ul><li><p>直接在当前项目<code>properties</code>标签中声明父项目用的版本属性的key</p></li><li><p>或者直接在<strong>导入依赖的时候声明版本</strong></p></li></ul></li></ul><p>   4、第三方的jar包</p><ul><li>springboot父项目没有管理的需要自行声明好</li></ul>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319162442683.png" alt="image-20240319162442683"></p><h4 id="2-自动配置机制"><a href="#2-自动配置机制" class="headerlink" title="2. 自动配置机制"></a>2. <strong>自动配置机制</strong></h4><h5 id="1-初步理解"><a href="#1-初步理解" class="headerlink" title="1. 初步理解"></a>1. <strong>初步理解</strong></h5><ul><li><p>自动配置Tomcat,SpringMVC等</p><ul><li><p>以前：DispatcherServlet,ViewResolver,CharacterEncodingFilter…</p></li><li><p>现在：自动配置好了这些组件，导入场景，容器中就会自动配置好这个场景的核心组件</p></li><li><p>验证：<strong>容器中有了什么组件就具有了什么功能</strong></p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//java10  var:局部变量类型自动推断功能</span></span><br><span class="line"> <span class="type">var</span> <span class="variable">ioc</span> <span class="operator">=</span> SpringApplication.run(Boot302DemoApplication.class, args);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//1.获取容器中所有组件的名字</span></span><br><span class="line">  String[] names = ioc.getBeanDefinitionNames();</span><br><span class="line">  <span class="comment">//2.挨个遍历: </span></span><br><span class="line">  <span class="comment">//dispatcherServlet、beanNameViewResolver、characterEncodingFILTER 、multipartResolve</span></span><br><span class="line">  <span class="comment">//springboot把以前配置的核心组件现在都给我们自动配置好了</span></span><br><span class="line">  <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">  System.out.println(name);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><strong>默认的包扫描规则</strong></p><ul><li><p>SpringBootApplication标注的类就是主程序类</p></li><li><p>SpringBoot只会扫描主程序所在的包及其下面的子包，自动的component-scan功能</p></li><li><p>也可以自定义扫描路径</p><ol><li>@SpringBootApplication(scanBasePackages &#x3D; “com.chabai”)</li></ol></li></ul></li></ul><ol start="2"><li>@SpringBootApplication相当于<br>  @SpringBootConfiguration<br>  @EnableAutoConfiguration<br>  @ComponentScan<br>  三个注解<br>  单独使用@ComponentScan(scanBasePackages &#x3D; “com.chabai”)</li></ol><p>​    </p><ul><li><p><strong>配置默认值</strong></p><p>配置文件的所有配置项是和某个类的对象值进行一一绑定的。</p><p>绑定了配置文件中每一项值的类：配置文件类。</p><p>比如：</p><ul><li><p>ServerProperties类绑定了所有Tomcat服务器有关的配置</p></li><li><p>MultipartProperties类绑定了所有文件上传相关的配置</p></li><li><p>….参照<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server">官方文档</a>：或者参照 绑定的  <strong>属性类</strong>。</p></li></ul></li><li><p>按需加载自动配置</p><ul><li><p>导入场景<code>spring-boot-starter-web</code></p></li><li><p>场景启动器除了会导入相关功能依赖，还导入一个<code>spring-boot-starter</code>，是所有<code>starter</code>的<code>starter</code>，基础核心starter</p></li><li><p><code>spring-boot-starter</code>导入了一个包 <code>spring-boot-autoconfigure</code>。包里面都是各种场景的<code>AutoConfiguration</code><strong>自动配置类</strong></p></li><li><p>虽然全场景的自动配置都在 <code>spring-boot-autoconfigure</code>这个包，但是不是全都开启的。</p><ul><li>导入哪个场景就开启哪个自动配置</li></ul></li></ul></li></ul><p>  总结： 导入场景启动器、触发 <code>spring-boot-autoconfigure</code>这个包的自动配置生效、容器中就会具有相关场景的功能</p><h5 id="2-完整流程"><a href="#2-完整流程" class="headerlink" title="2. 完整流程"></a>2. <strong>完整流程</strong></h5><p>  思考：</p><p>  <strong>1、SpringBoot怎么实现导一个<code>starter</code>、写一些简单配置，应用就能跑起来，我们无需关心整合</strong></p><p>  2、为什么Tomcat的端口号可以配置在<code>application.properties</code>中，并且<code>Tomcat</code>能启动成功？</p><p>  3、导入场景后哪些<strong>自动配置能生效</strong>？</p><p>  <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240323143144049.png" alt="image-20240323143144049"></p><p>  <strong>自动配置流程细节梳理：</strong></p><p><strong>1、导入<code>starter-web</code>：导入了web开发场景</strong></p><p>1.场景启动器导入了相关场景的所有依赖：<code>starter-json</code>、<code>starter-tomcat</code>、<code>springmvc</code></p><p>2.每个场景启动器都引入了一个<code>spring-boot-starter</code>，核心场景启动器。</p><p>3.<strong>核心场景启动器</strong>引入了<code>spring-boot-autoconfigure</code>包。</p><p>4.<code>spring-boot-autoconfigure</code>里面囊括了所有场景的所有配置。</p><p>5.只要这个包下的所有类都能生效，那么相当于SpringBoot官方写好的整合功能就生效了。</p><p>6.SpringBoot默认却扫描不到 <code>spring-boot-autoconfigure</code>下写好的所有<strong>配置类</strong>。（这些<strong>配置类</strong>给我们做了整合操作），<strong>默认只扫描主程序所在的包</strong>。但可使用主程序<code>@EnableAutoConfiguration</code>注解批量的把142个配置类全部导入进来。</p><p><strong>2、主程序：<code>@SpringBootApplication</code></strong></p><p>1.<code>@SpringBootApplication</code>由三个注解组成<code>@SpringBootConfiguration</code>（声明我是一个配置类）、<code>@EnableAutoConfiguratio</code>（如下）、<code>@ComponentScan</code>（扫描指定组件包）</p><p>2.SpringBoot默认只能扫描自己主程序所在的包及其下面的子包，扫描不到 <code>spring-boot-autoconfigure</code>包中官方写好的<strong>配置类</strong></p><p>3.<code>@EnableAutoConfiguration</code>：SpringBoot <strong>开启自动配置的核心</strong>。</p><ul><li>是由<code>@Import(AutoConfigurationImportSelector.class)</code>提供功能：批量给容器中导入组件。</li><li>SpringBoot启动会默认加载 142个配置类。</li><li>这<strong>142个配置类</strong>来自于<code>spring-boot-autoconfigure</code>下 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件指定的</li><li>项目启动的时候利用 @Import 批量导入组件机制把 <code>autoconfigure</code> 包下的142 <code>xxxxAutoConfiguration</code>类导入进来（<strong>自动配置类</strong>）</li><li>虽然导入了<code>142</code>个自动配置类，但并不全生效。</li></ul><p>4.&#x3D;&#x3D;按需生效&#x3D;&#x3D;：</p><ul><li><p>并不是这<code>142</code>个自动配置类都能生效</p></li><li><p>每一个自动配置类，都有条件注解<code>@ConditionalOnxxx</code>，只有条件成立，才能生效</p></li></ul><p><strong>3、xxxxAutoConfiguration自动配置类</strong></p><p><strong>1.给容器中使用@Bean 放一堆组件。</strong>这些组件就能工作了。</p><p>2.每个<strong>自动配置类</strong>都可能有这个注解<code>@EnableConfigurationProperties(ServerProperties.class)</code>，用来把配置文件中配的指定前缀的属性值封装到 <code>xxxProperties</code><strong>属性类</strong>中</p><p>3.以Tomcat为例：把服务器的所有配置都是以<code>server</code>开头的。配置都封装到了属性类中。</p><p>4.给<strong>容器</strong>中放的所有<strong>组件</strong>的一些<strong>核心参数</strong>，都来自于<code>xxxProperties</code><strong>。</strong><code>xxxProperties</code><strong>都是和配置文件绑定。</strong></p><p><strong>只需要改配置文件的值，核心组件的底层参数都能修改</strong></p><p>​     </p><p>   <strong>4、</strong>写业务，全程无需关心各种整合（底层这些整合写好了，而且也生效了）</p><p>&#x3D;&#x3D;<strong>核心流程总结：</strong>&#x3D;&#x3D;</p><p>1.导入<code>starter</code>，就会导入<code>autoconfigure</code>包。<br>2.<code>autoconfigure</code> 包里面 有一个文件 <code>META-   INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>,里面指定的所有启动要加载的自动配置类</p><p>3.@EnableAutoConfiguration 会自动的把上面文件里面写的所有<strong>自动配置类都导入进来。xxxAutoConfiguration 是有条件注解进行按需加载</strong></p><p>4.<code>xxxAutoConfiguration</code>给容器中导入一堆组件，组件都是从 <code>xxxProperties</code>中提取属性值<br>5.<code>xxxProperties</code>又是和<strong>配置文件</strong>进行了绑定</p><p><strong>效果：</strong>&#x3D;&#x3D;导入<code>starter</code>、修改配置文件，就能修改底层行为&#x3D;&#x3D;。中间过程全自动化，这就是我们说的自动配置（springboot核心原理）</p><h5 id="3-如何学好SpringBoot"><a href="#3-如何学好SpringBoot" class="headerlink" title="3. &#x3D;&#x3D;如何学好SpringBoot&#x3D;&#x3D;"></a>3. &#x3D;&#x3D;<strong>如何学好SpringBoot</strong>&#x3D;&#x3D;</h5><blockquote><p>这节很重要建议多看看，能完全理解，把我这里理解了springboot就入门了</p></blockquote><p>  框架的框架、底层基于Spring。&#x3D;&#x3D;<strong>能调整每一个场景的底层行为</strong>。100%项目一定会用到<strong>底层自定义</strong>&#x3D;&#x3D;</p><p>  摄影：</p><ul><li>傻瓜：自动配置好。</li><li><strong>单反</strong>：焦距、光圈、快门、感光度….</li><li>傻瓜+<strong>单反</strong>：</li></ul><p>  普通开发：<code>导入starter</code>，Controller、Service、Mapper、偶尔修改配置文件</p><p>  <strong>高级开发</strong>：自定义组件、自定义配置、自定义starter</p><p><strong>1.理解自动配置原理</strong></p><p>  a.<strong>导入starter</strong>(场景) <strong>–&gt; 导入生效xxxxAutoConfiguration(自动配置类) –&gt;</strong> <strong>组件</strong> <strong>–&gt; xxxProperties –&gt;</strong> <strong>配置文件</strong></p><blockquote><p>导入场景，这个场景会经过一系列过程最终产生一个效果，就会给我们导入非常多的生效配置类，而这些自动配置类又会给我们容器中放很多组件(组件：对这个场景进行操作的)，有了这些组件以后我们就可把他@Autowired到业务里边，实现一些对这个场景操作的功能，但是这些组件的核心参数都会绑定在xxxProperties属性类中，而xxxProperties属性类又和配置文件关联的，所以如果我们对自动装配的组件的一些内容进行调整，通过调整配置文件即可实现。</p></blockquote><p>  <strong>&#x3D;&#x3D;核心思想：&#x3D;&#x3D;</strong></p><ul><li><strong>这个场景自动配置导入了哪些组件，我们能不能@Autowired进来使用</strong></li><li><strong>能不能通过修改配置改变组件的一些默认参数</strong></li><li><strong>需不需要自己完全定义这个组件</strong></li><li><strong>场景定制化</strong></li></ul><p>2.理解<strong>其他框架底层</strong></p><p>  a.拦截器</p><p>3.可以随时<strong>定制化任何组件</strong>两种方法：</p><p>  a.<strong>配置文件</strong></p><p>  b.<strong>自定义组件</strong></p><p>4.<strong>最佳实战</strong>：</p><ul><li><p><strong>选场景</strong>，导入到项目</p></li><li><p>官方：starter</p><ul><li><p>第三方：去仓库搜</p></li><li><p><strong>写配置，改配置文件关键项</strong></p></li></ul></li><li><p>数据库参数（连接地址、账号密码…）</p><ul><li><p>分析这个场景给我们导入了<strong>哪些能用的组件</strong></p><ul><li><p><strong>自动装配</strong>这些组件进行后续使用</p></li><li><p>不满意springboot提供的自动配好的默认组件</p><ul><li><strong>定制化</strong>（两种方法）</li></ul></li></ul></li></ul></li><li><p>改配置<br>    - 自定义组件</p></li></ul><blockquote><p>以后不管SpringBoot整合什么进行开发，只要我们把握了这个核心流程，以后SpringBoot的所有场景我们用起来都会思路清晰。</p></blockquote><p>5.<strong>以整合redis开发为例：</strong></p><ul><li><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">选场景</a>：<code>spring-boot-starter-data-redis </code></p><ul><li>导入场景，redis的自动配置就生效了</li></ul><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240323181720201.png" alt="image-20240323181720201"></p><ul><li><p>场景AutoConfiguration 就是这个场景的自动配置类</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240323181915319.png" alt="image-20240323181915319"></p></li></ul></li><li><p>写配置：</p><ul><li><p><code>@EnableConfigurationProperties(RedisProperties.class)</code></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240323182053076.png" alt="image-20240323182053076"></p></li><li><p>分析到这个场景的自动配置类开启了哪些属性绑定关系</p></li><li><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240323182220337.png" alt="image-20240323182220337"></p></li><li><p>修改redis相关的配置</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240323182644660.png" alt="image-20240323182644660"></p></li></ul></li><li><p>分析容器中有什么组件我能用：</p><ul><li>分析到 <code>RedisAutoConfiguration</code>  自动配置类给容器中放了 <code>StringRedisTemplate</code>组件</li></ul><blockquote><p>如果我们会用redis的话，stringRedisTemplate我们都知道是干嘛的</p></blockquote><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240323182921809.png" alt="image-20240323182921809"></p><ul><li><p>给业务代码中自动装配 <code>StringRedisTemplate</code></p><blockquote><p>我们通过@Autowired把它注入到业务逻辑里边，就可以实现对redis进行增删改查操作。</p></blockquote><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240323184119487.png" alt="image-20240323184119487"></p></li></ul></li><li><p>定制化<code>StringRedisTemplate</code>组件两种方法</p><ul><li><p>修改配置文件（这个组件和配置文件关联不多，不能改配置文件实现）</p></li><li><p>自定义组件，自己给容器中放一个 <code>StringRedisTemplate</code></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240323185147245.png" alt="image-20240323185147245"></p></li></ul></li></ul><h3 id="4、核心技能"><a href="#4、核心技能" class="headerlink" title="4、核心技能"></a>4、核心技能</h3><h4 id="1-常用注解"><a href="#1-常用注解" class="headerlink" title="1. 常用注解"></a>1. <strong>常用注解</strong></h4><blockquote><p>SpringBoot摒弃了XML配置方式，改为全注解驱动</p></blockquote><h5 id="1-组件注册"><a href="#1-组件注册" class="headerlink" title="1. 组件注册"></a>1. 组件注册</h5><p>  <strong>@Configuration</strong>、**@SpringBootConfiguration**:通用配置类可以用第一个，自己springboot项目写的配置类可以用第二个</p><p>  <strong>@Bean</strong>、**@Scope**</p><p>  <strong>@Controller、 @Service、@Repository、@Component</strong></p><p>  <strong>@Import</strong></p><p>@ComponentScan</p><h6 id="a-以前给spring-ioc容器注册组件（配置XML）："><a href="#a-以前给spring-ioc容器注册组件（配置XML）：" class="headerlink" title="a. 以前给spring ioc容器注册组件（配置XML）："></a>a. <strong>以前给spring ioc容器注册组件（配置XML）：</strong></h6><p>  1.先写组件类</p><p>  <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319183442518.png" alt="image-20240319183442518"></p><p>  <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319183459259.png" alt="image-20240319183459259"></p><p>  2.把Cat和User组件注册到容器中</p><p>  <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319184031671.png" alt="image-20240319184031671"></p><h6 id="b-现在给spring-ioc容器注册组件-全注解-："><a href="#b-现在给spring-ioc容器注册组件-全注解-：" class="headerlink" title="b.  现在给spring ioc容器注册组件(全注解)："></a>b.  <strong>现在给spring ioc容器注册组件(全注解)：</strong></h6><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">步骤：</span><br><span class="line"></span><br><span class="line">1、@Configuration 编写一个配置类</span><br><span class="line"></span><br><span class="line">2、在配置类中，自定义方法给容器中注册组件。配合@Bean</span><br><span class="line"></span><br><span class="line">3、或使用@Import 导入第三方的组件    </span><br></pre></td></tr></table></figure><p> 方法一:</p><p>  利用这些**@Service、@Repository、@Component**注解</p><p>  方法二：</p><p>  1.先写组件类（同上）</p><p>  2.把Cat和User组件注册到容器中</p><p>  <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319194122478.png" alt="image-20240319194122478"></p><p>  3.验证，注册成功</p><p>  <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319194218144.png" alt="image-20240319194218144"></p><p>  4.验证单实例</p><p>  <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319194923156.png" alt="image-20240319194923156"></p><h6 id="c-注册第三方组件到容器："><a href="#c-注册第三方组件到容器：" class="headerlink" title="c. 注册第三方组件到容器："></a>c. <strong>注册第三方组件到容器</strong>：</h6><p>  方法一:</p><p>  <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319202250428.png" alt="image-20240319202250428"></p><p>  <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319202339614.png" alt="image-20240319202339614"></p><p>  方法二：</p><p>  &#x3D;&#x3D;注：我们导入第三方组件也一定要写到配置类里边&#x3D;&#x3D;</p><p>  <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319202424170.png" alt="image-20240319202424170"></p><p>  <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319202800269.png" alt="image-20240319202800269"></p><h5 id="2-条件注解"><a href="#2-条件注解" class="headerlink" title="2. 条件注解"></a>2. 条件注解</h5><p>  @ConditionalOnXxx</p><blockquote><p>如果注解指定的<strong>条件成立</strong>，则触发指定行为</p><p>注：如果放在类上，注解判断生效整个类才生效</p><p>如果放在方法上，单独对这个方法进行注解判断</p></blockquote><p>  <em><strong>@ConditionalOnXxx</strong></em></p><p>  <strong>@ConditionalOnClass：如果类路径中存在这个类，则触发指定行为</strong></p><p>  <strong>@ConditionalOnMissingClass：如果类路径中不存在这个类，则触发指定行为</strong></p><p>  <strong>@ConditionalOnBean：如果容器中存在这个Bean（组件），则触发指定行为</strong></p><p>  <strong>@ConditionalOnMissingBean：如果容器中不存在这个Bean（组件），则触发指定行为</strong></p><p>  场景：</p><ul><li><p>如果存在<code>FastsqlException</code>这个类，给容器中放一个<code>Cat</code>组件，名cat01，</p></li><li><p>否则，就给容器中放一个<code>Dog</code>组件，名dog01</p><p>1.给spring ioc容器注册组件</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319211325719.png" alt="image-20240319211325719"></p><p>2.验证</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319211230560.png" alt="image-20240319211230560"></p></li><li><p>如果系统中有<code>dog01</code>这个组件，就给容器中放一个 User组件，名zhangsan </p></li><li><p>否则，就放一个User，名叫lisi</p><blockquote><p>@ConditionalOnBean（value&#x3D;组件类型，name&#x3D;组件名字）：判断容器中是否有这个类型的组件，并且名字是指定的值</p></blockquote><p>1.给spring ioc容器注册组件</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319212416216.png" alt="image-20240319212416216"></p><p>2.验证</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319212458925.png" alt="image-20240319212458925"></p></li></ul><p>   &#x3D;&#x3D;下边这些同理运用&#x3D;&#x3D;<br>      @ConditionalOnRepositoryType (org.springframework.boot.autoconfigure.data)<br>      @ConditionalOnDefaultWebSecurity (org.springframework.boot.autoconfigure.security)<br>      @ConditionalOnSingleCandidate (org.springframework.boot.autoconfigure.condition)<br>      @ConditionalOnWebApplication (org.springframework.boot.autoconfigure.condition)<br>      @ConditionalOnWarDeployment (org.springframework.boot.autoconfigure.condition)<br>      @ConditionalOnJndi (org.springframework.boot.autoconfigure.condition)<br>      @ConditionalOnResource (org.springframework.boot.autoconfigure.condition)<br>      @ConditionalOnExpression (org.springframework.boot.autoconfigure.condition)<br>      <strong>@ConditionalOnClass</strong> (org.springframework.boot.autoconfigure.condition)<br>      @ConditionalOnEnabledResourceChain (org.springframework.boot.autoconfigure.web)<br>      <strong>@ConditionalOnMissingClass</strong> (org.springframework.boot.autoconfigure.condition)<br>      @ConditionalOnNotWebApplication (org.springframework.boot.autoconfigure.condition)<br>      @ConditionalOnProperty (org.springframework.boot.autoconfigure.condition)<br>      @ConditionalOnCloudPlatform (org.springframework.boot.autoconfigure.condition)<br>      <strong>@ConditionalOnBean</strong> (org.springframework.boot.autoconfigure.condition)<br>      <strong>@ConditionalOnMissingBean</strong> (org.springframework.boot.autoconfigure.condition)<br>      @ConditionalOnMissingFilterBean (org.springframework.boot.autoconfigure.web.servlet)<br>      @Profile (org.springframework.context.annotation)<br>      @ConditionalOnInitializedRestarter (org.springframework.boot.devtools.restart)<br>      @ConditionalOnGraphQlSchema (org.springframework.boot.autoconfigure.graphql)<br>      @ConditionalOnJava (org.springframework.boot.autoconfigure.condition)</p><h5 id="3-属性绑定"><a href="#3-属性绑定" class="headerlink" title="3. 属性绑定"></a>3. 属性绑定</h5><p>  <strong>@ConfigurationProperties： 声明组件的属性和配置文件哪些前缀开始项进行绑定</strong></p><p>  <strong>@EnableConfigurationProperties：快速注册注解</strong>  相当于import+ConfigurationProperties</p><ul><li>&#x3D;&#x3D;<strong>场景：</strong>&#x3D;&#x3D;SpringBoot默认只扫描自己主程序所在的包。如果导入第三方包，即使组件上标注了 @Component、@ConfigurationProperties 注解，也没用。因为组件都扫描不进来，此时使用这个注解就可以快速进行属性绑定并把组件注册进容器</li></ul><p>   将容器中任意<strong>组件（Bean）的属性值</strong>和<strong>配置文件</strong>的配置项的值<strong>进行绑定</strong></p><ul><li><p><strong>1、给容器中注册组件（@Component、@Bean方法都可），组件只有在容器中才会有我们springboot给我们提供的各种功能</strong></p><ul><li><p><strong>2、使用</strong>@ConfigurationProperties 声明组件和配置文件的哪些配置项进行绑定</p><p> 更多注解参照：<a href="https://www.bilibili.com/video/BV1gW411W7wy">Spring注解驱动开发</a>【1-26集】</p></li></ul><p>&#x3D;&#x3D;a.使用@ConfigurationProperties&#x3D;&#x3D;</p><p><strong>方法一：</strong></p><p>1.编写配置文件</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319214506873.png" alt="image-20240319214506873"></p><p>2.绑定配置文件</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319214603773.png" alt="image-20240319214603773"></p><p>3.验证</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319214630637.png" alt="image-20240319214630637"></p><p><strong>方法二：</strong></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319214957876.png" alt="image-20240319214957876"></p><p><strong>方法三：</strong></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319215120533.png" alt="image-20240319215120533"></p><p>  &#x3D;&#x3D;b.使用@EnableConfigurationProperties&#x3D;&#x3D;</p><p>1.编写配置文件</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319220218145.png" alt="image-20240319220218145"></p><p>2.绑定配置文件</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319220250130.png" alt="image-20240319220250130"></p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319220327909.png" alt="image-20240319220327909"></p><p>3.验证</p><p><img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/image-20240319220409533.png" alt="image-20240319220409533"></p></li></ul><h4 id="2-YAML配置文件"><a href="#2-YAML配置文件" class="headerlink" title="2. YAML配置文件"></a>2. <strong>YAML配置文件</strong></h4><blockquote><p><strong>痛点</strong>：SpringBoot 集中化管理配置，<code>application.properties</code></p><p><strong>问题</strong>：配置多以后难阅读和修改，<strong>层级结构辨识度不高</strong></p></blockquote><blockquote><p>YAML 是 “YAML Ain’t a Markup Language”（YAML 不是一种标记语言）。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（是另一种标记语言）。</p><ul><li>设计目标，就是<strong>方便人类读写</strong></li><li><strong>层次分明</strong>，更适合做配置文件</li><li>使用<code>.yaml</code>或 <code>.yml</code>作为文件后缀</li></ul></blockquote><p><strong>1.基本语法</strong></p><ul><li><strong>大小写敏感</strong></li><li>使用<strong>缩进表示层级关系，k: v，使用空格分割k,v</strong></li><li>缩进时不允许使用Tab键，只允许<strong>使用空格</strong>。换行</li><li>缩进的空格数目不重要，只要<strong>相同层级</strong>的元素<strong>左侧对齐</strong>即可</li><li><strong># 表示注释</strong>，从这个字符一直到行尾，都会被解析器忽略。</li></ul><p>支持的写法：</p><ul><li><p><strong>对象</strong>：<strong>键值对</strong>的集合，如：映射（map）&#x2F; 哈希（hash） &#x2F; 字典（dictionary）</p></li><li><p><strong>数组</strong>：一组按次序排列的值，如：序列（sequence） &#x2F; 列表（list）</p></li><li><p><strong>纯量</strong>：单个的、不可再分的值，如：字符串、数字、bool、日期</p></li></ul><p><strong>2.示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span> <span class="comment">//和配置文件person前缀的所有配置进行绑定</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//自动生成JavaBean属性的getter/setter</span></span><br><span class="line"><span class="comment">//@NoArgsConstructor //自动生成无参构造器</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor //自动生成全参构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthDay;</span><br><span class="line">    <span class="keyword">private</span> Boolean like;</span><br><span class="line">    <span class="keyword">private</span> Child child; <span class="comment">//嵌套对象</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dog&gt; dogs; <span class="comment">//数组（里面是对象）</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Cat&gt; cats; <span class="comment">//表示Map</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthDay;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; text; <span class="comment">//数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>properties表示法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">person.name=张三</span><br><span class="line">person.age=<span class="number">18</span></span><br><span class="line">person.birthDay=<span class="number">2010</span>/<span class="number">10</span>/<span class="number">12</span> <span class="number">12</span>:<span class="number">12</span>:<span class="number">12</span></span><br><span class="line">person.like=<span class="literal">true</span></span><br><span class="line">person.child.name=李四</span><br><span class="line">person.child.age=<span class="number">12</span></span><br><span class="line">person.child.birthDay=<span class="number">2018</span>/<span class="number">10</span>/<span class="number">12</span></span><br><span class="line">person.child.text[<span class="number">0</span>]=abc</span><br><span class="line">person.child.text[<span class="number">1</span>]=def</span><br><span class="line">person.dogs[<span class="number">0</span>].name=小黑</span><br><span class="line">person.dogs[<span class="number">0</span>].age=<span class="number">3</span></span><br><span class="line">person.dogs[<span class="number">1</span>].name=小白</span><br><span class="line">person.dogs[<span class="number">1</span>].age=<span class="number">2</span></span><br><span class="line">person.cats.c1.name=小蓝</span><br><span class="line">person.cats.c1.age=<span class="number">3</span></span><br><span class="line">person.cats.c2.name=小灰</span><br><span class="line">person.cats.c2.age=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>yaml表示法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line">  name: 张三</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">  birthDay: <span class="number">2010</span>/<span class="number">10</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">12</span>:<span class="number">12</span></span><br><span class="line">  like: <span class="literal">true</span></span><br><span class="line">  child:</span><br><span class="line">    name: 李四</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">    birthDay: <span class="number">2018</span>/<span class="number">10</span>/<span class="number">10</span></span><br><span class="line">    text: [<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>]</span><br><span class="line">  dogs:</span><br><span class="line">    - name: 小黑</span><br><span class="line">      age: <span class="number">3</span></span><br><span class="line">    - name: 小白</span><br><span class="line">      age: <span class="number">2</span></span><br><span class="line">  cats:</span><br><span class="line">    c1:</span><br><span class="line">      name: 小蓝</span><br><span class="line">      age: <span class="number">3</span></span><br><span class="line">    c2: &#123;name: 小绿,age: <span class="number">2</span>&#125; #对象也可用&#123;&#125;表示</span><br></pre></td></tr></table></figure><p>3.细节</p><ul><li><p>birthDay 推荐写为 birth-day</p></li><li><p><strong>文本</strong>：</p><ul><li><p><strong>单引号</strong>不会转义【\n 则为普通字符串显示】</p></li><li><p><strong>双引号</strong>会转义【\n会显示为<strong>换行符</strong>】</p></li></ul></li><li><p><strong>大文本</strong></p><ul><li><p>|开头，大文本写在下层，<strong>保留文本格式</strong>，<strong>换行符正确显示</strong></p></li><li><blockquote><p>开头，大文本写在下层，折叠换行符</p></blockquote></li></ul></li><li><p><strong>多文档合并</strong></p><ul><li>使用<code>---</code>可以把多个yaml文档合并在一个文档中，每个文档区依然认为内容独立</li></ul></li></ul><p>4.小技巧：lombok</p><blockquote><p>简化JavaBean 开发。自动生成构造器、getter&#x2F;setter、自动生成Builder模式等</p></blockquote>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>   使用<code>@Data</code>等注解</p><h4 id="3-日志配置"><a href="#3-日志配置" class="headerlink" title="3. 日志配置"></a>3. <strong>日志配置</strong></h4><p>   规范：项目开发不要编写<code>System.out.println()</code>，应该用<strong>日志</strong>记录信息</p><p>   <img src="/../UpPictures/SpringBoot3(%E4%B8%80)%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Pictures/1680232037132-d2fa8085-3847-46f2-ac62-14a6188492aa.png" alt="img"></p><p>   <strong>感兴趣日志框架关系与起源可参考</strong>：<a href="https://www.bilibili.com/video/BV1gW411W76m">https://www.bilibili.com/video/BV1gW411W76m</a> 视频 21~27集</p><p><strong>1.简介</strong></p><ol><li><p>Spring使用commons-logging作为内部日志，但底层日志实现是开放的。可对接其他日志框架。</p><p>a.spring5及以后 commons-logging被spring直接自己写了。</p></li><li><p>支持 jul，log4j2,logback。SpringBoot 提供了默认的控制台输出配置，也可以配置输出为文件。</p></li><li><p>logback是默认使用的。</p></li><li><p>虽然<strong>日志框架很多</strong>，但是我们不用担心，使用 SpringBoot 的<strong>默认配置就能工作的很好</strong>。</p></li></ol><p><strong>SpringBoot怎么把日志默认配置好的</strong></p><p>1、每个<code>starter</code>场景，都会导入一个核心场景<code>spring-boot-starter</code></p><p>2、核心场景引入了日志的所用功能<code>spring-boot-starter-logging</code></p><p>3、默认使用了<code>logback + slf4j</code> 组合作为默认底层日志</p><p>4、<code>日志是系统一启动就要用</code>，<code>xxxAutoConfiguration</code>是系统启动好了以后放好的组件，后来用的。</p><p>5、日志是利用<strong>监听器机制</strong>配置好的。<code>ApplicationListener</code>。</p><p>6、日志所有的配置都可以通过修改配置文件实现。以<code>logging</code>开始的所有配置。</p><p><strong>2.日志格式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2023-03-31T13:56:17.511+08:00  INFO 4944 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2023-03-31T13:56:17.511+08:00  INFO 4944 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.7]</span><br></pre></td></tr></table></figure><p>  默认输出格式：</p><ul><li>时间和日期：毫秒级精度</li><li>日志级别：ERROR, WARN, INFO, DEBUG, or TRACE.</li><li>进程 ID</li><li>—： 消息分割符</li><li>线程名： 使用[]包含</li><li>Logger 名： 通常是产生日志的<strong>类名</strong></li><li>消息： 日志记录的内容</li></ul><p>  注意： logback 没有FATAL级别，对应的是ERROR</p><p>默认值：参照：<code>spring-boot</code>包<code>additional-spring-configuration-metadata.json</code>文件</p><p>默认输出格式值：<code>%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;</code></p><p>可修改为：<code>&#39;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger&#123;15&#125; ===&gt; %msg%n&#39;</code></p><p><strong>3.记录日志</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">或者使用Lombok的<span class="meta">@Slf4j</span>注解</span><br></pre></td></tr></table></figure><p><strong>4.日志级别</strong></p><ul><li><p>由低到高：<code>ALL,TRACE, DEBUG, INFO, WARN, ERROR,FATAL,OFF</code>；</p><ul><li><p><strong>只会打印指定级别及以上级别的日志</strong></p></li><li><p>ALL：打印所有日志</p></li><li><p>TRACE：追踪框架详细流程日志，一般不使用</p></li><li><p>DEBUG：开发调试细节日志</p></li><li><p>INFO：关键、感兴趣信息日志</p></li><li><p>WARN：警告但不是错误的信息日志，比如：版本过时</p></li><li><p>ERROR：业务错误日志，比如出现各种异常</p></li><li><p>FATAL：致命错误日志，比如jvm系统崩溃</p></li><li><p>OFF：关闭所有日志记录</p></li></ul></li><li><p>不指定级别的所有类，都使用root指定的级别作为默认级别</p></li><li><p>SpringBoot日志<strong>默认级别是</strong> <strong>INFO</strong></p></li></ul><ol><li>在application.properties&#x2F;yaml中配置logging.level.<logger-name>&#x3D;<level>指定日志级别</li><li>level可取值范围：<code>TRACE, DEBUG, INFO, WARN, ERROR, FATAL, or OFF</code>，定义在 <code>LogLevel</code>类中</li><li>root 的logger-name叫root，可以配置logging.level.root&#x3D;warn，代表所有未指定日志级别都使用 root 的 warn 级别</li></ol><p><strong>5.日志分类</strong></p><p>比较有用的技巧是：</p><p>将相关的logger分组在一起，统一配置。SpringBoot 也支持。比如：Tomcat 相关的日志统一设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logging.group.tomcat=org.apache.catalina,org.apache.coyote,org.apache.tomcat</span><br><span class="line">logging.level.tomcat=trace</span><br></pre></td></tr></table></figure><p>SpringBoot 预定义两个组</p><table><thead><tr><th>Name</th><th>Loggers</th></tr></thead><tbody><tr><td>web</td><td>org.springframework.core.codec, org.springframework.http, org.springframework.web, org.springframework.boot.actuate.endpoint.web, org.springframework.boot.web.servlet.ServletContextInitializerBeans</td></tr><tr><td>sql</td><td>org.springframework.jdbc.core, org.hibernate.SQL, org.jooq.tools.LoggerListener</td></tr></tbody></table><p><strong>6.文件输出</strong></p><p>SpringBoot 默认只把日志写在控制台，如果想额外记录到文件，可以在application.properties中添加logging.file.name or logging.file.path配置项。</p><table><thead><tr><th>logging.file.name</th><th>logging.file.path</th><th>示例</th><th>效果</th></tr></thead><tbody><tr><td>未指定</td><td>未指定</td><td></td><td>仅控制台输出</td></tr><tr><td><strong>指定</strong></td><td>未指定</td><td>my.log</td><td>写入指定文件。可以加路径</td></tr><tr><td>未指定</td><td><strong>指定</strong></td><td>&#x2F;var&#x2F;log</td><td>写入指定目录，文件名为spring.log</td></tr><tr><td><strong>指定</strong></td><td><strong>指定</strong></td><td></td><td>以logging.file.name为准</td></tr></tbody></table><p><strong>7.文件归档与滚动切割</strong></p><blockquote><p>归档：每天的日志单独存到一个文档中。</p><p>切割：每个文件10MB，超过大小切割成另外一个文件。</p></blockquote><p>1.每天的日志应该独立分割出来存档。如果使用logback（SpringBoot 默认整合），可以通过application.properties&#x2F;yaml文件指定日志滚动规则。</p><p>2.如果是其他日志系统，需要自行配置（添加log4j2.xml或log4j2-spring.xml）</p><p>3.支持的滚动规则设置如下</p><table><thead><tr><th>配置项</th><th>描述</th></tr></thead><tbody><tr><td>logging.logback.rollingpolicy.file-name-pattern</td><td>日志存档的文件名格式（默认值：${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz）</td></tr><tr><td>logging.logback.rollingpolicy.clean-history-on-start</td><td>应用启动时是否清除以前存档（默认值：false）</td></tr><tr><td>logging.logback.rollingpolicy.max-file-size</td><td>存档前，每个日志文件的最大大小（默认值：10MB）</td></tr><tr><td>logging.logback.rollingpolicy.total-size-cap</td><td>日志文件被删除之前，可以容纳的最大大小（默认值：0B）。设置1GB则磁盘存储超过 1GB 日志后就会删除旧日志文件</td></tr><tr><td>logging.logback.rollingpolicy.max-history</td><td>日志文件保存的最大天数(默认值：7).</td></tr></tbody></table><p><strong>8.自定义配置</strong></p><p>通常我们配置 application.properties 就够了。当然也可以自定义。比如：</p><table><thead><tr><th>日志系统</th><th>自定义</th></tr></thead><tbody><tr><td>Logback</td><td>logback-spring.xml, logback-spring.groovy, logback.xml, or logback.groovy</td></tr><tr><td>Log4j2</td><td>log4j2-spring.xml or log4j2.xml</td></tr><tr><td>JDK (Java Util Logging)</td><td>logging.properties</td></tr></tbody></table><p>如果可能，我们建议您在日志配置中使用<code>-spring</code> 变量（例如，<code>logback-spring.xml</code> 而不是 <code>logback.xml</code>）。如果您使用标准配置文件，spring 无法完全控制日志初始化。</p><p>最佳实战：自己要写配置，配置文件名加上 <code>xx-spring.xml</code></p><p><strong>9.切换日志组合</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>log4j2支持yaml和json格式的配置文件</p><table><thead><tr><th>格式</th><th>依赖</th><th>文件名</th></tr></thead><tbody><tr><td>YAML</td><td>com.fasterxml.jackson.core:jackson-databind + com.fasterxml.jackson.dataformat:jackson-dataformat-yaml</td><td>log4j2.yaml + log4j2.yml</td></tr><tr><td>JSON</td><td>com.fasterxml.jackson.core:jackson-databind</td><td>log4j2.json + log4j2.jsn</td></tr></tbody></table><p><strong>10.最佳实战</strong></p><ol><li>导入任何第三方框架，先排除它的日志包，因为Boot底层控制好了日志</li><li>修改 <code>application.properties</code> 配置文件，就可以调整日志的所有行为。如果不够，可以编写日志框架自己的配置文件放在类路径下就行，比如<code>logback-spring.xml</code>，<code>log4j2-spring.xml</code></li><li>如需对接<strong>专业日志系统</strong>，也只需要把 logback 记录的<strong>日志</strong>灌倒 <strong>kafka</strong>之类的中间件，这和SpringBoot没关系，都是日志框架自己的配置，<strong>修改配置文件即可</strong></li><li><strong>业务中使用slf4j-api记录日志。不要再 sout 了</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java八股文</title>
      <link href="/posts/17883/"/>
      <url>/posts/17883/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Java的特点"><a href="#1-Java的特点" class="headerlink" title="1.Java的特点"></a>1.Java的特点</h2><p><strong>Java是一门面向对象的编程语言</strong>。面向对象和面向过程的区别参考下一个问题。</p><p><strong>Java具有平台独立性和移植性</strong>。</p><ul><li>Java有一句口号：<code>Write once, run anywhere</code>，一次编写、到处运行。这也是Java的魅力所在。而实现这种特性的正是Java虚拟机JVM。已编译的Java程序可以在任何带有JVM的平台上运行。你可以在windows平台编写代码，然后拿到linux上运行。只要你在编写完代码后，将代码编译成.class文件，再把class文件打成Java包，这个jar包就可以在不同的平台上运行了。</li></ul><p><strong>Java具有稳健性</strong>。</p><ul><li>Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。</li><li>异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用<code>try/catch/finally</code>语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。</li></ul><h2 id="2-Java是如何实现跨平台的？"><a href="#2-Java是如何实现跨平台的？" class="headerlink" title="2.Java是如何实现跨平台的？"></a>2.Java是如何实现跨平台的？</h2><p>Java是通过JVM（Java虚拟机）实现跨平台的。</p><p>JVM可以理解成一个软件，不同的平台有不同的版本。我们编写的Java代码，编译后会生成.class 文件（字节码文件）。Java虚拟机就是负责将字节码文件翻译成特定平台下的机器码，通过JVM翻译成机器码之后才能运行。不同平台下编译生成的字节码是一样的，但是由JVM翻译成的机器码却不一样。</p><p>只要在不同平台上安装对应的JVM，就可以运行字节码文件，运行我们编写的Java程序。</p><p>因此，运行Java程序必须有JVM的支持，因为编译的结果不是机器码，必须要经过JVM的翻译才能执行。</p><h2 id="3-Java-与-C-的区别"><a href="#3-Java-与-C-的区别" class="headerlink" title="3.Java 与 C++ 的区别"></a>3.Java 与 C++ 的区别</h2><ul><li>Java 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 兼容 C ，不但支持面向对象也支持面向过程。</li><li>Java 通过虚拟机从而实现跨平台特性， C++ 依赖于特定的平台。</li><li>Java 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。</li><li>Java 支持自动垃圾回收，而 C++ 需要手动回收。</li><li>Java 不支持多重继承，只能通过实现多个接口来达到相同目的，而 C++ 支持多重继承。</li></ul><h2 id="4-JDK-JRE-JVM三者的关系"><a href="#4-JDK-JRE-JVM三者的关系" class="headerlink" title="4.JDK&#x2F;JRE&#x2F;JVM三者的关系"></a>4.JDK&#x2F;JRE&#x2F;JVM三者的关系</h2><p><strong>JVM</strong></p><p>英文名称（Java Virtual Machine），就是我们耳熟能详的 Java 虚拟机。Java 能够跨平台运行的核心在于 JVM 。</p><p><img src="/../UpPictures/Java%E5%85%AB%E8%82%A1%E6%96%87Pictures/20220402230447.png" alt="img"></p><p>所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行。也就是说class文件并不直接与机器的操作系统交互，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。</p><p>针对不同的系统有不同的 jvm 实现，有 Linux 版本的 jvm 实现，也有Windows 版本的 jvm 实现，但是同一段代码在编译后的字节码是一样的。这就是Java能够跨平台，实现一次编写，多处运行的原因所在。</p><p><strong>JRE</strong></p><p>英文名称（Java Runtime Environment），就是Java 运行时环境。我们编写的Java程序必须要在JRE才能运行。它主要包含两个部分，JVM 和 Java 核心类库。</p><p><img src="/../UpPictures/Java%E5%85%AB%E8%82%A1%E6%96%87Pictures/20220401234008.png" alt="img"></p><p>JRE是Java的运行环境，并不是一个开发环境，所以没有包含任何开发工具，如编译器和调试器等。</p><p>如果你只是想运行Java程序，而不是开发Java程序的话，那么你只需要安装JRE即可。</p><p><strong>JDK</strong></p><p>英文名称（Java Development Kit），就是 Java 开发工具包</p><p>学过Java的同学，都应该安装过JDK。当我们安装完JDK之后，目录结构是这样的</p><p><img src="/../UpPictures/Java%E5%85%AB%E8%82%A1%E6%96%87Pictures/20220404120509.png" alt="img"></p><p>可以看到，JDK目录下有个JRE，也就是JDK中已经集成了 JRE，不用单独安装JRE。</p><p>另外，JDK中还有一些好用的工具，如jinfo，jps，jstack等。</p><p><img src="/../UpPictures/Java%E5%85%AB%E8%82%A1%E6%96%87Pictures/20220404120507.png" alt="img"></p><p>最后，总结一下JDK&#x2F;JRE&#x2F;JVM，他们三者的关系</p><p><strong>JRE &#x3D; JVM + Java 核心类库</strong></p><p><strong>JDK &#x3D; JRE + Java工具 + 编译器 + 调试器</strong></p><p><img src="/../UpPictures/Java%E5%85%AB%E8%82%A1%E6%96%87Pictures/20220402230613.png" alt="img"></p><h2 id="5-Java程序是编译执行还是解释执行？"><a href="#5-Java程序是编译执行还是解释执行？" class="headerlink" title="5.Java程序是编译执行还是解释执行？"></a>5.Java程序是编译执行还是解释执行？</h2><p>先看看什么是编译型语言和解释型语言。</p><p><strong>编译型语言</strong></p><p>在程序运行之前，通过编译器将源程序编译成机器码可运行的二进制，以后执行这个程序时，就不用再进行编译了。</p><p>优点：编译器一般会有预编译的过程对代码进行优化。因为编译只做一次，运行时不需要编译，所以编译型语言的程序执行效率高，可以脱离语言环境独立运行。</p><p>缺点：编译之后如果需要修改就需要整个模块重新编译。编译的时候根据对应的运行环境生成机器码，不同的操作系统之间移植就会有问题，需要根据运行的操作系统环境编译不同的可执行文件。</p><p><strong>总结</strong>：执行速度快、效率高；依靠编译器、跨平台性差些。</p><p><strong>代表语言</strong>：C、C++、Pascal、Object-C以及Swift。</p><p><strong>解释型语言</strong></p><p>定义：解释型语言的源代码不是直接翻译成机器码，而是先翻译成中间代码，再由解释器对中间代码进行解释运行。在运行的时候才将源程序翻译成机器码，翻译一句，然后执行一句，直至结束。</p><p>优点：</p><ol><li>有良好的平台兼容性，在任何环境中都可以运行，前提是安装了解释器（如虚拟机）。</li><li>灵活，修改代码的时候直接修改就可以，可以快速部署，不用停机维护。</li></ol><p>缺点：每次运行的时候都要解释一遍，性能上不如编译型语言。</p><p>总结：解释型语言执行速度慢、效率低；依靠解释器、跨平台性好。</p><p>代表语言：JavaScript、Python、Erlang、PHP、Perl、Ruby。</p><p>对于Java这种语言，它的<strong>源代码</strong>会先通过javac编译成<strong>字节码</strong>，再通过jvm将字节码转换成<strong>机器码</strong>执行，即解释运行 和编译运行配合使用，所以可以称为混合型或者半编译型。</p><h2 id="6-面向对象和面向过程的区别？"><a href="#6-面向对象和面向过程的区别？" class="headerlink" title="6.面向对象和面向过程的区别？"></a>6.面向对象和面向过程的区别？</h2><p>面向对象和面向过程是一种软件开发思想。</p><ul><li>面向过程就是分析出解决问题所需要的步骤，然后用函数按这些步骤实现，使用的时候依次调用就可以了。</li><li>面向对象是把构成问题事务分解成各个对象，分别设计这些对象，然后将他们组装成有完整功能的系统。面向过程只用函数实现，面向对象是用类实现各个功能模块。</li></ul><p>以五子棋为例，面向过程的设计思路就是首先分析问题的步骤：</p><p>1、开始游戏，2、黑子先走，3、绘制画面，4、判断输赢，5、轮到白子，6、绘制画面，7、判断输赢，8、返回步骤2，9、输出最后结果。<br>把上面每个步骤用分别的函数来实现，问题就解决了。</p><p>而面向对象的设计则是从另外的思路来解决问题。整个五子棋可以分为：</p><ol><li>黑白双方</li><li>棋盘系统，负责绘制画面</li><li>规则系统，负责判定诸如犯规、输赢等。</li></ol><p>黑白双方负责接受用户的输入，并告知棋盘系统棋子布局发生变化，棋盘系统接收到了棋子的变化的信息就负责在屏幕上面显示出这种变化，同时利用规则系统来对棋局进行判定。</p><h2 id="7-面向对象有哪些特性？"><a href="#7-面向对象有哪些特性？" class="headerlink" title="7.面向对象有哪些特性？"></a>7.面向对象有哪些特性？</h2><p>面向对象四大特性：封装，继承，多态，抽象</p><p>1、封装就是将类的信息隐藏在类内部，不允许外部程序直接访问，而是通过该类的方法实现对隐藏信息的操作和访问。 良好的封装能够减少耦合。</p><p>2、继承是从已有的类中派生出新的类，新的类继承父类的属性和行为，并能扩展新的能力，大大增加程序的重用性和易维护性。在Java中是单继承的，也就是说一个子类只有一个父类。</p><p>3、多态是同一个行为具有多个不同表现形式的能力。在不修改程序代码的情况下改变程序运行时绑定的代码。实现多态的三要素：继承、重写、父类引用指向子类对象。</p><ul><li>静态多态性：通过重载实现，相同的方法有不同的參数列表，可以根据参数的不同，做出不同的处理。</li><li>动态多态性：在子类中重写父类的方法。运行期间判断所引用对象的实际类型，根据其实际类型调用相应的方法。</li></ul><p>4、抽象。把客观事物用代码抽象出来。</p><h2 id="8-面向对象编程的六大原则"><a href="#8-面向对象编程的六大原则" class="headerlink" title="8.面向对象编程的六大原则?"></a>8.面向对象编程的六大原则?</h2><ul><li><strong>对象单一职责</strong>：我们设计创建的对象，必须职责明确，比如商品类，里面相关的属性和方法都必须跟商品相关，不能出现订单等不相关的内容。这里的类可以是模块、类库、程序集，而不单单指类。</li><li><strong>里式替换原则</strong>：子类能够完全替代父类，反之则不行。通常用于实现接口时运用。因为子类能够完全替代基（父）类，那么这样父类就拥有很多子类，在后续的程序扩展中就很容易进行扩展，程序完全不需要进行修改即可进行扩展。比如IA的实现为A，因为项目需求变更，现在需要新的实现，直接在容器注入处更换接口即可.</li><li><strong>迪米特法则</strong>，也叫最小原则，或者说最小耦合。通常在设计程序或开发程序的时候，尽量要高内聚，低耦合。当两个类进行交互的时候，会产生依赖。而迪米特法则就是建议这种依赖越少越好。就像构造函数注入父类对象时一样，当需要依赖某个对象时，并不在意其内部是怎么实现的，而是在容器中注入相应的实现，既符合里式替换原则，又起到了解耦的作用。</li><li>开闭原则：开放扩展，封闭修改。当项目需求发生变更时，要尽可能的不去对原有的代码进行修改，而在原有的基础上进行扩展。</li><li><strong>依赖倒置原则</strong>：高层模块不应该直接依赖于底层模块的具体实现，而应该依赖于底层的抽象。接口和抽象类不应该依赖于实现类，而实现类依赖接口或抽象类。</li><li><strong>接口隔离原则</strong>：一个对象和另外一个对象交互的过程中，依赖的内容最小。也就是说在接口设计的时候，在遵循对象单一职责的情况下，尽量减少接口的内容。</li></ul><p><strong>简洁版</strong>：</p><ul><li>单一职责：对象设计要求独立，不能设计万能对象。</li><li>开闭原则：对象修改最小化。</li><li>里式替换：程序扩展中抽象被具体可以替换（接口、父类、可以被实现类对象、子类替换对象）</li><li>迪米特：高内聚，低耦合。尽量不要依赖细节。</li><li>依赖倒置：面向抽象编程。也就是参数传递，或者返回值，可以使用父类类型或者接口类型。从广义上讲：基于接口编程，提前设计好接口框架。</li><li>接口隔离：接口设计大小要适中。过大导致污染，过小，导致调用麻烦。</li></ul><h2 id="9-数组到底是不是对象？"><a href="#9-数组到底是不是对象？" class="headerlink" title="9.数组到底是不是对象？"></a>9.数组到底是不是对象？</h2><p>先说说对象的概念。对象是根据某个类创建出来的一个实例，表示某类事物中一个具体的个体。</p><p>对象具有各种属性，并且具有一些特定的行为。站在计算机的角度，对象就是内存中的一个内存块，在这个内存块封装了一些数据，也就是类中定义的各个属性。</p><p>所以，对象是用来封装数据的。</p><p>java中的数组具有java中其他对象的一些基本特点。比如封装了一些数据，可以访问属性，也可以调用方法。</p><p>因此，可以说，数组是对象。</p><p>也可以通过代码验证数组是对象的事实。比如以下的代码，输出结果为java.lang.Object。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clz</span> <span class="operator">=</span> <span class="type">int</span>[].class;</span><br><span class="line">System.out.println(clz.getSuperclass().getName());</span><br></pre></td></tr></table></figure><p>由此，可以看出，数组类的父类就是Object类，那么可以推断出数组就是对象。</p><h2 id="10-Java的基本数据类型有哪些？"><a href="#10-Java的基本数据类型有哪些？" class="headerlink" title="10.Java的基本数据类型有哪些？"></a>10.Java的基本数据类型有哪些？</h2><ul><li>byte，8bit</li><li>char，16bit</li><li>short，16bit</li><li>int，32bit</li><li>float，32bit</li><li>long，64bit</li><li>double，64bit</li><li>boolean，只有两个值：true、false，可以使⽤用 1 bit 来存储</li></ul><table><thead><tr><th>简单类型</th><th>boolean</th><th>byte</th><th>char</th><th>short</th><th>Int</th><th>long</th><th>float</th><th>double</th></tr></thead><tbody><tr><td>二进制位数</td><td>1</td><td>8</td><td>16</td><td>16</td><td>32</td><td>64</td><td>32</td><td>64</td></tr><tr><td>包装类</td><td>Boolean</td><td>Byte</td><td>Character</td><td>Short</td><td>Integer</td><td>Long</td><td>Float</td><td>Double</td></tr></tbody></table><p>在Java规范中，没有明确指出boolean的大小。在《Java虚拟机规范》给出了单个boolean占4个字节，和boolean数组1个字节的定义，具体 <strong>还要看虚拟机实现是否按照规范来</strong>，因此boolean占用1个字节或者4个字节都是有可能的。</p><h2 id="11-为什么不能用浮点型表示金额？"><a href="#11-为什么不能用浮点型表示金额？" class="headerlink" title="11.为什么不能用浮点型表示金额？"></a>11.为什么不能用浮点型表示金额？</h2><p>由于计算机中保存的小数其实是十进制的小数的近似值，并不是准确值，所以，千万不要在代码中使用浮点数来表示金额等重要的指标。</p><p>建议使用BigDecimal或者Long来表示金额。</p><h2 id="12-什么是值传递和引用传递？"><a href="#12-什么是值传递和引用传递？" class="headerlink" title="12.什么是值传递和引用传递？"></a>12.什么是值传递和引用传递？</h2><ul><li>值传递是对基本型变量而言的，传递的是该变量的一个副本，改变副本不影响原变量。</li><li>引用传递一般是对于对象型变量而言的，传递的是该对象地址的一个副本，并不是原对象本身，两者指向同一片内存空间。所以对引用对象进行操作会同时改变原对象。</li></ul><p><strong>java中不存在引用传递，只有值传递</strong>。即不存在变量a指向变量b，变量b指向对象的这种情况。</p><h2 id="13-了解Java的包装类型吗？为什么需要包装类？"><a href="#13-了解Java的包装类型吗？为什么需要包装类？" class="headerlink" title="13.了解Java的包装类型吗？为什么需要包装类？"></a>13.了解Java的包装类型吗？为什么需要包装类？</h2><p>Java 是一种面向对象语言，很多地方都需要使用对象而不是基本数据类型。比如，在集合类中，我们是无法将 int 、double 等类型放进去的。因为集合的容器要求元素是 Object 类型。</p><p>为了让基本类型也具有对象的特征，就出现了包装类型。相当于将基本类型包装起来，使得它具有了对象的性质，并且为其添加了属性和方法，丰富了基本类型的操作。</p><h2 id="14-自动装箱和拆箱"><a href="#14-自动装箱和拆箱" class="headerlink" title="14.自动装箱和拆箱"></a>14.自动装箱和拆箱</h2><p>Java中基础数据类型与它们对应的包装类见下表：</p><table><thead><tr><th align="left">原始类型</th><th align="left">包装类型</th></tr></thead><tbody><tr><td align="left">boolean</td><td align="left">Boolean</td></tr><tr><td align="left">byte</td><td align="left">Byte</td></tr><tr><td align="left">char</td><td align="left">Character</td></tr><tr><td align="left">float</td><td align="left">Float</td></tr><tr><td align="left">int</td><td align="left">Integer</td></tr><tr><td align="left">long</td><td align="left">Long</td></tr><tr><td align="left">short</td><td align="left">Short</td></tr><tr><td align="left">double</td><td align="left">Double</td></tr></tbody></table><p>装箱：将基础类型转化为包装类型。</p><p>拆箱：将包装类型转化为基础类型。</p><p>当基础类型与它们的包装类有如下几种情况时，编译器会<strong>自动</strong>帮我们进行装箱或拆箱：</p><ul><li>赋值操作（装箱或拆箱）</li><li>进行加减乘除混合运算 （拆箱）</li><li>进行&gt;,&lt;,&#x3D;&#x3D;比较运算（拆箱）</li><li>调用equals进行比较（装箱）</li><li>ArrayList、HashMap等集合类添加基础类型数据时（装箱）</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 装箱 调⽤ Integer.valueOf(1)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x; <span class="comment">// 拆箱 调⽤了 X.intValue()</span></span><br></pre></td></tr></table></figure><p>下面看一道常见的面试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">System.out.println(a == b);</span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">System.out.println(c == d);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>为什么第三个输出是false？看看 Integer 类的源码就知道啦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Integer c = 200;</code> 会调用 调⽤<code>Integer.valueOf(200)</code>。而从Integer的valueOf()源码可以看到，这里的实现并不是简单的new Integer，而是用IntegerCache做一个cache。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">integerCacheHighPropValue</span> <span class="operator">=</span></span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是IntegerCache静态代码块中的一段，默认Integer cache 的下限是-128，上限默认127。当赋值100给Integer时，刚好在这个范围内，所以从cache中取对应的Integer并返回，所以a和b返回的是同一个对象，所以<code>==</code>比较是相等的，当赋值200给Integer时，不在cache 的范围内，所以会new Integer并返回，当然<code>==</code>比较的结果是不相等的。</p><h2 id="15-String-为什么不可变？"><a href="#15-String-为什么不可变？" class="headerlink" title="15.String 为什么不可变？"></a>15.String 为什么不可变？</h2><p>先看看什么是不可变的对象。</p><p>如果一个对象，在它创建完成之后，不能再改变它的状态，那么这个对象就是不可变的。不能改变状态的意思是，不能改变对象内的成员变量，包括基本数据类型的值不能改变，引用类型的变量不能指向其他的对象，引用类型指向的对象的状态也不能改变。</p><p>接着来看Java8 String类的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码可以看出，String对象其实在内部就是一个个字符，存储在这个value数组里面的。</p><p>value数组用final修饰，final 修饰的变量，值不能被修改。因此value不可以指向其他对象。</p><p>String类内部所有的字段都是私有的，也就是被private修饰。而且String没有对外提供修改内部状态的方法，因此value数组不能改变。</p><p>所以，String是不可变的。</p><p>那为什么String要设计成不可变的？</p><p>主要有以下几点原因：</p><ol><li><strong>线程安全</strong>。同一个字符串实例可以被多个线程共享，因为字符串不可变，本身就是线程安全的。</li><li><strong>支持hash映射和缓存</strong>。因为String的hash值经常会使用到，比如作为 Map 的键，不可变的特性使得 hash 值也不会变，不需要重新计算。</li><li><strong>出于安全考虑</strong>。网络地址URL、文件路径path、密码通常情况下都是以String类型保存，假若String不是固定不变的，将会引起各种安全隐患。比如将密码用String的类型保存，那么它将一直留在内存中，直到垃圾收集器把它清除。假如String类不是固定不变的，那么这个密码可能会被改变，导致出现安全隐患。</li><li><strong>字符串常量池优化</strong>。String对象创建之后，会缓存到字符串常量池中，下次需要创建同样的对象时，可以直接返回缓存的引用。</li></ol><p>既然我们的String是不可变的，它内部还有很多substring， replace， replaceAll这些操作的方法。这些方法好像会改变String对象？怎么解释呢？</p><p>其实不是的，我们每次调用replace等方法，其实会在堆内存中创建了一个新的对象。然后其value数组引用指向不同的对象。</p><h2 id="16-为何JDK9要将String的底层实现由char-改成byte"><a href="#16-为何JDK9要将String的底层实现由char-改成byte" class="headerlink" title="16.为何JDK9要将String的底层实现由char[]改成byte[]?"></a>16.为何JDK9要将String的底层实现由char[]改成byte[]?</h2><p>主要是为了<strong>节约String占用的内存</strong>。</p><p>在大部分Java程序的堆内存中，String占用的空间最大，并且绝大多数String只有Latin-1字符，这些Latin-1字符只需要1个字节就够了。</p><p>而在JDK9之前，JVM因为String使用char数组存储，每个char占2个字节，所以即使字符串只需要1字节，它也要按照2字节进行分配，浪费了一半的内存空间。</p><p>到了JDK9之后，对于每个字符串，会先判断它是不是只有Latin-1字符，如果是，就按照1字节的规格进行分配内存，如果不是，就按照2字节的规格进行分配，这样便提高了内存使用率，同时GC次数也会减少，提升效率。</p><p>不过Latin-1编码集支持的字符有限，比如不支持中文字符，因此对于中文字符串，用的是UTF16编码（两个字节），所以用byte[]和char[]实现没什么区别。</p><h2 id="17-String-StringBuffer-和-StringBuilder区别"><a href="#17-String-StringBuffer-和-StringBuilder区别" class="headerlink" title="17.String, StringBuffer 和 StringBuilder区别"></a>17.String, StringBuffer 和 StringBuilder区别</h2><p><strong>1. 可变性</strong></p><ul><li>String 不可变</li><li>StringBuffer 和 StringBuilder 可变</li></ul><p><strong>2. 线程安全</strong></p><ul><li>String 不可变，因此是线程安全的</li><li>StringBuilder 不是线程安全的</li><li>StringBuffer 是线程安全的，内部使用 synchronized 进行同步</li></ul><h2 id="18-什么是StringJoiner？"><a href="#18-什么是StringJoiner？" class="headerlink" title="18.什么是StringJoiner？"></a>18.什么是StringJoiner？</h2><p>StringJoiner是 Java 8 新增的一个 API，它基于 StringBuilder 实现，用于实现对字符串之间通过分隔符拼接的场景。</p><p>StringJoiner 有两个构造方法，第一个构造要求依次传入分隔符、前缀和后缀。第二个构造则只要求传入分隔符即可（前缀和后缀默认为空字符串）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringJoiner(CharSequence delimiter, CharSequence prefix, CharSequence suffix)</span><br><span class="line">StringJoiner(CharSequence delimiter)</span><br></pre></td></tr></table></figure><p>有些字符串拼接场景，使用 StringBuffer 或 StringBuilder 则显得比较繁琐。</p><p>比如下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; values = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.size(); i++) &#123;</span><br><span class="line">sb.append(values.get(i));</span><br><span class="line"><span class="keyword">if</span> (i != values.size() -<span class="number">1</span>) &#123;</span><br><span class="line">sb.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">&quot;)&quot;</span>);</span><br></pre></td></tr></table></figure><p>而通过StringJoiner来实现拼接List的各个元素，代码看起来更加简洁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; values = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Integer value : values) &#123;</span><br><span class="line">sj.add(value.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，像平时经常使用的Collectors.joining(“,”)，底层就是通过StringJoiner实现的。</p><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Collector&lt;CharSequence, ?, String&gt; joining(</span><br><span class="line">    CharSequence delimiter,CharSequence prefix,CharSequence suffix) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CollectorImpl</span>&lt;&gt;(</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(delimiter, prefix, suffix),</span><br><span class="line">            StringJoiner::add, StringJoiner::merge,</span><br><span class="line">            StringJoiner::toString, CH_NOID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19-String-类的常用方法有哪些？"><a href="#19-String-类的常用方法有哪些？" class="headerlink" title="19.String 类的常用方法有哪些？"></a>19.String 类的常用方法有哪些？</h2><ul><li>indexOf()：返回指定字符的索引。</li><li>charAt()：返回指定索引处的字符。</li><li>replace()：字符串替换。</li><li>trim()：去除字符串两端空白。</li><li>split()：分割字符串，返回一个分割后的字符串数组。</li><li>getBytes()：返回字符串的 byte 类型数组。</li><li>length()：返回字符串长度。</li><li>toLowerCase()：将字符串转成小写字母。</li><li>toUpperCase()：将字符串转成大写字符。</li><li>substring()：截取字符串。</li><li>equals()：字符串比较。</li></ul><h2 id="20-new-String-“dabin”-会创建几个对象？"><a href="#20-new-String-“dabin”-会创建几个对象？" class="headerlink" title="20.new String(“dabin”)会创建几个对象？"></a>20.new String(“dabin”)会创建几个对象？</h2><p>使用这种方式会创建两个字符串对象（前提是字符串常量池中没有 “dabin” 这个字符串对象）。</p><ul><li>“dabin” 属于字符串字面量，因此编译时期会在字符串常量池中创建一个字符串对象，指向这个 “dabin” 字符串字面量；</li><li>使用 new 的方式会在堆中创建一个字符串对象。</li></ul><h2 id="21-什么是字符串常量池？"><a href="#21-什么是字符串常量池？" class="headerlink" title="21.什么是字符串常量池？"></a>21.什么是字符串常量池？</h2><p>字符串常量池（String Pool）保存着所有字符串字面量，这些字面量在编译时期就确定。字符串常量池位于堆内存中，专门用来存储字符串常量。在创建字符串时，JVM首先会检查字符串常量池，如果该字符串已经存在池中，则返回其引用，如果不存在，则创建此字符串并放入池中，并返回其引用。</p><h2 id="22-String最大长度是多少？"><a href="#22-String最大长度是多少？" class="headerlink" title="22.String最大长度是多少？"></a>22.String最大长度是多少？</h2><p>String类提供了一个length方法，返回值为int类型，而int的取值上限为2^31 -1。</p><p>所以理论上String的最大长度为2^31 -1。</p><p><strong>达到这个长度的话需要多大的内存吗</strong>？</p><p>String内部是使用一个char数组来维护字符序列的，一个char占用两个字节。如果说String最大长度是2^31 -1的话，那么最大的字符串占用内存空间约等于4GB。</p><p>也就是说，我们需要有大于4GB的JVM运行内存才行。</p><p><strong>那String一般都存储在JVM的哪块区域呢</strong>？</p><p>字符串在JVM中的存储分两种情况，一种是String对象，存储在JVM的堆栈中。一种是字符串常量，存储在常量池里面。</p><p><strong>什么情况下字符串会存储在常量池呢</strong>？</p><p>当通过字面量进行字符串声明时，比如String s &#x3D; “茶白”;，这个字符串在编译之后会以常量的形式进入到常量池。</p><p><strong>那常量池中的字符串最大长度是2^31-1吗</strong>？</p><p>不是的，常量池对String的长度是有另外限制的。。Java中的UTF-8编码的Unicode字符串在常量池中以CONSTANT_Utf8类型表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONSTANT_Utf8_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 length;</span><br><span class="line">    u1 bytes[length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>length在这里就是代表字符串的长度，length的类型是u2，u2是无符号的16位整数，也就是说最大长度可以做到2^16-1 即 65535。</p><p>不过javac编译器做了限制，需要length &lt; 65535。所以字符串常量在常量池中的最大长度是65535 - 1 &#x3D; 65534。</p><p>最后总结一下：</p><p>String在不同的状态下，具有不同的长度限制。</p><ul><li>字符串常量长度不能超过65534</li><li>堆内字符串的长度不超过2^31-1</li></ul><h2 id="23-Object常用方法有哪些？"><a href="#23-Object常用方法有哪些？" class="headerlink" title="23.Object常用方法有哪些？"></a>23.Object常用方法有哪些？</h2><p>Java面试经常会出现的一道题目，Object的常用方法。下面给大家整理一下。</p><p>Object常用方法有：<code>toString()</code>、<code>equals()</code>、<code>hashCode()</code>、<code>clone()</code>等。</p><p><strong>toString</strong></p><p>默认输出对象地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="string">&quot;茶白&quot;</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//output</span></span><br><span class="line">    <span class="comment">//me.tyson.java.core.Person@4554617c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以重写toString方法，按照重写逻辑输出对象值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;:&quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="string">&quot;茶白&quot;</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//output</span></span><br><span class="line">    <span class="comment">//茶白:18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>equals</strong></p><p>默认比较两个引用变量是否指向同一个对象（内存地址）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.age = age;</span><br><span class="line">       <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;茶白&quot;</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, name);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, name);</span><br><span class="line"></span><br><span class="line">        System.out.println(p1.equals(p2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//output</span></span><br><span class="line">    <span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以重写equals方法，按照age和name是否相等来判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">            <span class="keyword">return</span> age == p.age &amp;&amp; name.equals(p.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;茶白&quot;</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, name);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, name);</span><br><span class="line"></span><br><span class="line">        System.out.println(p1.equals(p2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//output</span></span><br><span class="line">    <span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>hashCode</strong></p><p>将与对象相关的信息映射成一个哈希值，默认的实现hashCode值是根据内存地址换算出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Cat</span>().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//out</span></span><br><span class="line">    <span class="comment">//1349277854</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>clone</strong></p><p>Java赋值是复制对象引用，如果我们想要得到一个对象的副本，使用赋值操作是无法达到目的的。Object对象有个clone()方法，实现了对</p><p>象中各个属性的复制，但它的可见范围是protected的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException;</span><br></pre></td></tr></table></figure><p>所以实体类使用克隆的前提是：</p><ul><li>实现Cloneable接口，这是一个标记接口，自身没有方法，这应该是一种约定。调用clone方法时，会判断有没有实现Cloneable接口，没有实现Cloneable的话会抛异常CloneNotSupportedException。</li><li>覆盖clone()方法，可见性提升为public。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        c.name = <span class="string">&quot;茶白&quot;</span>;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cloneCat</span> <span class="operator">=</span> (Cat) c.clone();</span><br><span class="line">        c.name = <span class="string">&quot;茶白&quot;</span>;</span><br><span class="line">        System.out.println(cloneCat.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//output</span></span><br><span class="line">    <span class="comment">//茶白</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>getClass</strong></p><p>返回此 Object 的运行时类，常用于java反射机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;茶白&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clz</span> <span class="operator">=</span> p.getClass();</span><br><span class="line">        System.out.println(clz);</span><br><span class="line">        <span class="comment">//获取类名</span></span><br><span class="line">        System.out.println(clz.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * class com.tyson.basic.Person</span></span><br><span class="line"><span class="comment">     * com.tyson.basic.Person</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>wait</strong></p><p>当前线程调用对象的wait()方法之后，当前线程会释放对象锁，进入等待状态。等待其他线程调用此对象的notify()&#x2F;notifyAll()唤醒或者等待超时时间wait(long timeout)自动唤醒。线程需要获取obj对象锁之后才能调用 obj.wait()。</p><p><strong>notify</strong></p><p>obj.notify()唤醒在此对象上等待的单个线程，选择是任意性的。notifyAll()唤醒在此对象上等待的所有线程。</p><h2 id="24-讲讲深拷贝和浅拷贝？"><a href="#24-讲讲深拷贝和浅拷贝？" class="headerlink" title="24.讲讲深拷贝和浅拷贝？"></a>24.讲讲深拷贝和浅拷贝？</h2><p><strong>浅拷贝</strong>：拷⻉对象和原始对象的引⽤类型引用同⼀个对象。</p><p>以下例子，Cat对象里面有个Person对象，调用clone之后，克隆对象和原对象的Person引用的是同一个对象，这就是浅拷贝。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Person owner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="string">&quot;茶白&quot;</span>);</span><br><span class="line">        c.owner = p;</span><br><span class="line"></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cloneCat</span> <span class="operator">=</span> (Cat) c.clone();</span><br><span class="line">        p.setName(<span class="string">&quot;茶白&quot;</span>);</span><br><span class="line">        System.out.println(cloneCat.owner.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//output</span></span><br><span class="line">    <span class="comment">//茶白</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>深拷贝</strong>：拷贝对象和原始对象的引用类型引用不同的对象。</p><p>以下例子，在clone函数中不仅调用了super.clone，而且调用Person对象的clone方法（Person也要实现Cloneable接口并重写clone方法），从而实现了深拷贝。可以看到，拷贝对象的值不会受到原对象的影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Person owner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        c = (Cat) <span class="built_in">super</span>.clone();</span><br><span class="line">        c.owner = (Person) owner.clone();<span class="comment">//拷贝Person对象</span></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="string">&quot;茶白&quot;</span>);</span><br><span class="line">        c.owner = p;</span><br><span class="line"></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cloneCat</span> <span class="operator">=</span> (Cat) c.clone();</span><br><span class="line">        p.setName(<span class="string">&quot;茶白&quot;</span>);</span><br><span class="line">        System.out.println(cloneCat.owner.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//output</span></span><br><span class="line">    <span class="comment">//茶白</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="25-两个对象的hashCode-相同，则-equals-是否也一定为-true？"><a href="#25-两个对象的hashCode-相同，则-equals-是否也一定为-true？" class="headerlink" title="25.两个对象的hashCode()相同，则 equals()是否也一定为 true？"></a>25.两个对象的hashCode()相同，则 equals()是否也一定为 true？</h2><p>equals与hashcode的关系：</p><ol><li>如果两个对象调用equals比较返回true，那么它们的hashCode值一定要相同；</li><li>如果两个对象的hashCode相同，它们并不一定相同。</li></ol><p>hashcode方法主要是用来<strong>提升对象比较的效率</strong>，先进行hashcode()的比较，如果不相同，那就不必在进行equals的比较，这样就大大减少了equals比较的次数，当比较对象的数量很大的时候能提升效率。</p><h2 id="26-为什么重写-equals-时一定要重写-hashCode？"><a href="#26-为什么重写-equals-时一定要重写-hashCode？" class="headerlink" title="26.为什么重写 equals 时一定要重写 hashCode？"></a>26.为什么重写 equals 时一定要重写 hashCode？</h2><p>之所以重写<code>equals()</code>要重写<code>hashcode()</code>，是为了保证<code>equals()</code>方法返回true的情况下hashcode值也要一致，如果重写了<code>equals()</code>没有重写<code>hashcode()</code>，就会出现两个对象相等但<code>hashcode()</code>不相等的情况。这样，当用其中的一个对象作为键保存到hashMap、hashTable或hashSet中，再以另一个对象作为键值去查找他们的时候，则会查找不到。</p><h2 id="27-Java创建对象有几种方式？"><a href="#27-Java创建对象有几种方式？" class="headerlink" title="27.Java创建对象有几种方式？"></a>27.Java创建对象有几种方式？</h2><p>Java创建对象有以下几种方式：</p><ul><li>用new语句创建对象。</li><li>使用反射，使用Class.newInstance()创建对象。</li><li>调用对象的clone()方法。</li><li>运用反序列化手段，调用java.io.ObjectInputStream对象的readObject()方法。</li></ul><h2 id="28-说说类实例化的顺序"><a href="#28-说说类实例化的顺序" class="headerlink" title="28.说说类实例化的顺序"></a>28.说说类实例化的顺序</h2><p>Java中类实例化顺序：</p><ol><li>静态属性，静态代码块。</li><li>普通属性，普通代码块。</li><li>构造方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycle</span> &#123;</span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">staticField</span> <span class="operator">=</span> getStaticField();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(staticField);</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">field</span> <span class="operator">=</span> getField();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(field);</span><br><span class="line">        System.out.println(<span class="string">&quot;普通代码块初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LifeCycle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getStaticField</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">statiFiled</span> <span class="operator">=</span> <span class="string">&quot;静态属性初始化&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> statiFiled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getField</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filed</span> <span class="operator">=</span> <span class="string">&quot;普通属性初始化&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> filed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argc)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LifeCycle</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *      静态属性初始化</span></span><br><span class="line"><span class="comment">     *      静态代码块初始化</span></span><br><span class="line"><span class="comment">     *      普通属性初始化</span></span><br><span class="line"><span class="comment">     *      普通代码块初始化</span></span><br><span class="line"><span class="comment">     *      构造方法初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="29-equals和-有什么区别？"><a href="#29-equals和-有什么区别？" class="headerlink" title="29.equals和&#x3D;&#x3D;有什么区别？"></a>29.equals和&#x3D;&#x3D;有什么区别？</h2><ul><li>对于基本数据类型，&#x3D;&#x3D;比较的是他们的值。基本数据类型没有equal方法；</li><li>对于复合数据类型，&#x3D;&#x3D;比较的是它们的存放地址(是否是同一个对象)。<code>equals()</code>默认比较地址值，重写的话按照重写逻辑去比较。</li></ul><h2 id="30-常见的关键字有哪些？"><a href="#30-常见的关键字有哪些？" class="headerlink" title="30.常见的关键字有哪些？"></a>30.常见的关键字有哪些？</h2><p><strong>static</strong></p><p>static可以用来修饰类的成员方法、类的成员变量。</p><p>static变量也称作<strong>静态变量</strong>，静态变量和非静态变量的区别是：静态变量被所有的对象所共享，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化。而非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。</p><p>以下例子，age为非静态变量，则p1打印结果是：<code>Name:zhangsan, Age:10</code>；若age使用static修饰，则p1打印结果是：<code>Name:zhangsan, Age:12</code>，因为static变量在内存只有一个副本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Name:&quot;</span> + name + <span class="string">&quot;, Age:&quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p1.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">        p1.age = <span class="number">10</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p2.name = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">        p2.age = <span class="number">12</span>;</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**Output</span></span><br><span class="line"><span class="comment">     * Name:zhangsan, Age:10</span></span><br><span class="line"><span class="comment">     * Name:lisi, Age:12</span></span><br><span class="line"><span class="comment">     */</span><span class="comment">//~</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>static方法一般称作<strong>静态方法</strong>。静态方法不依赖于任何对象就可以进行访问，通过类名即可调用静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world: &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Utils.print(<span class="string">&quot;茶白&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态代码块</strong>只会在类加载的时候执行一次。以下例子，startDate和endDate在类加载的时候进行赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>  &#123;</span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Date startDate, endDate;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        startDate = Date.valueOf(<span class="string">&quot;2008&quot;</span>);</span><br><span class="line">        endDate = Date.valueOf(<span class="string">&quot;2021&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(Date birthDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthDate = birthDate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态内部类</strong></p><p><strong>在静态方法里</strong>，使用⾮静态内部类依赖于外部类的实例，也就是说需要先创建外部类实例，才能用这个实例去创建非静态内部类。⽽静态内部类不需要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClass</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 在静态方法里，不能直接使用OuterClass.this去创建InnerClass的实例</span></span><br><span class="line">        <span class="comment">// 需要先创建OuterClass的实例o，然后通过o创建InnerClass的实例</span></span><br><span class="line">        <span class="comment">// InnerClass innerClass = new InnerClass();</span></span><br><span class="line">        <span class="type">OuterClass</span> <span class="variable">outerClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">        <span class="type">InnerClass</span> <span class="variable">innerClass</span> <span class="operator">=</span> outerClass.<span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br><span class="line">        <span class="type">StaticInnerClass</span> <span class="variable">staticInnerClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticInnerClass</span>();</span><br><span class="line"></span><br><span class="line">        outerClass.test();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nonStaticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">InnerClass</span> <span class="variable">innerClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;nonStaticMethod...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>final</strong></p><ol><li><strong>基本数据</strong>类型用final修饰，则不能修改，是常量；<strong>对象引用</strong>用final修饰，则引用只能指向该对象，不能指向别的对象，但是对象本身可以修改。</li><li>final修饰的方法不能被子类重写</li><li>final修饰的类不能被继承。</li></ol><p><strong>this</strong></p><p><code>this.属性名称</code>指访问类中的成员变量，可以用来区分成员变量和局部变量。如下代码所示，<code>this.name</code>访问类Person当前实例的变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 茶白</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2021-08-17 00:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>this.方法名称</code>用来访问本类的方法。以下代码中，<code>this.born()</code>调用类 Person 的当前实例的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 茶白</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2021-08-17 00:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.born();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">born</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>super</strong></p><p>super 关键字用于在子类中访问父类的变量和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;茶白&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类:&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name);</span><br><span class="line">        <span class="built_in">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.getName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 茶白</span></span><br><span class="line"><span class="comment">     * 父类:茶白</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在子类B中，我们重写了父类的<code>getName()</code>方法，如果在重写的<code>getName()</code>方法中我们要调用父类的相同方法，必须要通过super关键字显式指出。</p><h2 id="31-final-finally-finalize-的区别"><a href="#31-final-finally-finalize-的区别" class="headerlink" title="31.final, finally, finalize 的区别"></a>31.final, finally, finalize 的区别</h2><ul><li>final 用于修饰属性、方法和类, 分别表示属性不能被重新赋值，方法不可被覆盖，类不可被继承。</li><li>finally 是异常处理语句结构的一部分，一般以<code>try-catch-finally</code>出现，<code>finally</code>代码块表示总是被执行。</li><li>finalize 是Object类的一个方法，该方法一般由垃圾回收器来调用，当我们调用<code>System.gc()</code>方法的时候，由垃圾回收器调用<code>finalize()</code>方法，回收垃圾，JVM并不保证此方法总被调用。</li></ul><h2 id="32-final关键字的作用？"><a href="#32-final关键字的作用？" class="headerlink" title="32.final关键字的作用？"></a>32.final关键字的作用？</h2><ul><li>final 修饰的类不能被继承。</li><li>final 修饰的方法不能被重写。</li><li>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</li></ul><h2 id="33-方法重载和重写的区别？"><a href="#33-方法重载和重写的区别？" class="headerlink" title="33.方法重载和重写的区别？"></a>33.方法重载和重写的区别？</h2><p><strong>同个类中的多个方法可以有相同的方法名称，但是有不同的参数列表，这就称为方法重载</strong>。参数列表又叫参数签名，包括参数的类型、参数的个数、参数的顺序，只要有一个不同就叫做参数列表不同。</p><p>重载是面向对象的一个基本特性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverrideTest</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setPerson</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setPerson</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">//set name</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setPerson</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">//set name and age</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法的重写描述的是父类和子类之间的。当父类的功能无法满足子类的需求，可以在子类对方法进行重写</strong>。方法重写时， 方法名与形参列表必须一致。</p><p>如下代码，Person为父类，Student为子类，在Student中重写了dailyTask方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dailyTask</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;work eat sleep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dailyTask</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;study eat sleep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="34-接口与抽象类区别？"><a href="#34-接口与抽象类区别？" class="headerlink" title="34.接口与抽象类区别？"></a>34.接口与抽象类区别？</h2><p>1、<strong>语法层面</strong>上的区别</p><ul><li>抽象类可以有方法实现，而接口的方法中只能是抽象方法（Java 8 之后接口方法可以有默认实现）；</li><li>抽象类中的成员变量可以是各种类型的，接口中的成员变量只能是public static final类型；</li><li>接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法（Java 8之后接口可以有静态方法）；</li><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ul><p>2、<strong>设计层面</strong>上的区别</p><ul><li>抽象层次不同。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口只是对类行为进行抽象。继承抽象类是一种”是不是”的关系，而接口实现则是 “有没有”的关系。如果一个类继承了某个抽象类，则子类必定是抽象类的种类，而接口实现则是具备不具备的关系，比如鸟是否能飞。</li><li>继承抽象类的是具有相似特点的类，而实现接口的却可以不同的类。</li></ul><p>门和警报的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AlarmDoor</span> <span class="keyword">extends</span> <span class="title class_">Door</span> <span class="keyword">implements</span> <span class="title class_">Alarm</span> &#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMWCar</span> <span class="keyword">extends</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Alarm</span> &#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="35-常见的Exception有哪些？"><a href="#35-常见的Exception有哪些？" class="headerlink" title="35.常见的Exception有哪些？"></a>35.常见的Exception有哪些？</h2><p>常见的RuntimeException：</p><ol><li><code>ClassCastException</code> &#x2F;&#x2F;类型转换异常</li><li><code>IndexOutOfBoundsException</code> &#x2F;&#x2F;数组越界异常</li><li><code>NullPointerException</code> &#x2F;&#x2F;空指针</li><li><code>ArrayStoreException</code> &#x2F;&#x2F;数组存储异常</li><li><code>NumberFormatException</code> &#x2F;&#x2F;数字格式化异常</li><li><code>ArithmeticException</code> &#x2F;&#x2F;数学运算异常</li></ol><p>checked Exception：</p><ol><li><code>NoSuchFieldException</code> &#x2F;&#x2F;反射异常，没有对应的字段</li><li><code>ClassNotFoundException</code> &#x2F;&#x2F;类没有找到异常</li><li><code>IllegalAccessException</code> &#x2F;&#x2F;安全权限异常，可能是反射时调用了private方法</li></ol><h2 id="36-Error和Exception的区别？"><a href="#36-Error和Exception的区别？" class="headerlink" title="36.Error和Exception的区别？"></a>36.Error和Exception的区别？</h2><p><strong>Error</strong>：JVM 无法解决的严重问题，如栈溢出<code>StackOverflowError</code>、内存溢出<code>OOM</code>等。程序无法处理的错误。</p><p><strong>Exception</strong>：其它因编程错误或偶然的外在因素导致的一般性问题。可以在代码中进行处理。如：空指针异常、数组下标越界等。</p><h2 id="37-运行时异常和非运行时异常（checked）的区别？"><a href="#37-运行时异常和非运行时异常（checked）的区别？" class="headerlink" title="37.运行时异常和非运行时异常（checked）的区别？"></a>37.运行时异常和非运行时异常（checked）的区别？</h2><p><code>unchecked exception</code>包括<code>RuntimeException</code>和<code>Error</code>类，其他所有异常称为检查（checked）异常。</p><ol><li><code>RuntimeException</code>由程序错误导致，应该修正程序避免这类异常发生。</li><li><code>checked Exception</code>由具体的环境（读取的文件不存在或文件为空或sql异常）导致的异常。必须进行处理，不然编译不通过，可以catch或者throws。</li></ol><h2 id="38-throw和throws的区别？"><a href="#38-throw和throws的区别？" class="headerlink" title="38.throw和throws的区别？"></a>38.throw和throws的区别？</h2><ul><li><strong>throw</strong>：用于抛出一个具体的异常对象。</li><li><strong>throws</strong>：用在方法签名中，用于声明该方法可能抛出的异常。子类方法抛出的异常范围更加小，或者根本不抛异常。</li></ul><h2 id="39-通过故事讲清楚NIO"><a href="#39-通过故事讲清楚NIO" class="headerlink" title="39.通过故事讲清楚NIO"></a>39.通过故事讲清楚NIO</h2><p>下面通过一个例子来讲解下。</p><p>假设某银行只有10个职员。该银行的业务流程分为以下4个步骤：</p><p>1） 顾客填申请表（5分钟）；</p><p>2） 职员审核（1分钟）；</p><p>3） 职员叫保安去金库取钱（3分钟）；</p><p>4） 职员打印票据，并将钱和票据返回给顾客（1分钟）。</p><p>下面我们看看银行不同的工作方式对其工作效率到底有何影响。</p><p>首先是BIO方式。</p><p>每来一个顾客，马上由一位职员来接待处理，并且这个职员需要负责以上4个完整流程。当超过10个顾客时，剩余的顾客需要排队等候。</p><p>一个职员处理一个顾客需要10分钟（5+1+3+1）时间。一个小时（60分钟）能处理6个顾客，一共10个职员，那就是只能处理60个顾客。</p><p>可以看到银行职员的工作状态并不饱和，比如在第1步，其实是处于等待中。</p><p>这种工作其实就是BIO，每次来一个请求（顾客），就分配到线程池中由一个线程（职员）处理，如果超出了线程池的最大上限（10个），就扔到队列等待 。</p><p>那么如何提高银行的吞吐量呢？</p><p>思路就是：<strong>分而治之</strong>，将任务拆分开来，由专门的人负责专门的任务。</p><p>具体来讲，银行专门指派一名职员A，A的工作就是每当有顾客到银行，他就递上表格让顾客填写。每当有顾客填好表后，A就将其随机指派给剩余的9名职员完成后续步骤。</p><p>这种方式下，假设顾客非常多，职员A的工作处于饱和中，他不断的将填好表的顾客带到柜台处理。</p><p>柜台一个职员5分钟能处理完一个顾客，一个小时9名职员能处理：9*（60&#x2F;5）&#x3D;108。</p><p>可见工作方式的转变能带来效率的极大提升。</p><p>这种工作方式其实就NIO的思路。</p><p>下图是非常经典的NIO说明图，<code>mainReactor</code>线程负责监听server socket，接收新连接，并将建立的socket分派给<code>subReactor</code></p><p><code>subReactor</code>可以是一个线程，也可以是线程池，负责多路分离已连接的socket，读写网络数据。这里的读写网络数据可类比顾客填表这一耗时动作，对具体的业务处理功能，其扔给worker线程池完成</p><p>可以看到典型NIO有三类线程，分别是<code>mainReactor</code>线程、<code>subReactor</code>线程、<code>work</code>线程。</p><p>不同的线程干专业的事情，最终每个线程都没空着，系统的吞吐量自然就上去了。</p><p><img src="/../UpPictures/Java%E5%85%AB%E8%82%A1%E6%96%87Pictures/20220423154450.png" alt="img"></p><p><strong>那这个流程还有没有什么可以提高的地方呢？</strong></p><p>可以看到，在这个业务流程里边第3个步骤，职员叫保安去金库取钱（3分钟）。这3分钟柜台职员是在等待中度过的，可以把这3分钟利用起来。</p><p>还是分而治之的思路，指派1个职员B来专门负责第3步骤。</p><p>每当柜台员工完成第2步时，就通知职员B来负责与保安沟通取钱。这时候柜台员工可以继续处理下一个顾客。</p><p>当职员B拿到钱之后，通知顾客钱已经到柜台了，让顾客重新排队处理，当柜台职员再次服务该顾客时，发现该顾客前3步已经完成，直接执行第4步即可。</p><p>在当今web服务中，经常需要通过RPC或者Http等方式调用第三方服务，这里对应的就是第3步，如果这步耗时较长，通过异步方式将能极大降低资源使用率。</p><p>NIO+异步的方式能让少量的线程做大量的事情。这适用于很多应用场景，比如代理服务、api服务、长连接服务等等。这些应用如果用同步方式将耗费大量机器资源。</p><p>不过虽然NIO+异步能提高系统吞吐量，但其并不能让一个请求的等待时间下降，相反可能会增加等待时间。</p><p>最后，NIO基本思想总结起来就是：<strong>分而治之，将任务拆分开来，由专门的人负责专门的任务</strong></p><h2 id="40-BIO-NIO-AIO区别的区别？"><a href="#40-BIO-NIO-AIO区别的区别？" class="headerlink" title="40.BIO&#x2F;NIO&#x2F;AIO区别的区别？"></a>40.BIO&#x2F;NIO&#x2F;AIO区别的区别？</h2><p><strong>同步阻塞IO</strong> : 用户进程发起一个IO操作以后，必须等待IO操作的真正完成后，才能继续运行。</p><p><strong>同步非阻塞IO</strong>: 客户端与服务器通过Channel连接，采用多路复用器轮询注册的<code>Channel</code>。提高吞吐量和可靠性。用户进程发起一个IO操作以后，可做其它事情，但用户进程需要轮询IO操作是否完成，这样造成不必要的CPU资源浪费。</p><p><strong>异步非阻塞IO</strong>: 非阻塞异步通信模式，NIO的升级版，采用异步通道实现异步通信，其read和write方法均是异步方法。用户进程发起一个IO操作，然后立即返回，等IO操作真正的完成以后，应用程序会得到IO操作完成的通知。类似Future模式。</p><h2 id="41-守护线程是什么？"><a href="#41-守护线程是什么？" class="headerlink" title="41.守护线程是什么？"></a>41.守护线程是什么？</h2><ul><li>守护线程是运行在后台的一种特殊进程。</li><li>它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。</li><li>在 Java 中垃圾回收线程就是特殊的守护线程。</li></ul><h2 id="42-Java支持多继承吗？"><a href="#42-Java支持多继承吗？" class="headerlink" title="42.Java支持多继承吗？"></a>42.Java支持多继承吗？</h2><p>java中，<strong>类不支持</strong>多继承。<strong>接口才支持</strong>多继承。接口的作用是拓展对象功能。当一个子接口继承了多个父接口时，说明子接口拓展了多个功能。当一个类实现该接口时，就拓展了多个的功能。</p><p>Java不支持多继承的原因：</p><ul><li>出于安全性的考虑，如果子类继承的多个父类里面有相同的方法或者属性，子类将不知道具体要继承哪个。</li><li>Java提供了接口和内部类以达到实现多继承功能，弥补单继承的缺陷。</li></ul><h2 id="43-如何实现对象克隆？"><a href="#43-如何实现对象克隆？" class="headerlink" title="43.如何实现对象克隆？"></a>43.如何实现对象克隆？</h2><ul><li>实现<code>Cloneable</code>接口，重写 <code>clone()</code> 方法。这种方式是浅拷贝，即如果类中属性有自定义引用类型，只拷贝引用，不拷贝引用指向的对象。如果对象的属性的Class也实现 <code>Cloneable</code> 接口，那么在克隆对象时也会克隆属性，即深拷贝。</li><li>结合序列化，深拷贝。</li><li>通过<code>org.apache.commons</code>中的工具类<code>BeanUtils</code>和<code>PropertyUtils</code>进行对象复制。</li></ul><h2 id="44-同步和异步的区别？"><a href="#44-同步和异步的区别？" class="headerlink" title="44.同步和异步的区别？"></a>44.同步和异步的区别？</h2><p>同步：发出一个调用时，在没有得到结果之前，该调用就不返回。</p><p>异步：在调用发出后，被调用者返回结果之后会通知调用者，或通过回调函数处理这个调用。</p><h2 id="45-阻塞和非阻塞的区别？"><a href="#45-阻塞和非阻塞的区别？" class="headerlink" title="45.阻塞和非阻塞的区别？"></a>45.阻塞和非阻塞的区别？</h2><p>阻塞和非阻塞关注的是线程的状态。</p><p>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会恢复运行。</p><p>非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p><blockquote><p>举个例子，理解下同步、阻塞、异步、非阻塞的区别：</p><p>同步就是烧开水，要自己来看开没开；异步就是水开了，然后水壶响了通知你水开了（回调通知）。阻塞是烧开水的过程中，你不能干其他事情，必须在旁边等着；非阻塞是烧开水的过程里可以干其他事情。</p></blockquote><h2 id="46-Java8的新特性有哪些？"><a href="#46-Java8的新特性有哪些？" class="headerlink" title="46.Java8的新特性有哪些？"></a>46.Java8的新特性有哪些？</h2><ul><li>Lambda 表达式：Lambda允许把函数作为一个方法的参数</li><li>Stream API ：新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中</li><li>默认方法：默认方法就是一个在接口里面有了一个实现的方法。</li><li>Optional 类 ：Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。</li><li>Date Time API ：加强对日期与时间的处理。</li></ul><blockquote><p><a href="https://github.com/Tyson0314/Java-learning/blob/master/Java/Java8%E6%96%B0%E7%89%B9%E6%80%A7.md">Java8 新特性总结</a></p></blockquote><h2 id="47-序列化和反序列化"><a href="#47-序列化和反序列化" class="headerlink" title="47.序列化和反序列化"></a>47.序列化和反序列化</h2><ul><li>序列化：把对象转换为字节序列的过程称为对象的序列化.</li><li>反序列化：把字节序列恢复为对象的过程称为对象的反序列化.</li></ul><h2 id="48-什么时候需要用到序列化和反序列化呢"><a href="#48-什么时候需要用到序列化和反序列化呢" class="headerlink" title="48.什么时候需要用到序列化和反序列化呢?"></a>48.什么时候需要用到序列化和反序列化呢?</h2><p>当我们只在本地 JVM 里运行下 Java 实例，这个时候是不需要什么序列化和反序列化的，但当我们需要将内存中的对象持久化到磁盘，数据库中时，当我们需要与浏览器进行交互时，当我们需要实现 RPC 时，这个时候就需要序列化和反序列化了.</p><p>前两个需要用到序列化和反序列化的场景，是不是让我们有一个很大的疑问? 我们在与浏览器交互时，还有将内存中的对象持久化到数据库中时，好像都没有去进行序列化和反序列化，因为我们都没有实现 Serializable 接口，但一直正常运行.</p><p>下面先给出结论:</p><p><strong>只要我们对内存中的对象进行持久化或网络传输，这个时候都需要序列化和反序列化.</strong></p><p>理由:</p><p>服务器与浏览器交互时真的没有用到 Serializable 接口吗? JSON 格式实际上就是将一个对象转化为字符串，所以服务器与浏览器交互时的数据格式其实是字符串，我们来看来 String 类型的源码:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> final <span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">    <span class="keyword">implements</span> java.<span class="property">io</span>.<span class="property">Serializable</span>，<span class="title class_">Comparable</span>&lt;<span class="title class_">String</span>&gt;，<span class="title class_">CharSequence</span> &#123;</span><br><span class="line">    <span class="regexp">/\*\* The value is used for character storage. \*/</span></span><br><span class="line">    <span class="keyword">private</span> final char value\[\];</span><br><span class="line"></span><br><span class="line">    <span class="regexp">/\*\* Cache the hash code for the string \*/</span></span><br><span class="line">    <span class="keyword">private</span> int hash; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line">    <span class="regexp">/\*\* use serialVersionUID from JDK 1.0.2 for interoperability \*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final long serialVersionUID = -6849794470754667710L;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String 类型实现了 Serializable 接口，并显示指定 serialVersionUID 的值.</p><p>然后我们再来看对象持久化到数据库中时的情况，Mybatis 数据库映射文件里的 insert 代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert <span class="built_in">id</span>=<span class="string">&quot;insertUser&quot;</span> parameterType=<span class="string">&quot;org.tyshawn.bean.User&quot;</span>&gt;</span><br><span class="line">    INSERT INTO t\_user(name，age) VALUES (<span class="comment">#&#123;name&#125;，#&#123;age&#125;)</span></span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><p>实际上我们并不是将整个对象持久化到数据库中，而是将对象中的属性持久化到数据库中，而这些属性（如Date&#x2F;String）都实现了 Serializable 接口。</p><h2 id="49-实现序列化和反序列化为什么要实现-Serializable-接口"><a href="#49-实现序列化和反序列化为什么要实现-Serializable-接口" class="headerlink" title="49.实现序列化和反序列化为什么要实现 Serializable 接口?"></a>49.实现序列化和反序列化为什么要实现 Serializable 接口?</h2><p>在 Java 中实现了 Serializable 接口后， JVM 在类加载的时候就会发现我们实现了这个接口，然后在初始化实例对象的时候就会在底层帮我们实现序列化和反序列化。</p><p>如果被写对象类型不是String、数组、Enum，并且没有实现Serializable接口，那么在进行序列化的时候，将抛出NotSerializableException。源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// remaining cases</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    writeString((String) obj, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">    writeArray(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;</span><br><span class="line">    writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">    writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotSerializableException</span>(</span><br><span class="line">            cl.getName() + <span class="string">&quot;\n&quot;</span> + debugInfoStack.toString());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotSerializableException</span>(cl.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="50-实现-Serializable-接口之后，为什么还要显示指定-serialVersionUID-的值"><a href="#50-实现-Serializable-接口之后，为什么还要显示指定-serialVersionUID-的值" class="headerlink" title="50.实现 Serializable 接口之后，为什么还要显示指定 serialVersionUID 的值?"></a>50.实现 Serializable 接口之后，为什么还要显示指定 serialVersionUID 的值?</h2><p>如果不显示指定 serialVersionUID，JVM 在序列化时会根据属性自动生成一个 serialVersionUID，然后与属性一起序列化，再进行持久化或网络传输. 在反序列化时，JVM 会再根据属性自动生成一个新版 serialVersionUID，然后将这个新版 serialVersionUID 与序列化时生成的旧版 serialVersionUID 进行比较，如果相同则反序列化成功，否则报错.</p><p>如果显示指定了 serialVersionUID，JVM 在序列化和反序列化时仍然都会生成一个 serialVersionUID，但值为我们显示指定的值，这样在反序列化时新旧版本的 serialVersionUID 就一致了.</p><p>如果我们的类写完后不再修改，那么不指定serialVersionUID，不会有问题，但这在实际开发中是不可能的，我们的类会不断迭代，一旦类被修改了，那旧对象反序列化就会报错。 所以在实际开发中，我们都会显示指定一个 serialVersionUID。</p><h2 id="51-static-属性为什么不会被序列化"><a href="#51-static-属性为什么不会被序列化" class="headerlink" title="51.static 属性为什么不会被序列化?"></a>51.static 属性为什么不会被序列化?</h2><p>因为序列化是针对对象而言的，而 static 属性优先于对象存在，随着类的加载而加载，所以不会被序列化.</p><p>看到这个结论，是不是有人会问，serialVersionUID 也被 static 修饰，为什么 serialVersionUID 会被序列化? 其实 serialVersionUID 属性并没有被序列化，JVM 在序列化对象时会自动生成一个 serialVersionUID，然后将我们显示指定的 serialVersionUID 属性值赋给自动生成的 serialVersionUID.</p><h2 id="52-transient关键字的作用？"><a href="#52-transient关键字的作用？" class="headerlink" title="52.transient关键字的作用？"></a>52.transient关键字的作用？</h2><p>Java语言的关键字，变量修饰符，如果用transient声明一个实例变量，当对象存储时，它的值不需要维持。</p><p>也就是说被transient修饰的成员变量，在序列化的时候其值会被忽略，在被反序列化后， transient 变量的值被设为初始值， 如 int 型的是 0，对象型的是 null。</p><h2 id="53-什么是反射？"><a href="#53-什么是反射？" class="headerlink" title="53.什么是反射？"></a>53.什么是反射？</h2><p>动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射机制。</p><p>在运行状态中，对于任意一个类，能够知道这个类的所有属性和方法。对于任意一个对象，能够调用它的任意一个方法和属性。</p><h2 id="54-反射有哪些应用场景呢？"><a href="#54-反射有哪些应用场景呢？" class="headerlink" title="54.反射有哪些应用场景呢？"></a>54.反射有哪些应用场景呢？</h2><ol><li>JDBC连接数据库时使用<code>Class.forName()</code>通过反射加载数据库的驱动程序</li><li>Eclispe、IDEA等开发工具利用反射动态解析对象的类型与结构，动态提示对象的属性和方法</li><li>Web服务器中利用反射调用了Sevlet的<code>service</code>方法</li><li>JDK动态代理底层依赖反射实现</li></ol><h2 id="55-讲讲什么是泛型？"><a href="#55-讲讲什么是泛型？" class="headerlink" title="55.讲讲什么是泛型？"></a>55.讲讲什么是泛型？</h2><p>Java泛型是JDK 5中引⼊的⼀个新特性， 允许在定义类和接口的时候使⽤类型参数。声明的类型参数在使⽤时⽤具体的类型来替换。</p><p>泛型最⼤的好处是可以提⾼代码的复⽤性。以List接口为例，我们可以将String、 Integer等类型放⼊List中， 如不⽤泛型， 存放String类型要写⼀个List接口， 存放Integer要写另外⼀个List接口， 泛型可以很好的解决这个问题。</p><h2 id="56-如何停止一个正在运行的线程？"><a href="#56-如何停止一个正在运行的线程？" class="headerlink" title="56.如何停止一个正在运行的线程？"></a>56.如何停止一个正在运行的线程？</h2><p>有几种方式。</p><p>1、<strong>使用线程的stop方法</strong>。</p><p>使用stop()方法可以强制终止线程。不过stop是一个被废弃掉的方法，不推荐使用。</p><p>使用Stop方法，会一直向上传播ThreadDeath异常，从而使得目标线程解锁所有锁住的监视器，即释放掉所有的对象锁。使得之前被锁住的对象得不到同步的处理，因此可能会造成数据不一致的问题。</p><p>2、<strong>使用interrupt方法中断线程</strong>，该方法只是告诉线程要终止，但最终何时终止取决于计算机。调用interrupt方法仅仅是在当前线程中打了一个停止的标记，并不是真的停止线程。</p><p>接着调用 Thread.currentThread().isInterrupted()方法，可以用来判断当前线程是否被终止，通过这个判断我们可以做一些业务逻辑处理，通常如果isInterrupted返回true的话，会抛一个中断异常，然后通过try-catch捕获。</p><p>3、<strong>设置标志位</strong></p><p>设置标志位，当标识位为某个值时，使线程正常退出。设置标志位是用到了共享变量的方式，为了保证共享变量在内存中的可见性，可以使用volatile修饰它，这样的话，变量取值始终会从主存中获取最新值。</p><p>但是这种volatile标记共享变量的方式，在线程发生阻塞时是无法完成响应的。比如调用Thread.sleep() 方法之后，线程处于不可运行状态，即便是主线程修改了共享变量的值，该线程此时根本无法检查循环标志，所以也就无法实现线程中断。</p><p>因此，interrupt() 加上手动抛异常的方式是目前中断一个正在运行的线程<strong>最为正确</strong>的方式了。</p><h2 id="57-什么是跨域？"><a href="#57-什么是跨域？" class="headerlink" title="57.什么是跨域？"></a>57.什么是跨域？</h2><p>简单来讲，跨域是指从一个域名的网页去请求另一个域名的资源。由于有<strong>同源策略</strong>的关系，一般是不允许这么直接访问的。但是，很多场景经常会有跨域访问的需求，比如，在前后端分离的模式下，前后端的域名是不一致的，此时就会发生跨域问题。</p><p><strong>那什么是同源策略呢</strong>？</p><p>所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p>同源策略限制以下几种行为：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. Cookie、LocalStorage 和 IndexDB 无法读取</span><br><span class="line"><span class="number">2</span>. DOM 和 <span class="keyword">Js对象无法获得</span></span><br><span class="line"><span class="keyword"></span><span class="number">3</span>. AJAX 请求不能发送</span><br></pre></td></tr></table></figure><p><strong>为什么要有同源策略</strong>？</p><p>举个例子，假如你刚刚在网银输入账号密码，查看了自己的余额，然后再去访问其他带颜色的网站，这个网站可以访问刚刚的网银站点，并且获取账号密码，那后果可想而知。因此，从安全的角度来讲，同源策略是有利于保护网站信息的。</p><h2 id="58-跨域问题怎么解决呢？"><a href="#58-跨域问题怎么解决呢？" class="headerlink" title="58.跨域问题怎么解决呢？"></a>58.跨域问题怎么解决呢？</h2><p>嗯，有以下几种方法：</p><p><strong>CORS</strong>，跨域资源共享</p><p>CORS（Cross-origin resource sharing），跨域资源共享。CORS 其实是浏览器制定的一个规范，浏览器会自动进行 CORS 通信，它的实现主要在服务端，通过一些 HTTP Header 来限制可以访问的域，例如页面 A 需要访问 B 服务器上的数据，如果 B 服务器 上声明了允许 A 的域名访问，那么从 A 到 B 的跨域请求就可以完成。</p><p><strong>@CrossOrigin注解</strong></p><p>如果项目使用的是Springboot，可以在Controller类上添加一个 @CrossOrigin(origins &#x3D;”*”) 注解就可以实现对当前controller 的跨域访问了，当然这个标签也可以加到方法上，或者直接加到入口类上对所有接口进行跨域处理。注意SpringMVC的版本要在4.2或以上版本才支持@CrossOrigin。</p><p><strong>nginx反向代理接口跨域</strong></p><p>nginx反向代理跨域原理如下： 首先同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。</p><p>nginx反向代理接口跨域实现思路如下：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// proxy服务器</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">81</span>;</span><br><span class="line">    server_name  www.<span class="property">domain1</span>.<span class="property">com</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   <span class="attr">http</span>:<span class="comment">//www.domain2.com:8080;  #反向代理</span></span><br><span class="line">        proxy_cookie_domain www.<span class="property">domain2</span>.<span class="property">com</span> www.<span class="property">domain1</span>.<span class="property">com</span>; #修改cookie里域名</span><br><span class="line">        index  index.<span class="property">html</span> index.<span class="property">htm</span>;</span><br><span class="line">        </span><br><span class="line">        add_header <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span> <span class="attr">http</span>:<span class="comment">//www.domain1.com;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们的前端代理只要访问 http:<a href="http://www.domain1.com:81/*%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82">www.domain1.com:81/*就可以了。</a></p><p><strong>通过jsonp跨域</strong></p><p>通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，这是浏览器允许的操作，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。</p><h2 id="59-设计接口要注意什么"><a href="#59-设计接口要注意什么" class="headerlink" title="59.设计接口要注意什么?"></a>59.设计接口要注意什么?</h2><ol><li><strong>接口参数校验</strong>。接口必须校验参数，比如入参是否允许为空，入参长度是否符合预期。</li><li>设计接口时，充分考虑接口的<strong>可扩展性</strong>。思考接口是否可以复用，怎样保持接口的可扩展性。</li><li><strong>串行调用考虑改并行调用</strong>。比如设计一个商城首页接口，需要查商品信息、营销信息、用户信息等等。如果是串行一个一个查，那耗时就比较大了。这种场景是可以改为并行调用的，降低接口耗时。</li><li>接口是否需要<strong>防重</strong>处理。涉及到数据库修改的，要考虑防重处理，可以使用数据库防重表，以唯一流水号作为唯一索引。</li><li><strong>日志打印全面</strong>，入参出参，接口耗时，记录好日志，方便甩锅。</li><li>修改旧接口时，注意<strong>兼容性设计</strong>。</li><li><strong>异常处理得当</strong>。使用finally关闭流资源、使用log打印而不是e.printStackTrace()、不要吞异常等等</li><li>是否需要考虑<strong>限流</strong>。限流为了保护系统，防止流量洪峰超过系统的承载能力。</li></ol><h2 id="60-过滤器和拦截器有什么区别？"><a href="#60-过滤器和拦截器有什么区别？" class="headerlink" title="60.过滤器和拦截器有什么区别？"></a>60.过滤器和拦截器有什么区别？</h2><p>1、<strong>实现原理不同</strong>。</p><p>过滤器和拦截器底层实现不同。过滤器是基于函数回调的，拦截器是基于Java的反射机制（动态代理）实现的。一般自定义的过滤器中都会实现一个doFilter()方法，这个方法有一个FilterChain参数，而实际上它是一个回调接口。</p><p>2、<strong>使用范围不同</strong>。</p><p>过滤器实现的是 javax.servlet.Filter 接口，而这个接口是在Servlet规范中定义的，也就是说过滤器Filter的使用要依赖于Tomcat等容器，导致它只能在web程序中使用。而拦截器是一个Spring组件，并由Spring容器管理，并不依赖Tomcat等容器，是可以单独使用的。拦截器不仅能应用在web程序中，也可以用于Application、Swing等程序中。</p><p>3、<strong>使用的场景不同</strong>。</p><p>因为拦截器更接近业务系统，所以拦截器主要用来实现项目中的业务判断的，比如：日志记录、权限判断等业务。而过滤器通常是用来实现通用功能过滤的，比如：敏感词过滤、响应数据压缩等功能。</p><p>4、<strong>触发时机不同</strong>。</p><p>过滤器Filter是在请求进入容器后，但在进入servlet之前进行预处理，请求结束是在servlet处理完以后。</p><p>拦截器 Interceptor 是在请求进入servlet后，在进入Controller之前进行预处理的，Controller 中渲染了对应的视图之后请求结束。</p><p>5、<strong>拦截的请求范围不同</strong>。</p><p>请求的执行顺序是：请求进入容器 -&gt; 进入过滤器 -&gt; 进入 Servlet -&gt; 进入拦截器 -&gt; 执行控制器。可以看到过滤器和拦截器的执行时机也是不同的，过滤器会先执行，然后才会执行拦截器，最后才会进入真正的要调用的方法。</p><blockquote><p>参考链接：<a href="https://segmentfault.com/a/1190000022833940">https://segmentfault.com/a/1190000022833940</a></p></blockquote><h2 id="61-对接第三方接口要考虑什么？"><a href="#61-对接第三方接口要考虑什么？" class="headerlink" title="61.对接第三方接口要考虑什么？"></a>61.对接第三方接口要考虑什么？</h2><p>嗯，需要考虑以下几点：</p><ol><li>确认接口对接的<strong>网络协议</strong>，是https&#x2F;http或者自定义的私有协议等。</li><li>约定好<strong>数据传参、响应格式</strong>（如application&#x2F;json），弱类型对接强类型语言时要特别注意</li><li><strong>接口安全</strong>方面，要确定身份校验方式，使用token、证书校验等</li><li>确认是否需要接口调用失败后的<strong>重试</strong>机制，保证数据传输的最终一致性。</li><li><strong>日志记录要全面</strong>。接口出入参数，以及解析之后的参数值，都要用日志记录下来，方便定位问题（甩锅）。</li></ol><p>参考：<a href="https://blog.csdn.net/gzt19881123/article/details/108791034">https://blog.csdn.net/gzt19881123/article/details/108791034</a></p><h2 id="62-后端接口性能优化有哪些方法？"><a href="#62-后端接口性能优化有哪些方法？" class="headerlink" title="62.后端接口性能优化有哪些方法？"></a>62.后端接口性能优化有哪些方法？</h2><p>有以下这些方法：</p><p>1、<strong>优化索引</strong>。给where条件的关键字段，或者<code>order by</code>后面的排序字段，加索引。</p><p>2、<strong>优化sql语句</strong>。比如避免使用select *、批量操作、避免深分页、提升group by的效率等</p><p>3、<strong>避免大事务</strong>。使用@Transactional注解这种声明式事务的方式提供事务功能，容易造成大事务，引发其他的问题。应该避免在事务中一次性处理太多数据，将一些跟事务无关的逻辑放到事务外面执行。</p><p>4、<strong>异步处理</strong>。剥离主逻辑和副逻辑，副逻辑可以异步执行，异步写库。比如用户购买的商品发货了，需要发短信通知，短信通知是副流程，可以异步执行，以免影响主流程的执行。</p><p>5、<strong>降低锁粒度</strong>。在并发场景下，多个线程同时修改数据，造成数据不一致的情况。这种情况下，一般会加锁解决。但如果锁加得不好，导致锁的粒度太粗，也会非常影响接口性能。</p><p>6、<strong>加缓存</strong>。如果表数据量非常大的话，直接从数据库查询数据，性能会非常差。可以使用Redis<code>和</code>memcached提升查询性能，从而提高接口性能。</p><p>7、<strong>分库分表</strong>。当系统发展到一定的阶段，用户并发量大，会有大量的数据库请求，需要占用大量的数据库连接，同时会带来磁盘IO的性能瓶颈问题。或者数据库表数据非常大，SQL查询即使走了索引，也很耗时。这时，可以通过分库分表解决。分库用于解决数据库连接资源不足问题，和磁盘IO的性能瓶颈问题。分表用于解决单表数据量太大，sql语句查询数据时，即使走了索引也非常耗时问题。</p><p>8、<strong>避免在循环中查询数据库</strong>。循环查询数据库，非常耗时，最好能在一次查询中获取所有需要的数据。</p><h2 id="63-为什么在阿里巴巴Java开发手册中强制要求使用包装类型定义属性呢？"><a href="#63-为什么在阿里巴巴Java开发手册中强制要求使用包装类型定义属性呢？" class="headerlink" title="63.为什么在阿里巴巴Java开发手册中强制要求使用包装类型定义属性呢？"></a>63.为什么在阿里巴巴Java开发手册中强制要求使用包装类型定义属性呢？</h2><p>嗯，以布尔字段为例，当我们没有设置对象的字段的值的时候，Boolean类型的变量会设置默认值为<code>null</code>，而boolean类型的变量会设置默认值为<code>false</code>。</p><p>也就是说，包装类型的默认值都是null，而基本数据类型的默认值是一个固定值，如boolean是false，byte、short、int、long是0，float是0.0f等。</p><p>举一个例子，比如有一个扣费系统，扣费时需要从外部的定价系统中读取一个费率的值，我们预期该接口的返回值中会包含一个浮点型的费率字段。当我们取到这个值得时候就使用公式：金额*费率&#x3D;费用 进行计算，计算结果进行划扣。</p><p>如果由于计费系统异常，他可能会返回个默认值，如果这个字段是Double类型的话，该默认值为null，如果该字段是double类型的话，该默认值为0.0。</p><p>如果扣费系统对于该费率返回值没做特殊处理的话，拿到null值进行计算会直接报错，阻断程序。拿到0.0可能就直接进行计算，得出接口为0后进行扣费了。这种异常情况就无法被感知。</p><p><strong>那我可以对0.0做特殊判断，如果是0就阻断报错，这样是否可以呢？</strong></p><p>不对，这时候就会产生一个问题，如果允许费率是0的场景又怎么处理呢？</p><p>使用基本数据类型只会让方案越来越复杂，坑越来越多。</p><p>这种使用包装类型定义变量的方式，通过异常来阻断程序，进而可以被识别到这种线上问题。如果使用基本数据类型的话，系统可能不会报错，进而认为无异常。</p><p>因此，建议在POJO和RPC的返回值中使用包装类型。</p><h2 id="64-8招让接口性能提升100倍"><a href="#64-8招让接口性能提升100倍" class="headerlink" title="64.8招让接口性能提升100倍"></a>64.8招让接口性能提升100倍</h2><p><strong>池化思想</strong></p><p>如果你每次需要用到线程，都去创建，就会有增加一定的耗时，而线程池可以重复利用线程，避免不必要的耗时。</p><p>比如<code>TCP</code>三次握手，它为了减少性能损耗，引入了<code>Keep-Alive长连接</code>，避免频繁的创建和销毁连接。</p><p><strong>拒绝阻塞等待</strong></p><p>如果你调用一个系统<code>B</code>的接口，但是它处理业务逻辑，耗时需要<code>10s</code>甚至更多。然后你是一直<strong>阻塞等待，直到系统B的下游接口返回</strong>，再继续你的下一步操作吗？这样<strong>显然不合理</strong>。</p><p>参考<strong>IO多路复用模型</strong>。即我们不用阻塞等待系统<code>B</code>的接口，而是先去做别的操作。等系统<code>B</code>的接口处理完，通过<strong>事件回调</strong>通知，我们接口收到通知再进行对应的业务操作即可。</p><p><strong>远程调用由串行改为并行</strong></p><p>比如设计一个商城首页接口，需要查商品信息、营销信息、用户信息等等。如果是串行一个一个查，那耗时就比较大了。这种场景是可以改为并行调用的，降低接口耗时。</p><p><strong>锁粒度避免过粗</strong></p><p>在高并发场景，为了防止<strong>超卖等情况</strong>，我们经常需要<strong>加锁来保护共享资源</strong>。但是，如果加锁的粒度过粗，是很影响接口性能的。</p><p>不管你是<code>synchronized</code>加锁还是<code>redis</code>分布式锁，只需要在共享临界资源加锁即可，不涉及共享资源的，就不必要加锁。</p><p><strong>耗时操作，考虑放到异步执行</strong></p><p>耗时操作，考虑用<strong>异步处理</strong>，这样可以降低接口耗时。比如用户注册成功后，短信邮件通知，是可以异步处理的。</p><p><strong>使用缓存</strong></p><p>把要查的数据，提前放好到缓存里面，需要时，<strong>直接查缓存，而避免去查数据库或者计算的过程</strong>。</p><p><strong>提前初始化到缓存</strong></p><p>预取思想很容易理解，就是<strong>提前把要计算查询的数据，初始化到缓存</strong>。如果你在未来某个时间需要用到某个经过复杂计算的数据，<strong>才实时去计算的话，可能耗时比较大</strong>。这时候，我们可以采取预取思想，<strong>提前把将来可能需要的数据计算好，放到缓存中</strong>，等需要的时候，去缓存取就行。这将大幅度提高接口性能。</p><p><strong>压缩传输内容</strong></p><p>压缩传输内容，传输报文变得更小，因此传输会更快。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 八股文 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/posts/18155/"/>
      <url>/posts/18155/</url>
      
        <content type="html"><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a><strong>1.简介</strong></h3><p><a href="https://docs.spring.io/spring-framework/reference">https://docs.spring.io/spring-framework/reference</a></p><h3 id="2-优点"><a href="#2-优点" class="headerlink" title="2.优点"></a><strong>2.优点</strong></h3><ul><li>Spring是一个开源的免费的框架（容器）。</li><li>Spring是一个轻量级，非入侵式的框架</li><li>控制反转（IOC），面向切面编程（AOP）</li><li>支持事务的处理，对框架整合的支持</li></ul><h3 id="3-组成"><a href="#3-组成" class="headerlink" title="3.组成"></a><strong>3.组成</strong></h3><p><img src="/../UpPictures/SpringPictures/image-20240321163406903.png" alt="image-20240321163406903"></p><h3 id="4-拓展"><a href="#4-拓展" class="headerlink" title="4.拓展"></a><strong>4.拓展</strong></h3><p>现代化的java开发，说白了就是基于Spring的开发。</p><p>Your App –&gt; Spring Boot –&gt;Spring Cloud –&gt; Spring Cloud Data Flow</p><pre><code>                    (构建一切)           (协调一切)                    (连接一切)</code></pre><ul><li><p>Spring Boot</p><ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速开发单个微服务</li><li>约定大于配置</li></ul></li><li><p>Spring Cloud </p><ul><li>SpringCloud是基于SpringBoot实现的</li></ul></li></ul><p>因为现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring及SpringMVC。（承上启下的作用）</p><p>弊端：发展了太久之后，违背了原来的理念。配置十分繁琐，人称：“配置地狱”</p><h3 id="5-IOC理论推导"><a href="#5-IOC理论推导" class="headerlink" title="5.IOC理论推导"></a><strong>5.IOC理论推导</strong></h3><p><strong>实现一：</strong></p><ol><li><p>UserDao接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.chabai.dao;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 刘晔</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * description:</span><br><span class="line"> */</span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    void getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserDaoImpl实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.chabai.dao;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 刘晔</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * description:</span><br><span class="line"> */</span><br><span class="line">public class UserDaoImpl implements UserDao&#123;</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        System.out.println(&quot;默认获取用户的数据&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.chabai.dao;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 刘晔</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * description:</span><br><span class="line"> */</span><br><span class="line">public class UserDaoMysqlImpl implements UserDao&#123;</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        System.out.println(&quot;Mysql获取用户数&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserService业务接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.chabai.service;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 刘晔</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * description:</span><br><span class="line"> */</span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    void getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserServiceImpl业务实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.chabai.service;</span><br><span class="line"></span><br><span class="line">import com.chabai.dao.UserDao;</span><br><span class="line">import com.chabai.dao.UserDaoImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 刘晔</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * description:</span><br><span class="line"> */</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line"></span><br><span class="line">      //1.用户想用什么我们总是需要改动对应UserServiceImpl代码，代价太大了</span><br><span class="line">      private UserDao userDao = new UserDaoImpl();</span><br><span class="line">      或private UserDao userDao = new UserDaoMysqlImpl();</span><br><span class="line">      或private UserDao userDao = new UserDaoOracleImpl();</span><br><span class="line">    </span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import com.chabai.dao.UserDao;</span><br><span class="line">import com.chabai.dao.UserDaoImpl;</span><br><span class="line">import com.chabai.dao.UserDaoMysqlImpl;</span><br><span class="line">import com.chabai.dao.UserDaoOracleImpl;</span><br><span class="line">import com.chabai.service.UserServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 刘晔</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * description:</span><br><span class="line"> */</span><br><span class="line">public class MyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        //用户实际调用的是业务层，dao层他们不需要实际接触</span><br><span class="line">        UserServiceImpl userService = new UserServiceImpl();</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>实现二：</strong></p><ol><li><p>UserDao接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.chabai.dao;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 刘晔</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * description:</span><br><span class="line"> */</span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    void getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserDaoImpl实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.chabai.dao;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 刘晔</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * description:</span><br><span class="line"> */</span><br><span class="line">public class UserDaoImpl implements UserDao&#123;</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        System.out.println(&quot;默认获取用户的数据&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.chabai.dao;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 刘晔</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * description:</span><br><span class="line"> */</span><br><span class="line">public class UserDaoMysqlImpl implements UserDao&#123;</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        System.out.println(&quot;Mysql获取用户数&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserService业务接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.chabai.service;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 刘晔</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * description:</span><br><span class="line"> */</span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    void getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserServiceImpl业务实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.chabai.service;</span><br><span class="line"></span><br><span class="line">import com.chabai.dao.UserDao;</span><br><span class="line">import com.chabai.dao.UserDaoImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 刘晔</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * description:</span><br><span class="line"> */</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line"></span><br><span class="line">    //优化:利用set实现动态值的注入</span><br><span class="line">    //之前，程序是主动创建对象，控制权在程序员手上</span><br><span class="line">    //使用了set注入后，程序不再具有主动性，而是变成了被动接受对象</span><br><span class="line">    private UserDao userDao;</span><br><span class="line">    public void setUserDao(UserDao userDao) &#123;</span><br><span class="line">        this.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import com.chabai.dao.UserDao;</span><br><span class="line">import com.chabai.dao.UserDaoImpl;</span><br><span class="line">import com.chabai.dao.UserDaoMysqlImpl;</span><br><span class="line">import com.chabai.dao.UserDaoOracleImpl;</span><br><span class="line">import com.chabai.service.UserServiceImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 刘晔</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * description:</span><br><span class="line"> */</span><br><span class="line">public class MyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        UserServiceImpl userService = new UserServiceImpl();</span><br><span class="line">        userService.setUserDao(new UserDaoOracleImpl());//改这里的对象即可</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>分析：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//优化:利用set实现动态值的注入</span></span><br><span class="line"><span class="comment">//之前，程序是主动创建对象，控制权在程序员手上</span></span><br><span class="line"><span class="comment">//使用了set注入后，程序不再具有主动性，而是变成了被动接受对象</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种思想，从本质上解决了问题，我们程序员不用再去管理对下岗的创建了。系统的耦合性大大降低，可以更加专注的在业务的实现上，这是ioc的原型！</p><h3 id="6-ioc本质"><a href="#6-ioc本质" class="headerlink" title="6.ioc本质"></a><strong>6.ioc本质</strong></h3><p>控制反转IoC(Inversion of Control),是一种设计思想，DI(依赖注入)是实现IoC的一种方法，也有人认为DI只是IoC的另一种说法。没有IoC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创见转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p><h3 id="7-HelloSpring"><a href="#7-HelloSpring" class="headerlink" title="7.HelloSpring"></a><strong>7.HelloSpring</strong></h3><blockquote><p>导入Jar包</p></blockquote><p>注 : spring 需要导入commons-logging进行日志记录 . 我们利用maven , 他会自动下载对应的依赖项 .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;5.1.10.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>编写代码</p></blockquote><p>1、编写一个Hello实体类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Hello &#123;</span><br><span class="line">   private String name;</span><br><span class="line"></span><br><span class="line">   public String getName() &#123;</span><br><span class="line">       return name;</span><br><span class="line">  &#125;</span><br><span class="line">   public void setName(String name) &#123;</span><br><span class="line">       this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public void show()&#123;</span><br><span class="line">       System.out.println(&quot;Hello,&quot;+ name );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写我们的spring文件 , 这里我们命名为beans.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">      xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--bean就是java对象 , 由Spring创建和管理--&gt;</span><br><span class="line">   &lt;bean id=&quot;hello&quot; class=&quot;com.kuang.pojo.Hello&quot;&gt;</span><br><span class="line">       &lt;!--value:具体的值（基本数据类型）</span><br><span class="line">           ref:引用Spring中已经存在的对象</span><br><span class="line">       --&gt;</span><br><span class="line">       &lt;property name=&quot;name&quot; value=&quot;Spring&quot;/&gt;&lt;!--对应Hello中的setName方法--&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">以下示例显示了基于 XML 的配置元数据的基本结构：</span><br><span class="line">xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">https://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;!--该属性是一个字符串，用于标识单个 Bean 定义。id     </span><br><span class="line">    该属性定义 Bean 的类型，并使用完全限定的 类名。class</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;  </span><br><span class="line">&lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;</span><br><span class="line">&lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- more bean definitions go here --&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>3、我们可以去进行测试了 .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">   //解析beans.xml文件 , 生成管理相应的Bean对象</span><br><span class="line">   ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">   //getBean : 参数即为spring配置文件中bean的id .</span><br><span class="line">   Hello hello = (Hello) context.getBean(&quot;hello&quot;);</span><br><span class="line">   hello.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>思考</p></blockquote><ul><li>Hello 对象是谁创建的 ?   hello 对象是由Spring创建的</li><li>Hello 对象的属性是怎么设置的 ?  hello 对象的属性是由Spring容器设置的</li></ul><p>这个过程就叫控制反转 :</p><ul><li>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的</li><li>反转 : 程序本身不创建对象 , 而变成被动的接收对象 .</li></ul><p>依赖注入 : 就是利用set方法来进行注入的.</p><p> IOC是一种编程思想，由主动的编程变成被动的接收</p><p>可以通过newClassPathXmlApplicationContext去浏览一下底层源码 .</p><blockquote><p>修改案例一</p></blockquote><p>我们在案例一中， 新增一个Spring配置文件beans.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">      xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;MysqlImpl&quot; class=&quot;com.kuang.dao.impl.UserDaoMySqlImpl&quot;/&gt;</span><br><span class="line">   &lt;bean id=&quot;OracleImpl&quot; class=&quot;com.kuang.dao.impl.UserDaoOracleImpl&quot;/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;ServiceImpl&quot; class=&quot;com.kuang.service.impl.UserServiceImpl&quot;&gt;</span><br><span class="line">       &lt;!--注意: 这里的name并不是属性 , 而是set方法后面的那部分 , 首字母小写--&gt;</span><br><span class="line">       &lt;!--引用另外一个bean , 不是用value 而是用 ref--&gt;</span><br><span class="line">       &lt;property name=&quot;userDao&quot; ref=&quot;OracleImpl&quot;/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>测试！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">   ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">   UserServiceImpl serviceImpl = (UserServiceImpl) context.getBean(&quot;ServiceImpl&quot;);</span><br><span class="line">   serviceImpl.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK , 到了现在 , 我们彻底不用再程序中去改动了 , 要实现不同的操作 , 只需要在xml配置文件中进行修改 , 所谓的IoC,一句话搞定 : 对象由Spring 来创建 , 管理 , 装配 ! </p><h3 id="8-IOC创建对象方式"><a href="#8-IOC创建对象方式" class="headerlink" title="8.IOC创建对象方式"></a><strong>8.IOC创建对象方式</strong></h3><blockquote><p>&#x3D;&#x3D;<strong>通过无参构造方法来创建</strong>&#x3D;&#x3D;</p></blockquote><p>1、User.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">   private String name;</span><br><span class="line"></span><br><span class="line">   public User() &#123;</span><br><span class="line">       System.out.println(&quot;user无参构造方法&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public void setName(String name) &#123;</span><br><span class="line">       this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public void show()&#123;</span><br><span class="line">       System.out.println(&quot;name=&quot;+ name );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、beans.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">      xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;name&quot; value=&quot;kuangshen&quot;/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>3、测试类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">   ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">   //在执行getBean的时候, user已经创建好了 , 通过无参构造</span><br><span class="line">   User user = (User) context.getBean(&quot;user&quot;);</span><br><span class="line">   //调用对象的方法 .</span><br><span class="line">   user.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果可以发现，在调用show方法之前，User对象已经通过无参构造初始化了！</p><blockquote><p>&#x3D;&#x3D;<strong>通过有参构造方法来创建</strong>&#x3D;&#x3D;</p></blockquote><p>1、UserT . java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class UserT &#123;</span><br><span class="line"></span><br><span class="line">   private String name;</span><br><span class="line"></span><br><span class="line">   public UserT(String name) &#123;</span><br><span class="line">       this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public void setName(String name) &#123;</span><br><span class="line">       this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public void show()&#123;</span><br><span class="line">       System.out.println(&quot;name=&quot;+ name );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、beans.xml 有三种方式编写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第一种根据index参数下标设置 --&gt;</span><br><span class="line">&lt;bean id=&quot;userT&quot; class=&quot;com.kuang.pojo.UserT&quot;&gt;</span><br><span class="line">   &lt;!-- index指构造方法 , 下标从0开始 --&gt;</span><br><span class="line">   &lt;constructor-arg index=&quot;0&quot; value=&quot;kuangshen2&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 第二种根据参数名字设置 --&gt;</span><br><span class="line">&lt;bean id=&quot;userT&quot; class=&quot;com.kuang.pojo.UserT&quot;&gt;</span><br><span class="line">   &lt;!-- name指参数名 --&gt;</span><br><span class="line">   &lt;constructor-arg name=&quot;name&quot; value=&quot;kuangshen2&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 第三种根据参数类型设置（不建议使用） --&gt;</span><br><span class="line">&lt;bean id=&quot;userT&quot; class=&quot;com.kuang.pojo.UserT&quot;&gt;</span><br><span class="line">   &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;kuangshen2&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testT()&#123;</span><br><span class="line">   ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">   UserT user = (UserT) context.getBean(&quot;userT&quot;);</span><br><span class="line">   user.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：在配置文件加载的时候。其中管理的对象都已经初始化了！</p><h3 id="9-Spring配置"><a href="#9-Spring配置" class="headerlink" title="9.Spring配置"></a><strong>9.Spring配置</strong></h3><blockquote><p>别名</p></blockquote><p>alias 设置别名 , 为bean设置别名 , 可以设置多个别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--设置别名：在获取Bean的时候可以使用别名获取--&gt;</span><br><span class="line">&lt;alias name=&quot;userT&quot; alias=&quot;userNew&quot;/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Bean的配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--bean就是java对象,由Spring创建和管理--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">   id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符（相当于我们学的对象名）</span><br><span class="line">   如果配置id,又配置了name,那么name是别名</span><br><span class="line">   name可以设置多个别名,可以用逗号,分号,空格隔开</span><br><span class="line">   如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;</span><br><span class="line"></span><br><span class="line">class是bean的全限定名=包名+类名</span><br><span class="line">--&gt;</span><br><span class="line">&lt;bean id=&quot;hello&quot; name=&quot;hello2 h2,h3;h4&quot; class=&quot;com.kuang.pojo.Hello&quot;&gt;</span><br><span class="line">   &lt;property name=&quot;name&quot; value=&quot;Spring&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><blockquote><p>import</p></blockquote><p>团队的合作通过import来实现 ，可以将多个配置文件，导入合并为一个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;import resource=&quot;&#123;path&#125;/beans.xml&quot;/&gt;</span><br></pre></td></tr></table></figure><p>假设，现在项目中有多个人开发，这三个人负责不同的类开发，不同的类的需要注册在不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的。</p><ul><li>张三</li><li>李四</li><li>王五</li><li>applicationContext.xml</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;import resource=&quot;beans.xml&quot;/&gt;</span><br><span class="line">&lt;import resource=&quot;beans2.xml&quot;/&gt;</span><br><span class="line">&lt;import resource=&quot;beans3.xml&quot;/&gt;</span><br></pre></td></tr></table></figure><p>使用的时候使用总的就可</p><h3 id="10-依赖注入"><a href="#10-依赖注入" class="headerlink" title="10.依赖注入"></a><strong>10.依赖注入</strong></h3><blockquote><p>&#x3D;&#x3D;概念&#x3D;&#x3D;</p></blockquote><ul><li>依赖注入（Dependency Injection,DI）。</li><li>依赖 : 指Bean对象的创建依赖于容器 . Bean对象的依赖资源 .</li><li>注入 : 指Bean对象所依赖的资源 , 由容器来设置和装配 .</li></ul><blockquote><p>&#x3D;&#x3D;构造器注入&#x3D;&#x3D;</p></blockquote><p>我们在之前的案例已经讲过了</p><blockquote><p>&#x3D;&#x3D;Set 注入 （重点）&#x3D;&#x3D;</p></blockquote><p>要求被注入的属性 , 必须有set方法 , set方法的方法名由set + 属性首字母大写 , 如果属性是boolean类型 , 没有set方法 , 是 is .</p><p>测试pojo类 :</p><p>Address.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Address &#123;</span><br><span class="line"></span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line">    public String getAddress() &#123;</span><br><span class="line">        return address;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        this.address = address;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">package com.kuang.pojo;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line"></span><br><span class="line">   private String name;</span><br><span class="line">   private Address address;</span><br><span class="line">   private String[] books;</span><br><span class="line">   private List&lt;String&gt; hobbys;</span><br><span class="line">   private Map&lt;String,String&gt; card;</span><br><span class="line">   private Set&lt;String&gt; games;</span><br><span class="line">   private String wife;</span><br><span class="line">   private Properties info;</span><br><span class="line"></span><br><span class="line">   public String getName() &#123;</span><br><span class="line">       return name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setName(String name) &#123;</span><br><span class="line">       this.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public Address getAddress() &#123;</span><br><span class="line">       return address;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setAddress(Address address) &#123;</span><br><span class="line">       this.address = address;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public String[] getBooks() &#123;</span><br><span class="line">       return books;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setBooks(String[] books) &#123;</span><br><span class="line">       this.books = books;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public List&lt;String&gt; getHobbys() &#123;</span><br><span class="line">       return hobbys;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setHobbys(List&lt;String&gt; hobbys) &#123;</span><br><span class="line">       this.hobbys = hobbys;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public Map&lt;String, String&gt; getCard() &#123;</span><br><span class="line">       return card;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setCard(Map&lt;String, String&gt; card) &#123;</span><br><span class="line">       this.card = card;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public Set&lt;String&gt; getGames() &#123;</span><br><span class="line">       return games;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setGames(Set&lt;String&gt; games) &#123;</span><br><span class="line">       this.games = games;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public String getWife() &#123;</span><br><span class="line">       return wife;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setWife(String wife) &#123;</span><br><span class="line">       this.wife = wife;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public Properties getInfo() &#123;</span><br><span class="line">       return info;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setInfo(Properties info) &#123;</span><br><span class="line">       this.info = info;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public String toString() &#123;</span><br><span class="line">       return &quot;Hello&#123;&quot; +</span><br><span class="line">               &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">               &quot;, address=&quot; + address +</span><br><span class="line">               &quot;, books=&quot; + Arrays.toString(books) +</span><br><span class="line">               &quot;, hobbys=&quot; + hobbys +</span><br><span class="line">               &quot;, card=&quot; + card +</span><br><span class="line">               &quot;, games=&quot; + games +</span><br><span class="line">               &quot;, wife=&#x27;&quot; + wife + &#x27;\&#x27;&#x27; +</span><br><span class="line">               &quot;, info=&quot; + info +</span><br><span class="line">               &#x27;&#125;&#x27;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、常量注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;student&quot; class=&quot;com.kuang.pojo.Student&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;小明&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test01()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line"></span><br><span class="line">    Student student = (Student) context.getBean(&quot;student&quot;);</span><br><span class="line"></span><br><span class="line">    System.out.println(student.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Bean注入 </p><p>注意点：这里的值是一个引用，ref</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;addr&quot; class=&quot;com.kuang.pojo.Address&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;address&quot; value=&quot;重庆&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;student&quot; class=&quot;com.kuang.pojo.Student&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;小明&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;address&quot; ref=&quot;addr&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>3、数组注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;student&quot; class=&quot;com.kuang.pojo.Student&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;小明&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;address&quot; ref=&quot;addr&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;books&quot;&gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">            &lt;value&gt;西游记&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;红楼梦&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;水浒传&lt;/value&gt;</span><br><span class="line">        &lt;/array&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>4、List注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;hobbys&quot;&gt;</span><br><span class="line">    &lt;list&gt;</span><br><span class="line">        &lt;value&gt;听歌&lt;/value&gt;</span><br><span class="line">        &lt;value&gt;看电影&lt;/value&gt;</span><br><span class="line">        &lt;value&gt;爬山&lt;/value&gt;</span><br><span class="line">    &lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>5、Map注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;card&quot;&gt;</span><br><span class="line">    &lt;map&gt;</span><br><span class="line">        &lt;entry key=&quot;中国邮政&quot; value=&quot;456456456465456&quot;/&gt;</span><br><span class="line">        &lt;entry key=&quot;建设&quot; value=&quot;1456682255511&quot;/&gt;</span><br><span class="line">    &lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>6、set注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;games&quot;&gt;</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        &lt;value&gt;LOL&lt;/value&gt;</span><br><span class="line">        &lt;value&gt;BOB&lt;/value&gt;</span><br><span class="line">        &lt;value&gt;COC&lt;/value&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>7、Null注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;wife&quot;&gt;&lt;null/&gt;&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>8、Properties注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;info&quot;&gt;</span><br><span class="line">    &lt;props&gt;</span><br><span class="line">        &lt;prop key=&quot;学号&quot;&gt;20190604&lt;/prop&gt;</span><br><span class="line">        &lt;prop key=&quot;性别&quot;&gt;男&lt;/prop&gt;</span><br><span class="line">        &lt;prop key=&quot;姓名&quot;&gt;小明&lt;/prop&gt;</span><br><span class="line">    &lt;/props&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="/../UpPictures/SpringPictures/image-20240321163606499.png" alt="image-20240321163606499"></p><blockquote><p>&#x3D;&#x3D;p命名和c命名注入&#x3D;&#x3D;(拓展方式)</p></blockquote><p>User.java ：【注意：这里没有有参构造器！】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、P命名空间注入 : 需要在头文件中加入约束文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">导入约束 : xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"></span><br><span class="line">&lt;!--P(属性: properties)命名空间 , 属性依然要设置set方法--&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot; p:name=&quot;狂神&quot; p:age=&quot;18&quot;/&gt;</span><br></pre></td></tr></table></figure><p>2、c 命名空间注入 : 需要在头文件中加入约束文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">导入约束 : xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br><span class="line">&lt;!--C(构造: Constructor)命名空间 , 属性依然要设置set方法--&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot; c:name=&quot;狂神&quot; c:age=&quot;18&quot;/&gt;</span><br></pre></td></tr></table></figure><p>发现问题：爆红了，刚才我们没有写有参构造！</p><p>解决：&#x3D;&#x3D;把有参构造器加上，这里也能知道，c 就是所谓的构造器注入！&#x3D;&#x3D;</p><p>测试代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test02()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">    User user = (User) context.getBean(&quot;user&quot;);//等价于User user = context.getBean(&quot;user&quot;,User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;Bean的作用域&#x3D;&#x3D;</p></blockquote><p>在Spring中，那些组成应用程序的主体及由Spring IoC容器所管理的对象，被称之为bean。简单地讲，bean就是由IoC容器初始化、装配及管理的对象 .</p><p><img src="/../UpPictures/SpringPictures/image-20240321163628280.png" alt="image-20240321163628280"></p><p>几种作用域中，request、session作用域仅在基于web的应用中使用（不必关心你所采用的是什么web应用框架），只能用在基于web的Spring ApplicationContext环境。</p><p><strong>Singleton</strong>（Spring默认机制）</p><p>当一个bean的作用域为Singleton，那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。Singleton是单例类型，就是在创建起容器时就同时自动创建了一个bean的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。注意，Singleton作用域是Spring中的缺省作用域。要在XML中将bean定义成singleton，可以这样配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;ServiceImpl&quot; class=&quot;cn.csdn.service.ServiceImpl&quot; scope=&quot;singleton&quot;&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test03()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">    User user = (User) context.getBean(&quot;user&quot;);</span><br><span class="line">    User user2 = (User) context.getBean(&quot;user&quot;);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Prototype</strong></p><p>当一个bean的作用域为Prototype，表示一个bean定义对应多个对象实例。Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。Prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。根据经验，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。在XML中将bean定义成prototype，可以这样配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;account&quot; class=&quot;com.foo.DefaultAccount&quot; scope=&quot;prototype&quot;/&gt;  </span><br><span class="line"> 或者</span><br><span class="line">&lt;bean id=&quot;account&quot; class=&quot;com.foo.DefaultAccount&quot; singleton=&quot;false&quot;/&gt;</span><br></pre></td></tr></table></figure><p><strong>Request</strong></p><p>当一个bean的作用域为Request，表示在一次HTTP请求中，一个bean定义对应一个实例；即每个HTTP请求都会有各自的bean实例，它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;loginAction&quot; class=cn.csdn.LoginAction&quot; scope=&quot;request&quot;/&gt;</span><br></pre></td></tr></table></figure><p>针对每次HTTP请求，Spring容器会根据loginAction bean的定义创建一个全新的LoginAction bean实例，且该loginAction bean实例仅在当前HTTP request内有效，因此可以根据需要放心的更改所建实例的内部状态，而其他请求中根据loginAction bean定义创建的实例，将不会看到这些特定于某个请求的状态变化。当处理请求结束，request作用域的bean实例将被销毁。</p><p><strong>Session</strong></p><p>当一个bean的作用域为Session，表示在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userPreferences&quot; class=&quot;com.foo.UserPreferences&quot; scope=&quot;session&quot;/&gt;</span><br></pre></td></tr></table></figure><p>针对某个HTTP Session，Spring容器会根据userPreferences bean定义创建一个全新的userPreferences bean实例，且该userPreferences bean仅在当前HTTP Session内有效。与request作用域一样，可以根据需要放心的更改所创建实例的内部状态，而别的HTTP Session中根据userPreferences创建的实例，将不会看到这些特定于某个HTTP Session的状态变化。当HTTP Session最终被废弃的时候，在该HTTP Session作用域内的bean也会被废弃掉。</p><h3 id="11-Bean的自动装配"><a href="#11-Bean的自动装配" class="headerlink" title="11.Bean的自动装配"></a>11.Bean的自动装配</h3><blockquote><p>&#x3D;&#x3D;自动装配说明&#x3D;&#x3D;</p></blockquote><ul><li>自动装配是使用spring满足bean依赖的一种方法</li><li>spring会在上下文中自动寻找，并自动给bean装备属性</li></ul><p>Spring中bean有三种装配机制，分别是：</p><ol><li><strong>在xml中显式配置；</strong></li><li><strong>在java中显式配置；</strong></li><li><strong>隐式的bean发现机制和自动装配。</strong>【重要】</li></ol><p>这里我们主要讲第三种：自动化的装配bean。</p><p>Spring的自动装配需要从两个角度来实现，或者说是两个操作：</p><ol><li>组件扫描(component scanning)：spring会自动发现应用上下文中所创建的bean；</li><li>自动装配(autowiring)：spring自动满足bean之间的依赖，也就是我们说的IoC&#x2F;DI；</li></ol><p>组件扫描和自动装配组合发挥巨大威力，使得显示的配置降低到最少。</p><p><strong>推荐不使用自动装配xml配置 , 而使用注解 .</strong></p><blockquote><p>&#x3D;&#x3D;测试环境搭建&#x3D;&#x3D;</p></blockquote><p>1、新建一个项目</p><p>2、新建两个实体类，Cat  Dog  都有一个叫的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Cat &#123;</span><br><span class="line">   public void shout() &#123;</span><br><span class="line">       System.out.println(&quot;miao~&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Dog &#123;</span><br><span class="line">   public void shout() &#123;</span><br><span class="line">       System.out.println(&quot;wang~&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、新建一个用户类 User</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private Cat cat;</span><br><span class="line">    private Dog dog;</span><br><span class="line">    private String str;</span><br><span class="line"></span><br><span class="line">    public Cat getCat() &#123;</span><br><span class="line">        return cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCat(Cat cat) &#123;</span><br><span class="line">        this.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Dog getDog() &#123;</span><br><span class="line">        return dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDog(Dog dog) &#123;</span><br><span class="line">        this.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStr() &#123;</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStr(String str) &#123;</span><br><span class="line">        this.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Hello&#123;&quot; +</span><br><span class="line">                &quot;cat=&quot; + cat +</span><br><span class="line">                &quot;, dog=&quot; + dog +</span><br><span class="line">                &quot;, str=&#x27;&quot; + str + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、编写Spring配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">      xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;dog&quot; class=&quot;com.kuang.pojo.Dog&quot;/&gt;</span><br><span class="line">   &lt;bean id=&quot;cat&quot; class=&quot;com.kuang.pojo.Cat&quot;/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;cat&quot; ref=&quot;cat&quot;/&gt;</span><br><span class="line">       &lt;property name=&quot;dog&quot; ref=&quot;dog&quot;/&gt;</span><br><span class="line">       &lt;property name=&quot;str&quot; value=&quot;qinjiang&quot;/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>5、测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MyTest &#123;</span><br><span class="line">   @Test</span><br><span class="line">   public void testMethodAutowire() &#123;</span><br><span class="line">       ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">       User user = (User) context.getBean(&quot;user&quot;);</span><br><span class="line">       user.getCat().shout();</span><br><span class="line">       user.getDog().shout();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果正常输出，环境OK</p><blockquote><p>&#x3D;&#x3D;byName&#x3D;&#x3D;</p></blockquote><p><strong>autowire byName (按名称自动装配)</strong></p><p>由于在手动配置xml过程中，常常发生字母缺漏和大小写等错误，而无法对其进行检查，使得开发效率降低。</p><p>采用自动装配将避免这些错误，并且使配置简单化。</p><p>测试：</p><p>1、修改bean配置，增加一个属性  autowire&#x3D;”byName”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">      xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;dog&quot; class=&quot;com.kuang.pojo.Dog&quot;/&gt;</span><br><span class="line">   &lt;!--会自动在容器上下文中查找(也就是上面)，和自己对象set方法后面的值对应的bean id--&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot; autowire=&quot;byName&quot;&gt;</span><br><span class="line">   &lt;property name=&quot;str&quot; value=&quot;qinjiang&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>2、再次测试，结果依旧成功输出！</p><p>3、我们将 cat 的bean id修改为 catXXX</p><p>4、再次测试， 执行时报空指针java.lang.NullPointerException。因为按byName规则找不对应set方法，真正的setCat就没执行，对象就没有初始化，所以调用时就会报空指针错误。</p><p><strong>小结：</strong></p><p>当一个bean节点带有 autowire byName的属性时。</p><ol><li><p>将查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat。</p></li><li><p>去spring容器中寻找是否有此字符串名称id的对象。</p></li><li><p>如果有，就取出注入；如果没有，就报空指针异常。</p></li></ol><blockquote><p>&#x3D;&#x3D;byType&#x3D;&#x3D;</p></blockquote><p><strong>autowire byType (按类型自动装配)</strong></p><p>使用autowire byType首先需要保证：同一类型的对象，在spring容器中唯一。如果不唯一，会报不唯一的异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NoUniqueBeanDefinitionException</span><br></pre></td></tr></table></figure><p>测试：</p><p>1、将user的bean配置修改一下 ： autowire&#x3D;”byType”</p><p>2、测试，正常输出</p><p>3、在注册一个cat 的bean对象！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dog&quot; class=&quot;com.kuang.pojo.Dog&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat&quot; class=&quot;com.kuang.pojo.Cat&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat2&quot; class=&quot;com.kuang.pojo.Cat&quot;/&gt;</span><br><span class="line"> &lt;!--会自动在容器上下文中查找(也就是上面)，和自己对象属性类型相同的bean--&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot; autowire=&quot;byType&quot;&gt;</span><br><span class="line">   &lt;property name=&quot;str&quot; value=&quot;qinjiang&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>4、测试，报错：NoUniqueBeanDefinitionException</p><p>5、删掉cat2，将cat的bean名称改掉！测试！因为是按类型装配，所以并不会报异常，也不影响最后的结果。甚至将id属性去掉，也不影响结果。</p><p><strong>小结：</strong></p><p>byname的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致。</p><p>bytype的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一样。</p><p>这就是按照类型自动装配！</p><blockquote><p>&#x3D;&#x3D;使用注解&#x3D;&#x3D;</p></blockquote><p>jdk1.5开始支持注解，spring2.5开始全面支持注解。</p><p>准备工作：利用注解的方式注入属性。</p><p>1、在spring配置文件中引入context文件头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd</span><br></pre></td></tr></table></figure><p>2、开启属性注解支持！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:annotation-config/&gt;</span><br></pre></td></tr></table></figure><p><strong>@Autowired</strong>(有点小问题)</p><ul><li>直接在属性上使用即可，也可以在set方式上使用</li><li>使用Autowired我们可以不用编写Set方法了，前提是你这个自动装配的属性在IOC（Spring）容器中存在</li><li>@Autowired是按类型自动装配的，不支持id匹配。</li></ul><p>测试：</p><p>1、将User类中的set方法去掉，使用@Autowired注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">   @Autowired</span><br><span class="line">   private Cat cat;</span><br><span class="line">   @Autowired</span><br><span class="line">   private Dog dog;</span><br><span class="line">   private String str;</span><br><span class="line"></span><br><span class="line">   public Cat getCat() &#123;</span><br><span class="line">       return cat;</span><br><span class="line">  &#125;</span><br><span class="line">   public Dog getDog() &#123;</span><br><span class="line">       return dog;</span><br><span class="line">  &#125;</span><br><span class="line">   public String getStr() &#123;</span><br><span class="line">       return str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、此时配置文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:annotation-config/&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;dog&quot; class=&quot;com.kuang.pojo.Dog&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat&quot; class=&quot;com.kuang.pojo.Cat&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot;/&gt;</span><br></pre></td></tr></table></figure><p>3、测试，成功输出结果！</p><p>4.科普</p><p>@Autowired(required&#x3D;false)  说明：false，对象可以为null；true，对象必须存对象，不能为null。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//如果允许对象为null，设置required = false,默认为true</span><br><span class="line">@Autowired(required = false)</span><br><span class="line">private Cat cat;</span><br></pre></td></tr></table></figure><p><strong>@Qualifier</strong></p><ul><li>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候，我们可以使用@Qualifier(value&#x3D;”xxx”)去配置@Autowired的使用，指定一个唯一的bean对象注入。</li><li>@Autowired是根据类型自动装配的，加上@Qualifier则可以根据byName的方式自动装配</li><li><strong>@Qualifier不能单独使用</strong>。</li></ul><p>测试实验步骤：</p><p>1、配置文件修改内容，保证类型存在对象。且名字不为类的默认名字！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dog1&quot; class=&quot;com.kuang.pojo.Dog&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;dog2&quot; class=&quot;com.kuang.pojo.Dog&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat1&quot; class=&quot;com.kuang.pojo.Cat&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat2&quot; class=&quot;com.kuang.pojo.Cat&quot;/&gt;</span><br></pre></td></tr></table></figure><p>2、没有加Qualifier测试，直接报错</p><p>3、在属性上添加Qualifier注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">@Qualifier(value = &quot;cat2&quot;)</span><br><span class="line">private Cat cat;</span><br><span class="line">@Autowired</span><br><span class="line">@Qualifier(value = &quot;dog2&quot;)</span><br><span class="line">private Dog dog;</span><br></pre></td></tr></table></figure><p>测试，成功输出！</p><p><strong>@Nullable</strong></p><p>字段标记了这个注解，说明这个字段可以为null</p><p><strong>@Resource</strong></p><ul><li>@Resource如有指定的name属性，先按该属性进行byName方式查找装配；</li><li>其次再进行默认的byName方式进行装配；</li><li>如果以上都不成功，则按byType的方式自动装配。</li><li>都不成功，则报异常。</li></ul><p>实体类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">   //如果允许对象为null，设置required = false,默认为true</span><br><span class="line">   @Resource(name = &quot;cat2&quot;)</span><br><span class="line">   private Cat cat;</span><br><span class="line">   @Resource</span><br><span class="line">   private Dog dog;</span><br><span class="line">   private String str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dog&quot; class=&quot;com.kuang.pojo.Dog&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat1&quot; class=&quot;com.kuang.pojo.Cat&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat2&quot; class=&quot;com.kuang.pojo.Cat&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot;/&gt;</span><br></pre></td></tr></table></figure><p>测试：结果OK</p><p>配置文件2：beans.xml ， 删掉cat2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dog&quot; class=&quot;com.kuang.pojo.Dog&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;cat1&quot; class=&quot;com.kuang.pojo.Cat&quot;/&gt;</span><br></pre></td></tr></table></figure><p>实体类上只保留注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Resource</span><br><span class="line">private Cat cat;</span><br><span class="line">@Resource</span><br><span class="line">private Dog dog;</span><br></pre></td></tr></table></figure><p>结果：OK</p><p>结论：先进行byName查找，失败；再进行byType查找，成功。</p><p>&#x3D;&#x3D;小结&#x3D;&#x3D;</p><p>@Autowired与@Resource异同：</p><p>1、@Autowired与@Resource都可以用来装配bean。都可以写在字段上，或写在setter方法上。</p><p>2、@Autowired默认按类型装配（属于spring规范），默认情况下必须要求依赖对象必须存在，如果要允许null 值，可以设置它的required属性为false，如：@Autowired(required&#x3D;false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用</p><p>3、@Resource（属于J2EE复返），默认按照名称进行装配，名称可以通过name属性进行指定。如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</p><p>它们的作用相同都是用注解方式注入对象，但执行顺序不同。@Autowired先byType，@Resource先byName。</p><h3 id="12-使用注解开发"><a href="#12-使用注解开发" class="headerlink" title="12.使用注解开发"></a><strong>12.使用注解开发</strong></h3><blockquote><p>&#x3D;&#x3D;说明&#x3D;&#x3D;</p></blockquote><p>在spring4之后，想要使用注解形式，必须得要引入aop的包</p><p><img src="/../UpPictures/SpringPictures/image-20240321163657252.png" alt="image-20240321163657252"></p><p>在配置文件当中，还得要引入一个context约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">      xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">      xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">       http://www.springframework.org/schema/context</span><br><span class="line">       http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;Bean的实现&#x3D;&#x3D;</p></blockquote><p>我们之前都是使用 bean 的标签进行bean注入，但是实际开发中，我们一般都会使用注解！</p><p>1、配置扫描哪些包下的注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--指定注解扫描包--&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.kuang.pojo&quot;/&gt;</span><br></pre></td></tr></table></figure><p>2、在指定包下编写类，增加注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;user&quot;)</span><br><span class="line">// 相当于配置文件中 &lt;bean id=&quot;user&quot; class=&quot;当前注解的类&quot;/&gt;</span><br><span class="line">public class User &#123;</span><br><span class="line">   public String name = &quot;秦疆&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">   ApplicationContext applicationContext =</span><br><span class="line">       new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">   User user = (User) applicationContext.getBean(&quot;user&quot;);</span><br><span class="line">   System.out.println(user.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;属性注入&#x3D;&#x3D;</p></blockquote><p>使用注解注入属性</p><p>1、可以不用提供set方法，直接在直接名上添加@value(“值”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;user&quot;)</span><br><span class="line">// 相当于配置文件中 &lt;bean id=&quot;user&quot; class=&quot;当前注解的类&quot;/&gt;</span><br><span class="line">public class User &#123;</span><br><span class="line">   @Value(&quot;秦疆&quot;)</span><br><span class="line">   // 相当于配置文件中 &lt;property name=&quot;name&quot; value=&quot;秦疆&quot;/&gt;</span><br><span class="line">   public String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、如果提供了set方法，在set方法上添加@value(“值”);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;user&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">   public String name;</span><br><span class="line"></span><br><span class="line">   @Value(&quot;秦疆&quot;)</span><br><span class="line">   public void setName(String name) &#123;</span><br><span class="line">       this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;衍生注解&#x3D;&#x3D;</p></blockquote><p>我们这些注解，就是替代了在配置文件当中配置步骤而已！更加的方便快捷！</p><p><strong>@Component三个衍生注解</strong></p><p>为了更好的进行分层，Spring可以使用其它三个注解，功能一样，目前使用哪一个功能都一样。</p><ul><li>@Controller：web层</li><li>@Service：service层</li><li>@Repository：dao层</li></ul><p>写上这些注解，就相当于将这个类交给Spring管理装配了！</p><blockquote><p>&#x3D;&#x3D;自动装配注解&#x3D;&#x3D;</p></blockquote><p>在Bean的自动装配已经讲过了，可以回顾！</p><blockquote><p>&#x3D;&#x3D;作用域&#x3D;&#x3D;</p></blockquote><p>@scope</p><ul><li>singleton：默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。</li><li>prototype：多例模式。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Controller(&quot;user&quot;)</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line">   @Value(&quot;秦疆&quot;)</span><br><span class="line">   public String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;小结&#x3D;&#x3D;</p></blockquote><p><strong>XML与注解比较</strong></p><ul><li>XML可以适用任何场景 ，结构清晰，维护方便</li><li>注解不是自己提供的类使用不了，开发简单方便</li></ul><p><strong>xml与注解整合开发</strong> ：推荐最佳实践</p><ul><li>xml管理Bean</li><li>注解完成属性注入</li><li>使用过程中， 可以不用扫描，扫描是为了类上的注解</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:annotation-config/&gt;  </span><br></pre></td></tr></table></figure><p>作用：</p><ul><li><p>进行注解驱动注册，从而使注解生效</p></li><li><p>用于激活那些已经在spring容器里注册过的bean上面的注解，也就是显示的向Spring注册</p></li><li><p>如果不扫描包，就需要手动配置bean</p></li><li><p>如果不加注解驱动，则注入的值为null！</p></li></ul><blockquote><p>&#x3D;&#x3D;基于Java类进行配置&#x3D;&#x3D;</p></blockquote><p>JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的版本， JavaConfig 已正式成为 Spring4 的核心功能 。</p><p>测试：</p><p>1、编写一个实体类，Dog</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component  //将这个类标注为Spring的一个组件，放到容器中！</span><br><span class="line">public class Dog &#123;</span><br><span class="line">   public String name = &quot;dog&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、新建一个config配置包，编写一个MyConfig配置类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Configuration  //代表这是一个配置类</span><br><span class="line">public class MyConfig &#123;</span><br><span class="line"></span><br><span class="line">   @Bean //通过方法注册一个bean，这里的返回值就Bean的类型，方法名就是bean的id！</span><br><span class="line">   public Dog dog()&#123;</span><br><span class="line">       return new Dog();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">   ApplicationContext applicationContext =</span><br><span class="line">           new AnnotationConfigApplicationContext(MyConfig.class);</span><br><span class="line">   Dog dog = (Dog) applicationContext.getBean(&quot;dog&quot;);</span><br><span class="line">   System.out.println(dog.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、成功输出结果！</p><p><strong>导入其他配置如何做呢？</strong></p><p>1、我们再编写一个配置类！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Configuration  //代表这是一个配置类</span><br><span class="line">public class MyConfig2 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、在之前的配置类中我们来选择导入这个配置类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@Import(MyConfig2.class)  //导入合并其他配置类，类似于配置文件中的 inculde 标签</span><br><span class="line">public class MyConfig &#123;</span><br><span class="line"></span><br><span class="line">   @Bean</span><br><span class="line">   public Dog dog()&#123;</span><br><span class="line">       return new Dog();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这种Java类的配置方式，我们在之后的SpringBoot 和 SpringCloud中还会大量看到，我们需要知道这些注解的作用即可！</p><h3 id="13-代理模式"><a href="#13-代理模式" class="headerlink" title="13.代理模式"></a><strong>13.代理模式</strong></h3><p>为什么要学习代理模式，因为AOP的底层机制就是动态代理！</p><p>代理模式：</p><ul><li>静态代理</li><li>动态代理</li></ul><p>学习aop之前 , 我们要先了解一下代理模式！</p><p><img src="/../UpPictures/SpringPictures/image-20240321163716926.png" alt="image-20240321163716926"></p><blockquote><p>&#x3D;&#x3D;静态代理&#x3D;&#x3D;</p></blockquote><p><strong>静态代理角色分析</strong></p><ul><li><p>抽象角色 : 一般使用接口或者抽象类来实现</p></li><li><p>真实角色 : 被代理的角色</p></li><li><p>代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 .</p></li><li><p>客户  :  使用代理角色来进行一些操作 .</p></li></ul><p><strong>代码实现</strong></p><p>Rent . java 即抽象角色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//抽象角色：租房</span><br><span class="line">public interface Rent &#123;</span><br><span class="line">   public void rent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Host . java 即真实角色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//真实角色: 房东，房东要出租房子</span><br><span class="line">public class Host implements Rent&#123;</span><br><span class="line">   public void rent() &#123;</span><br><span class="line">       System.out.println(&quot;房屋出租&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Proxy . java 即代理角色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//代理角色：中介</span><br><span class="line">public class Proxy implements Rent &#123;</span><br><span class="line"></span><br><span class="line">   private Host host;</span><br><span class="line">   public Proxy() &#123; &#125;</span><br><span class="line">   public Proxy(Host host) &#123;</span><br><span class="line">       this.host = host;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   //租房</span><br><span class="line">   public void rent()&#123;</span><br><span class="line">       seeHouse();</span><br><span class="line">       host.rent();</span><br><span class="line">       fare();</span><br><span class="line">  &#125;</span><br><span class="line">   //看房</span><br><span class="line">   public void seeHouse()&#123;</span><br><span class="line">       System.out.println(&quot;带房客看房&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">   //收中介费</span><br><span class="line">   public void fare()&#123;</span><br><span class="line">       System.out.println(&quot;收中介费&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client . java 即客户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户类，一般客户都会去找代理！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//房东要租房</span></span><br><span class="line">       <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line">       <span class="comment">//代理，中介帮助房东</span></span><br><span class="line">       <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(host);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//你不用面对房东，直接找中介租房即可</span></span><br><span class="line">       proxy.rent();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：在这个过程中，你直接接触的就是中介，就如同现实生活中的样子，你看不到房东，但是你依旧租到了房东的房子通过代理，这就是所谓的代理模式，程序源自于生活，所以学编程的人，一般能够更加抽象的看待生活中发生的事情。</p><p><strong>静态代理的好处:</strong></p><ul><li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</li><li>公共的业务由代理来完成 . 实现了业务的分工 ,</li><li>公共业务发生扩展时变得更加集中和方便 .</li></ul><p>缺点 :</p><ul><li><p>一个真实角色就会产生一个代理角色；代码率会翻倍。</p></li><li><p>类多了 , 多了代理类 , 工作量变大了 . 开发效率降低 .</p></li></ul><p>我们想要静态代理的好处，又不想要静态代理的缺点，所以 , 就有了动态代理 !</p><blockquote><p>&#x3D;&#x3D;静态代理再理解&#x3D;&#x3D;</p></blockquote><p>同学们练习完毕后，我们再来举一个例子，巩固大家的学习！</p><p>练习步骤：</p><p>1、创建一个抽象角色，比如咋们平时做的用户业务，抽象起来就是增删改查！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//抽象角色：增删改查业务</span><br><span class="line">public interface UserService &#123;</span><br><span class="line">   void add();</span><br><span class="line">   void delete();</span><br><span class="line">   void update();</span><br><span class="line">   void query();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、我们需要一个真实对象来完成这些增删改查操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//真实对象，完成增删改查操作的人</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line"></span><br><span class="line">   public void add() &#123;</span><br><span class="line">       System.out.println(&quot;增加了一个用户&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public void delete() &#123;</span><br><span class="line">       System.out.println(&quot;删除了一个用户&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public void update() &#123;</span><br><span class="line">       System.out.println(&quot;更新了一个用户&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public void query() &#123;</span><br><span class="line">       System.out.println(&quot;查询了一个用户&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、需求来了，现在我们需要增加一个日志功能，怎么实现！</p><ul><li>思路1 ：在实现类上增加代码 【麻烦！】</li><li>思路2：使用代理来做，能够不改变原来的业务情况下，实现此功能就是最好的了！</li></ul><p>4、设置一个代理类来处理日志！代理角色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//代理角色，在这里面增加日志的实现</span><br><span class="line">public class UserServiceProxy implements UserService &#123;</span><br><span class="line">   private UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">   public void setUserService(UserServiceImpl userService) &#123;</span><br><span class="line">       this.userService = userService;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public void add() &#123;</span><br><span class="line">       log(&quot;add&quot;);</span><br><span class="line">       userService.add();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public void delete() &#123;</span><br><span class="line">       log(&quot;delete&quot;);</span><br><span class="line">       userService.delete();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public void update() &#123;</span><br><span class="line">       log(&quot;update&quot;);</span><br><span class="line">       userService.update();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public void query() &#123;</span><br><span class="line">       log(&quot;query&quot;);</span><br><span class="line">       userService.query();</span><br><span class="line">  &#125;</span><br><span class="line">   //日志方法</span><br><span class="line">   public void log(String msg)&#123;</span><br><span class="line">       System.out.println(&quot;执行了&quot;+msg+&quot;方法&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、测试访问类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       //真实业务</span><br><span class="line">       UserServiceImpl userService = new UserServiceImpl();</span><br><span class="line">       //代理类</span><br><span class="line">       UserServiceProxy proxy = new UserServiceProxy();</span><br><span class="line">       //使用代理类实现日志功能！</span><br><span class="line">       proxy.setUserService(userService);</span><br><span class="line"></span><br><span class="line">       proxy.add();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，到了现在代理模式大家应该都没有什么问题了，重点大家需要理解其中的思想；</p><p>我们在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想</p><p>聊聊AOP：纵向开发，横向开发</p><p><img src="/../UpPictures/SpringPictures/image-20240321163738766.png" alt="image-20240321163738766"></p><blockquote><p> &#x3D;&#x3D;动态代理&#x3D;&#x3D;</p></blockquote><ul><li><p>动态代理的角色和静态代理的一样 .</p></li><li><p><strong>动态代理</strong>的代理类是<strong>动态生成的</strong> . 静态代理的代理类是我们提前写好的</p></li><li><p>动态代理分为两类 : 一类是基于接口动态代理 , 一类是基于类的动态代理</p><ul><li>基于接口的动态代理—-JDK动态代理【我们这里使用JDK的原生代码来实现，其余的道理都是一样的！】</li><li>基于类的动态代理–cglib</li><li>现在用的比较多的是 javasist 来生成动态代理 . 百度一下javasist</li></ul></li></ul><p><strong>JDK的动态代理需要了解两个类</strong></p><p>核心 : InvocationHandler   和   Proxy  ， 打开JDK帮助文档看看【<a href="https://www.runoob.com/manual/jdk11api/%E3%80%91">https://www.runoob.com/manual/jdk11api/】</a></p><p>【InvocationHandler：调用处理程序】</p><p><img src="/../UpPictures/SpringPictures/image-20240321163757577.png" alt="image-20240321163757577"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object invoke(Object proxy, 方法 method, Object[] args)；</span><br><span class="line">//参数</span><br><span class="line">//proxy - 调用该方法的代理实例</span><br><span class="line">//method -所述方法对应于调用代理实例上的接口方法的实例。方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口。</span><br><span class="line">//args -包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。原始类型的参数包含在适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolean 。</span><br></pre></td></tr></table></figure><p>【Proxy  : 代理】</p><p><img src="/../UpPictures/SpringPictures/image-20240321163811252.png" alt="图片"></p><p><img src="/../UpPictures/SpringPictures/image-20240321163826384.png" alt="image-20240321163826384"></p><p><img src="/../UpPictures/SpringPictures/image-20240321163840242.png" alt="image-20240321163840242"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//生成代理类</span><br><span class="line">public Object getProxy()&#123;</span><br><span class="line">   return Proxy.newProxyInstance(this.getClass().getClassLoader(),</span><br><span class="line">                                 rent.getClass().getInterfaces(),this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码实现</strong> </p><p>抽象角色和真实角色和之前的一样！</p><p>Rent . java 即抽象角色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//抽象角色：租房</span><br><span class="line">public interface Rent &#123;</span><br><span class="line">   public void rent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Host . java 即真实角色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//真实角色: 房东，房东要出租房子</span><br><span class="line">public class Host implements Rent&#123;</span><br><span class="line">   public void rent() &#123;</span><br><span class="line">       System.out.println(&quot;房屋出租&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProxyInvocationHandler. java 即代理角色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//等会我们用这个类，自动生成代理类</span><br><span class="line">public class ProxyInvocationHandler implements InvocationHandler &#123;</span><br><span class="line">   private Rent rent;</span><br><span class="line"></span><br><span class="line">   //被代理的接口</span><br><span class="line">   public void setRent(Rent rent) &#123;</span><br><span class="line">       this.rent = rent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   //生成代理类，重点是第二个参数，获取要代理的抽象角色！之前都是一个角色，现在可以代理一类角色</span><br><span class="line">   public Object getProxy()&#123;</span><br><span class="line">       return Proxy.newProxyInstance(this.getClass().getClassLoader(),</span><br><span class="line">               rent.getClass().getInterfaces(),this);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   // proxy : 代理类 method : 代理类的调用处理程序的方法对象.</span><br><span class="line">   // 处理代理实例上的方法调用并返回结果</span><br><span class="line">   @Override</span><br><span class="line">   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">       seeHouse();</span><br><span class="line">       //动态代理核心：本质利用反射实现！</span><br><span class="line">       Object result = method.invoke(rent, args);</span><br><span class="line">       fare();</span><br><span class="line">       return result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   //看房</span><br><span class="line">   public void seeHouse()&#123;</span><br><span class="line">       System.out.println(&quot;带房客看房&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">   //收中介费</span><br><span class="line">   public void fare()&#123;</span><br><span class="line">       System.out.println(&quot;收中介费&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client . java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//租客</span><br><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       //真实角色</span><br><span class="line">       Host host = new Host();</span><br><span class="line">       //代理实例的调用处理程序</span><br><span class="line">       ProxyInvocationHandler pih = new ProxyInvocationHandler();</span><br><span class="line">       //通过调用程序处理角色来处理我们要调用的接口对象</span><br><span class="line">       pih.setRent(host); //将真实角色放置进去！</span><br><span class="line">       Rent proxy = (Rent)pih.getProxy(); //动态生成对应的代理类！我们并没有写</span><br><span class="line">       proxy.rent();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心：<strong>一个动态代理 , 一般代理某一类业务 , 一个动态代理可以代理多个类，代理的是接口！、</strong></p><blockquote><p>&#x3D;&#x3D;深化理解&#x3D;&#x3D;</p></blockquote><p>我们来使用动态代理实现代理我们后面写的UserService！</p><p>我们也可以编写一个通用的动态代理实现的类！所有的代理对象设置为Object即可！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//等会我们会调用这个类，自动生成代理类</span><br><span class="line">public class ProxyInvocationHandler implements InvocationHandler &#123;</span><br><span class="line">  //被代理的接口</span><br><span class="line">  private Object target;</span><br><span class="line"></span><br><span class="line">   public void setTarget(Object target) &#123;</span><br><span class="line">       this.target = target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   //生成得到代理类</span><br><span class="line">   public Object getProxy()&#123;</span><br><span class="line">       return Proxy.newProxyInstance(this.getClass().getClassLoader(),</span><br><span class="line">               target.getClass().getInterfaces(),this);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   //处理代理实例，并返回结果</span><br><span class="line">   // proxy : 代理类</span><br><span class="line">   // method : 代理类的调用处理程序的方法对象.</span><br><span class="line">   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">       log(method.getName());</span><br><span class="line">       Object result = method.invoke(target, args);</span><br><span class="line">       return result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public void log(String methodName)&#123;</span><br><span class="line">       System.out.println(&quot;执行了&quot;+methodName+&quot;方法&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       //真实对象</span><br><span class="line">       UserServiceImpl userService = new UserServiceImpl();</span><br><span class="line">       //代理角色，不存在，代理对象的调用处理程序</span><br><span class="line">       ProxyInvocationHandler pih = new ProxyInvocationHandler();</span><br><span class="line">       pih.setTarget(userService); //设置要代理的对象</span><br><span class="line">       UserService proxy = (UserService)pih.getProxy(); //动态生成代理类！</span><br><span class="line">       proxy.delete();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，增删改查，查看结果！</p><blockquote><h5 id="动态代理的好处"><a href="#动态代理的好处" class="headerlink" title="&#x3D;&#x3D;动态代理的好处&#x3D;&#x3D;"></a>&#x3D;&#x3D;动态代理的好处&#x3D;&#x3D;</h5></blockquote><p>静态代理有的它都有，静态代理没有的，它也有！</p><ul><li><p>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</p></li><li><p>公共的业务由代理来完成 . 实现了业务的分工 ,</p></li><li><p>公共业务发生扩展时变得更加集中和方便 .</p></li><li><p>一个动态代理类代理的是一个接口 , 一般就是对应的一类业务</p></li><li><p>一个动态代理类可以代理多个类，只要是实现了同一个接口</p></li></ul><h3 id="14-AOP"><a href="#14-AOP" class="headerlink" title="14.AOP"></a><strong>14.AOP</strong></h3><p>上一讲中我们讲解了代理模式，这是AOP的基础，一定要先搞懂它</p><p>那我们接下来就来聊聊AOP吧！</p><blockquote><p>什么是AOP</p></blockquote><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><img src="/../UpPictures/SpringPictures/image-20240321163901984.png" alt="image-20240321163901984"></p><blockquote><p>Aop在Spring中的作用</p></blockquote><p>提供声明式事务；允许用户自定义切面</p><p>以下名词需要了解下：</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li><li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。</li><li>目标（Target）：被通知对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义。</li><li>连接点（JointPoint）：与切入点匹配的执行点。</li></ul><p><img src="/../UpPictures/SpringPictures/image-20240321163917256.png" alt="image-20240321163917256"></p><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><p><img src="/../UpPictures/SpringPictures/image-20240321163929402.png" alt="image-20240321163929402"></p><p>即 Aop 在 不改变原有代码的情况下 , 去增加新的功能 .</p><blockquote><p>使用Spring实现Aop</p></blockquote><p>【重点】使用AOP织入，需要导入一个依赖包！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.9.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>第一种方式</strong>&#x3D;&#x3D;</p><p><strong>通过 Spring API 实现</strong></p><p>首先编写我们的业务接口和实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line"></span><br><span class="line">   public void add();</span><br><span class="line"></span><br><span class="line">   public void delete();</span><br><span class="line"></span><br><span class="line">   public void update();</span><br><span class="line"></span><br><span class="line">   public void search();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public class UserServiceImpl implements UserService&#123;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void add() &#123;</span><br><span class="line">       System.out.println(&quot;增加用户&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void delete() &#123;</span><br><span class="line">       System.out.println(&quot;删除用户&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void update() &#123;</span><br><span class="line">       System.out.println(&quot;更新用户&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void search() &#123;</span><br><span class="line">       System.out.println(&quot;查询用户&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后去写我们的增强类 , 我们编写两个 , 一个前置增强 一个后置增强</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Log implements MethodBeforeAdvice &#123;</span><br><span class="line"></span><br><span class="line">   //method : 要执行的目标对象的方法</span><br><span class="line">   //objects : 被调用的方法的参数</span><br><span class="line">   //Object : 目标对象</span><br><span class="line">   @Override</span><br><span class="line">   public void before(Method method, Object[] objects, Object o) throws Throwable &#123;</span><br><span class="line">       System.out.println( o.getClass().getName() + &quot;的&quot; + method.getName() + &quot;方法被执行了&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class AfterLog implements AfterReturningAdvice &#123;</span><br><span class="line">   //returnValue 返回值</span><br><span class="line">   //method被调用的方法</span><br><span class="line">   //args 被调用的方法的对象的参数</span><br><span class="line">   //target 被调用的目标对象</span><br><span class="line">   @Override</span><br><span class="line">   public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable &#123;</span><br><span class="line">       System.out.println(&quot;执行了&quot; + target.getClass().getName()</span><br><span class="line">       +&quot;的&quot;+method.getName()+&quot;方法,&quot;</span><br><span class="line">       +&quot;返回值：&quot;+returnValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后去spring的文件中注册 , 并实现aop切入实现 , 注意导入约束 .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">      xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">      xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">       http://www.springframework.org/schema/aop</span><br><span class="line">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--注册bean--&gt;</span><br><span class="line">   &lt;bean id=&quot;userService&quot; class=&quot;com.kuang.service.UserServiceImpl&quot;/&gt;</span><br><span class="line">   &lt;bean id=&quot;log&quot; class=&quot;com.kuang.log.Log&quot;/&gt;</span><br><span class="line">   &lt;bean id=&quot;afterLog&quot; class=&quot;com.kuang.log.AfterLog&quot;/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--aop的配置--&gt;</span><br><span class="line">   &lt;aop:config&gt;</span><br><span class="line">       &lt;!--切入点 expression:表达式匹配要执行的方法，execution(要执行的位置* * * * *)--&gt;</span><br><span class="line">       &lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;/&gt;</span><br><span class="line">       &lt;!--执行环绕; advice-ref执行方法 . pointcut-ref切入点--&gt;</span><br><span class="line">       &lt;aop:advisor advice-ref=&quot;log&quot; pointcut-ref=&quot;pointcut&quot;/&gt;</span><br><span class="line">       &lt;aop:advisor advice-ref=&quot;afterLog&quot; pointcut-ref=&quot;pointcut&quot;/&gt;</span><br><span class="line">   &lt;/aop:config&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MyTest &#123;</span><br><span class="line">   @Test</span><br><span class="line">   public void test()&#123;</span><br><span class="line">       ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">       //动态代理代理的是接口：注意点</span><br><span class="line">       UserService userService = (UserService) context.getBean(&quot;userService&quot;);</span><br><span class="line">       userService.search();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Aop的重要性 : 很重要 . 一定要理解其中的思路 , 主要是思想的理解这一块 .</p><p>Spring的Aop就是将公共的业务 (日志 , 安全等) 和领域业务结合起来 , 当执行领域业务时 , 将会把公共业务加进来 . 实现公共业务的重复利用 . 领域业务更纯粹 , 程序猿专注领域业务 , 其本质还是动态代理 . </p><p>&#x3D;&#x3D;<strong>第二种方式</strong>&#x3D;&#x3D;</p><p><strong>自定义类来实现Aop</strong></p><p>目标业务类不变依旧是userServiceImpl</p><p>第一步 : 写我们自己的一个切入类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class DiyPointcut &#123;</span><br><span class="line"></span><br><span class="line">   public void before()&#123;</span><br><span class="line">       System.out.println(&quot;---------方法执行前---------&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">   public void after()&#123;</span><br><span class="line">       System.out.println(&quot;---------方法执行后---------&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去spring中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--第二种方式自定义实现--&gt;</span><br><span class="line">&lt;!--注册bean--&gt;</span><br><span class="line">&lt;bean id=&quot;diy&quot; class=&quot;com.kuang.config.DiyPointcut&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--aop的配置--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">   &lt;!--第二种方式：使用AOP的标签实现，ref要引用的类--&gt;</span><br><span class="line">   &lt;aop:aspect ref=&quot;diy&quot;&gt;</span><br><span class="line">       &lt;aop:pointcut id=&quot;diyPonitcut&quot; expression=&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;/&gt;</span><br><span class="line">       &lt;aop:before pointcut-ref=&quot;diyPonitcut&quot; method=&quot;before&quot;/&gt;</span><br><span class="line">       &lt;aop:after pointcut-ref=&quot;diyPonitcut&quot; method=&quot;after&quot;/&gt;</span><br><span class="line">   &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MyTest &#123;</span><br><span class="line">   @Test</span><br><span class="line">   public void test()&#123;</span><br><span class="line">       ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">       UserService userService = (UserService) context.getBean(&quot;userService&quot;);</span><br><span class="line">       userService.add();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>第三种方式</strong>&#x3D;&#x3D;</p><p><strong>使用注解实现</strong></p><p>第一步：编写一个注解实现的增强类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.kuang.config;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.After;</span><br><span class="line">import org.aspectj.lang.annotation.Around;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line">@Aspect//标注这个类是一个切面</span><br><span class="line">public class AnnotationPointcut &#123;</span><br><span class="line">   @Before(&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;)</span><br><span class="line">   public void before()&#123;</span><br><span class="line">       System.out.println(&quot;---------方法执行前---------&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   @After(&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;)</span><br><span class="line">   public void after()&#123;</span><br><span class="line">       System.out.println(&quot;---------方法执行后---------&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   //在环绕增增强中，我们可以给定一个参数，代表我们要获取处理切入的点</span><br><span class="line">   @Around(&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;)</span><br><span class="line">   public void around(ProceedingJoinPoint jp) throws Throwable &#123;</span><br><span class="line">       System.out.println(&quot;环绕前&quot;);</span><br><span class="line">       System.out.println(&quot;签名:&quot;+jp.getSignature());</span><br><span class="line">       //执行目标方法proceed</span><br><span class="line">       Object proceed = jp.proceed();</span><br><span class="line">       System.out.println(&quot;环绕后&quot;);</span><br><span class="line">       System.out.println(proceed);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：在Spring配置文件中，注册bean，并增加支持注解的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--第三种方式:注解实现--&gt;</span><br><span class="line">&lt;bean id=&quot;annotationPointcut&quot; class=&quot;com.kuang.config.AnnotationPointcut&quot;/&gt;</span><br><span class="line">&lt;!--开启注解支持--&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy/&gt;</span><br></pre></td></tr></table></figure><p>aop:aspectj-autoproxy：说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过aop命名空间的&lt;aop:aspectj-autoproxy /&gt;声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被&lt;aop:aspectj-autoproxy /&gt;隐藏起来了</span><br><span class="line"></span><br><span class="line">&lt;aop:aspectj-autoproxy /&gt;有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为&lt;aop:aspectj-autoproxy  poxy-target-class=&quot;true&quot;/&gt;时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。</span><br></pre></td></tr></table></figure><h3 id="15-整合MyBatis"><a href="#15-整合MyBatis" class="headerlink" title="15.整合MyBatis"></a><strong>15.整合MyBatis</strong></h3><blockquote><p>&#x3D;&#x3D;步骤&#x3D;&#x3D;</p></blockquote><p>1、导入相关jar包</p><p>junit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>mybatis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>mysql-connector-java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>spring相关：Spring操作数据库的话需要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;5.1.10.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;5.1.10.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>aspectJ AOP 织入器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.9.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>mybatis-spring整合包 【重点】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.0.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>配置Maven静态资源过滤问题！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">   &lt;resources&gt;</span><br><span class="line">       &lt;resource&gt;</span><br><span class="line">           &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">           &lt;includes&gt;</span><br><span class="line">               &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">               &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">           &lt;/includes&gt;</span><br><span class="line">           &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">       &lt;/resource&gt;</span><br><span class="line">   &lt;/resources&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>2、编写配置文件</p><p>3、代码实现</p><blockquote><p>&#x3D;&#x3D;回忆MyBatis&#x3D;&#x3D;</p></blockquote><p><strong>编写pojo实体类</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.kuang.pojo;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">   private int id;  //id</span><br><span class="line">   private String name;   //姓名</span><br><span class="line">   private String pwd;   //密码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现mybatis的配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">       PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">       &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">   &lt;typeAliases&gt;</span><br><span class="line">       &lt;package name=&quot;com.kuang.pojo&quot;/&gt;</span><br><span class="line">   &lt;/typeAliases&gt;</span><br><span class="line"></span><br><span class="line">   &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">       &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">           &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">           &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">               &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">               &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;</span><br><span class="line">               &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">               &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;</span><br><span class="line">           &lt;/dataSource&gt;</span><br><span class="line">       &lt;/environment&gt;</span><br><span class="line">   &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">   &lt;mappers&gt;</span><br><span class="line">       &lt;package name=&quot;com.kuang.dao&quot;/&gt;</span><br><span class="line">   &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><strong>UserDao接口编写</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line">   public List&lt;User&gt; selectUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口对应的Mapper映射文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">       PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">       &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.kuang.dao.UserMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;select id=&quot;selectUser&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">    select * from user</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectUser() throws IOException &#123;</span><br><span class="line"></span><br><span class="line">   String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line">   InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">   SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">   SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">   UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line">   for (User user: userList)&#123;</span><br><span class="line">       System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;MyBatis-Spring学习&#x3D;&#x3D;</p></blockquote><p>引入Spring之前需要了解mybatis-spring包中的一些重要类；</p><p><a href="http://www.mybatis.org/spring/zh/index.html">http://www.mybatis.org/spring/zh/index.html</a></p><p><img src="/../UpPictures/SpringPictures/image-20240321164002010.png" alt="image-20240321164002010"></p><p><strong>什么是 MyBatis-Spring？</strong></p><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。</p><p><strong>知识基础</strong></p><p>在开始使用 MyBatis-Spring 之前，你需要先熟悉 Spring 和 MyBatis 这两个框架和有关它们的术语。这很重要</p><p>MyBatis-Spring 需要以下版本：</p><table><thead><tr><th align="left">MyBatis-Spring</th><th align="left">MyBatis</th><th align="left">Spring 框架</th><th align="left">Spring Batch</th><th align="left">Java</th></tr></thead><tbody><tr><td align="left">2.0</td><td align="left">3.5+</td><td align="left">5.0+</td><td align="left">4.0+</td><td align="left">Java 8+</td></tr><tr><td align="left">1.3</td><td align="left">3.4+</td><td align="left">3.2.2+</td><td align="left">2.1+</td><td align="left">Java 6+</td></tr></tbody></table><p>如果使用 Maven 作为构建工具，仅需要在 pom.xml 中加入以下代码即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.0.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：一个 SqlSessionFactory 和至少一个数据映射器类。</p><p>在 MyBatis-Spring 中，可使用SqlSessionFactoryBean来创建 SqlSessionFactory。要配置这个工厂 bean，只需要把下面代码放在 Spring 的 XML 配置文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line"> &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>注意：SqlSessionFactory需要一个 DataSource（数据源）。这可以是任意的 DataSource，只需要和配置其它 Spring 数据库连接一样配置它就可以了。</p><p>在基础的 MyBatis 用法中，是通过 SqlSessionFactoryBuilder 来创建 SqlSessionFactory 的。而在 MyBatis-Spring 中，则使用 SqlSessionFactoryBean 来创建。</p><p>在 MyBatis 中，你可以使用 SqlSessionFactory 来创建 SqlSession。一旦你获得一个 session 之后，你可以使用它来执行映射了的语句，提交或回滚连接，最后，当不再需要它的时候，你可以关闭 session。</p><p>SqlSessionFactory有一个唯一的必要属性：用于 JDBC 的 DataSource。这可以是任意的 DataSource 对象，它的配置方法和其它 Spring 数据库连接是一样的。</p><p>一个常用的属性是 configLocation，它用来指定 MyBatis 的 XML 配置文件路径。它在需要修改 MyBatis 的基础配置非常有用。通常，基础配置指的是 &lt; settings&gt; 或 &lt; typeAliases&gt;元素。</p><p>需要注意的是，这个配置文件并不需要是一个完整的 MyBatis 配置。确切地说，任何环境配置（<environments>），数据源（<DataSource>）和 MyBatis 的事务管理器（<transactionManager>）都会被忽略。SqlSessionFactoryBean 会创建它自有的 MyBatis 环境配置（Environment），并按要求设置自定义环境的值。</p><p>SqlSessionTemplate 是 MyBatis-Spring 的核心。作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。</p><p>模板可以参与到 Spring 的事务管理中，并且由于其是线程安全的，可以供多个映射器类使用，你应该总是用 SqlSessionTemplate 来替换 MyBatis 默认的 DefaultSqlSession 实现。在同一应用程序中的不同类之间混杂使用可能会引起数据一致性的问题。</p><p>可以使用 SqlSessionFactory 作为构造方法的参数来创建 SqlSessionTemplate 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;</span><br><span class="line"> &lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>现在，这个 bean 就可以直接注入到你的 DAO bean 中了。你需要在你的 bean 中添加一个 SqlSession 属性，就像下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line"></span><br><span class="line"> private SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line"> public void setSqlSession(SqlSession sqlSession) &#123;</span><br><span class="line">   this.sqlSession = sqlSession;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> public User getUser(String userId) &#123;</span><br><span class="line">   return sqlSession.getMapper...;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按下面这样，注入 SqlSessionTemplate：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userDao&quot; class=&quot;org.mybatis.spring.sample.dao.UserDaoImpl&quot;&gt;</span><br><span class="line"> &lt;property name=&quot;sqlSession&quot; ref=&quot;sqlSession&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;整合实现一&#x3D;&#x3D;</p></blockquote><p>1、引入Spring配置文件beans.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">      xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br></pre></td></tr></table></figure><p>2、配置数据源替换mybaits的数据源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置数据源：数据源有非常多，可以使用第三方的，也可使使用Spring的</span><br><span class="line">    我们这里使用Spring提供的JDBC：&quot;org.springframework.jdbc.datasource</span><br><span class="line">--&gt;</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">   &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">   &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;</span><br><span class="line">   &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">   &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>3、配置SqlSessionFactory，关联MyBatis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置SqlSessionFactory--&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">   &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">   &lt;!--关联Mybatis--&gt;</span><br><span class="line">   &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;</span><br><span class="line">   &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/kuang/dao/*.xml&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>4、注册sqlSessionTemplate，关联sqlSessionFactory；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注册sqlSessionTemplate：就是我们使用的sqlSession , 关联sqlSessionFactory--&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;</span><br><span class="line">   &lt;!--利用构造器注入，因为它没有set方法--&gt;</span><br><span class="line">   &lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>5、增加Dao接口的实现类；私有化sqlSessionTemplate</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl implements UserMapper &#123;</span><br><span class="line"></span><br><span class="line">   //sqlSession不用我们自己创建了，Spring来管理</span><br><span class="line">   //我们所有的操作，都使用sqlSession来执行，在原来，现在都使用sqlSessionTemplate</span><br><span class="line">   private SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">   public void setSqlSession(SqlSessionTemplate sqlSession) &#123;</span><br><span class="line">       this.sqlSession = sqlSession;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public List&lt;User&gt; selectUser() &#123;</span><br><span class="line">       UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">       return mapper.selectUser();</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、注册bean实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userDao&quot; class=&quot;com.kuang.dao.UserDaoImpl&quot;&gt;</span><br><span class="line">   &lt;property name=&quot;sqlSession&quot; ref=&quot;sqlSession&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>7、测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> @Test</span><br><span class="line"> public void test2()&#123;</span><br><span class="line">     ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">     UserMapper mapper = (UserMapper) context.getBean(&quot;userDao&quot;);</span><br><span class="line">     List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">     System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果成功输出！现在我们的Mybatis配置文件的状态！发现都可以被Spring整合！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">       PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">       &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">   &lt;typeAliases&gt;</span><br><span class="line">       &lt;package name=&quot;com.kuang.pojo&quot;/&gt;</span><br><span class="line">   &lt;/typeAliases&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;整合实现二&#x3D;&#x3D;</p></blockquote><p>mybatis-spring1.2.3版以上的才有这个 .</p><p>官方文档截图 :</p><p>dao继承Support类 , 直接利用 getSqlSession() 获得 , 然后直接注入SqlSessionFactory . 比起方式1 , 不需要管理SqlSessionTemplate , 而且对事务的支持更加友好 . 可跟踪源码查看</p><p><img src="/../UpPictures/SpringPictures/image-20240321164020429.png" alt="image-20240321164020429"></p><p>测试：</p><p>1、将我们上面写的UserDaoImpl修改一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl extends SqlSessionDaoSupport implements UserMapper &#123;</span><br><span class="line">   public List&lt;User&gt; selectUser() &#123;</span><br><span class="line">       UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">       return mapper.selectUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、修改bean的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userDao&quot; class=&quot;com.kuang.dao.UserDaoImpl&quot;&gt;</span><br><span class="line">   &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">   ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">   UserMapper mapper = (UserMapper) context.getBean(&quot;userDao&quot;);</span><br><span class="line">   List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">   System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结 : 整合到spring以后可以完全不要mybatis的配置文件，除了这些方式可以实现整合之外，我们还可以使用注解来实现，这个等我们后面学习SpringBoot的时候还会测试整合！</strong></p><h3 id="16-声明式事务"><a href="#16-声明式事务" class="headerlink" title="16.声明式事务"></a><strong>16.声明式事务</strong></h3><blockquote><p> &#x3D;&#x3D;回顾事务&#x3D;&#x3D;</p></blockquote><ul><li><p>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！</p></li><li><p>事务管理是企业级应用程序开发中必备技术，用来确保数据的完整性和一致性。</p></li><li><p>事务就是把一系列的动作当成一个独立的工作单元，这些动作要么全部完成，要么全部不起作用。</p></li></ul><p><strong>事务四个属性ACID</strong></p><ol><li>原子性（atomicity）</li></ol><ul><li>事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用</li></ul><ol start="2"><li>一致性（consistency）</li></ol><ul><li>一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中</li></ul><ol start="3"><li>隔离性（isolation）</li></ol><ul><li>可能多个事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏</li></ul><ol start="4"><li>持久性（durability）</li></ol><ul><li>事务一旦完成，无论系统发生什么错误，结果都不会受到影响。通常情况下，事务的结果被写到持久化存储器中</li></ul><blockquote><p>&#x3D;&#x3D;测试&#x3D;&#x3D;</p></blockquote><p>将上面的代码拷贝到一个新项目中</p><p>在之前的案例中，我们给userDao接口新增两个方法，删除和增加用户；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//添加一个用户</span><br><span class="line">int addUser(User user);</span><br><span class="line"></span><br><span class="line">//根据id删除用户</span><br><span class="line">int deleteUser(int id);</span><br></pre></td></tr></table></figure><p>mapper文件，我们故意把 deletes 写错，测试！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;addUser&quot; parameterType=&quot;com.kuang.pojo.User&quot;&gt;</span><br><span class="line">insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">&lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">deletes from user where id = #&#123;id&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><p>编写接口的实现类，在实现类中，我们去操作一波</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl extends SqlSessionDaoSupport implements UserMapper &#123;</span><br><span class="line"></span><br><span class="line">   //增加一些操作</span><br><span class="line">   public List&lt;User&gt; selectUser() &#123;</span><br><span class="line">       User user = new User(4,&quot;小明&quot;,&quot;123456&quot;);</span><br><span class="line">       UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">       mapper.addUser(user);</span><br><span class="line">       mapper.deleteUser(4);</span><br><span class="line">       return mapper.selectUser();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   //新增</span><br><span class="line">   public int addUser(User user) &#123;</span><br><span class="line">       UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">       return mapper.addUser(user);</span><br><span class="line">  &#125;</span><br><span class="line">   //删除</span><br><span class="line">   public int deleteUser(int id) &#123;</span><br><span class="line">       UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">       return mapper.deleteUser(id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">   ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">   UserMapper mapper = (UserMapper) context.getBean(&quot;userDao&quot;);</span><br><span class="line">   List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">   System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错：sql异常，delete写错了</p><p>结果 ：插入成功！</p><p>没有进行事务的管理；我们想让他们都成功才成功，有一个失败，就都失败，我们就应该需要<strong>事务！</strong></p><p>以前我们都需要自己手动管理事务，十分麻烦！</p><p>但是Spring给我们提供了事务管理，我们只需要配置即可；</p><blockquote><p>&#x3D;&#x3D;Spring中的事务管理&#x3D;&#x3D;</p></blockquote><p>Spring在不同的事务管理API之上定义了一个抽象层，使得开发人员不必了解底层的事务管理API就可以使用Spring的事务管理机制。Spring支持编程式事务管理和声明式的事务管理。</p><p><strong>编程式事务管理</strong></p><ul><li>将事务管理代码嵌到业务方法中来控制事务的提交和回滚</li><li>缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码</li></ul><p><strong>声明式事务管理</strong></p><ul><li>一般情况下比编程式事务好用。</li><li>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。</li><li>将事务管理作为横切关注点，通过aop方法模块化。Spring中通过Spring AOP框架支持声明式事务管理。</li></ul><p><strong>使用Spring管理事务，注意头文件的约束导入 : tx</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>事务管理器</strong></p><ul><li>无论使用Spring的哪种事务管理策略（编程式或者声明式）事务管理器都是必须的。</li><li>就是 Spring的核心事务管理抽象，管理封装了一组独立于技术的方法。</li></ul><p><strong>JDBC事务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><strong>配置好事务管理器后我们需要去配置事务的通知</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置事务通知--&gt;</span><br><span class="line">&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">   &lt;tx:attributes&gt;</span><br><span class="line">       &lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--&gt;</span><br><span class="line">       &lt;tx:method name=&quot;add&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">       &lt;tx:method name=&quot;delete&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">       &lt;tx:method name=&quot;update&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">       &lt;tx:method name=&quot;search*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">       &lt;tx:method name=&quot;get&quot; read-only=&quot;true&quot;/&gt;</span><br><span class="line">       &lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">   &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure><p><strong>spring事务传播特性：</strong></p><p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：</p><ul><li>propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li><li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li><li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li><li>propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。</li><li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li><li>propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作</li></ul><p>Spring 默认的事务传播行为是 PROPAGATION_REQUIRED，它适合于绝大多数的情况。</p><p>假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用链：Service1#method1()-&gt;Service2#method2()-&gt;Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。</p><p>就好比，我们刚才的几个方法存在调用，所以会被放在一组事务当中！</p><p><strong>配置AOP</strong></p><p>导入aop的头文件！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置aop织入事务--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">   &lt;aop:pointcut id=&quot;txPointcut&quot; expression=&quot;execution(* com.kuang.dao.*.*(..))&quot;/&gt;</span><br><span class="line">   &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointcut&quot;/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><p><strong>进行测试</strong></p><p>删掉刚才插入的数据，再次测试！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">   ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">   UserMapper mapper = (UserMapper) context.getBean(&quot;userDao&quot;);</span><br><span class="line">   List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">   System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;思考问题？&#x3D;&#x3D;</p></blockquote><p>为什么需要配置事务？</p><ul><li>如果不配置，就需要我们手动提交控制事务；</li><li>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云音乐爬虫</title>
      <link href="/posts/24274/"/>
      <url>/posts/24274/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">本程序使用的库为：requests，xpath,selenium,msedge.selenium_tools,</span><br><span class="line">本程序使用的浏览器驱动为edgedriver</span><br><span class="line">请在安装好对应库,和对应浏览器版本的驱动后再使用本程序</span><br><span class="line">filename:网易云spider</span><br><span class="line">author:茶白</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">#xpath方法解析网页</span><br><span class="line"># 我们所提取的元素被包含在 &lt;iframe&gt; 标签内部，这样我们是无法直接进行定位的</span><br><span class="line"># 因为 iframe 会在原有页面中加载另外一个页面，当我们需要获取内嵌页面的元素时，需要先切换到iframe中</span><br><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from msedge.selenium_tools import EdgeOptions</span><br><span class="line">from msedge.selenium_tools import Edge</span><br><span class="line"></span><br><span class="line">url=&quot;https://music.163.com/#/discover/toplist?id=3778678&quot;</span><br><span class="line">headers = &#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span><br><span class="line">                         &#x27;Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.47&#x27;,</span><br><span class="line">           &#x27;accept-encoding&#x27;: &#x27;gzip, deflate, br&#x27;,</span><br><span class="line">           &#x27;accept-language&#x27;: &#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&#x27;&#125;</span><br><span class="line"></span><br><span class="line"># 无头启动 selenium</span><br><span class="line">edge_options = EdgeOptions()</span><br><span class="line">edge_options.use_chromium = True</span><br><span class="line"># 设置无界面模式，也可以添加其它设置</span><br><span class="line">edge_options.add_argument(&#x27;headless&#x27;)</span><br><span class="line">driver = Edge(options=edge_options)</span><br><span class="line">r = driver.get(&#x27;https://music.163.com/#/discover/toplist?id=3778678&#x27;)</span><br><span class="line"></span><br><span class="line">#定义列表用于存储</span><br><span class="line">data = list()</span><br><span class="line">id_list = list()</span><br><span class="line">name_list = list()</span><br><span class="line">music_name_list= list()</span><br><span class="line"></span><br><span class="line"># 切换到iframe中，获取网页源代码</span><br><span class="line">driver.get(url)</span><br><span class="line">driver.switch_to.frame(&#x27;g_iframe&#x27;)</span><br><span class="line">html = driver.page_source</span><br><span class="line"></span><br><span class="line">#用xpath提取id，和name</span><br><span class="line">Html=etree.HTML(html)</span><br><span class="line"># id_lists=Html.xpath(&quot;//a[contains(@href,&#x27;song&#x27;)]&quot;)</span><br><span class="line">id_lists=Html.xpath(&quot;//span[@class=&#x27;txt&#x27;]/a&quot;)</span><br><span class="line">name_lists=Html.xpath(&quot;//span[@class=&#x27;txt&#x27;]/*//b&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 提取到列表的元素类似&lt;Element a at 0x39a9a80&gt;</span><br><span class="line"># 或者类似 Element a at 0x???????，这样的一个值，某种意义上来说，当你打印变量的时候得到的这个值，其实它是一个列表，然后列表中的每一个值都是一个字典</span><br><span class="line">#用以下方法解析</span><br><span class="line"># Element类型是&#x27;lxml.etree._Element&#x27;，某种意义来说同时是一个列表</span><br><span class="line"># 列表的需要使用tag\attrib\text三个不同的属性来获取我们需要的东西</span><br><span class="line"># 变量.tag获取到的是标签名是---字符串</span><br><span class="line"># 变量.attrib获取到的是节点标签a的属性---字典</span><br><span class="line"># 变量.text获取到的是标签文本--字符串</span><br><span class="line">for index in range(len(name_lists)):</span><br><span class="line">    # if (index % 2) == 0:</span><br><span class="line">        name_list.append(name_lists[index].attrib)</span><br><span class="line">for index in range(len(id_lists)):</span><br><span class="line">        data.append(id_lists[index].attrib)</span><br><span class="line">        </span><br><span class="line">#遍历提取出所需要的id和name</span><br><span class="line">for href in data:</span><br><span class="line">    href=href[&#x27;href&#x27;]</span><br><span class="line">    # id = re.findall(&quot;\d&#123;2,&#125;&quot;,href)正则也可以提取id有点小麻烦，有空可以写一下</span><br><span class="line">    id = href[9:]</span><br><span class="line">    mp3_url=&quot;http://music.163.com/song/media/outer/url?id=&#123;&#125;.mp3&quot;.format(id)</span><br><span class="line">    id_list.append(mp3_url)</span><br><span class="line"></span><br><span class="line">for music_name in name_list:</span><br><span class="line">    music_name=music_name[&#x27;title&#x27;]</span><br><span class="line">    music_name_list.append(music_name)</span><br><span class="line"></span><br><span class="line">#开始真正爬取，并下载</span><br><span class="line">i=0</span><br><span class="line">try:</span><br><span class="line">    for url_list in id_list:</span><br><span class="line">        req = requests.get(url_list)</span><br><span class="line">        req = req.content</span><br><span class="line">        with open(&quot;D:\\edge浏览器下载\\wangyiyun\\&#123;&#125;.mp3&quot;.format(music_name_list[i]), &quot;ab&quot;) as mp3:</span><br><span class="line">            mp3.write(req)</span><br><span class="line">            print(music_name_list[i]+&quot;下载成功&quot;)</span><br><span class="line">        i=i+1</span><br><span class="line">except IndexError:</span><br><span class="line">    print(&#x27;下载失败&#x27;)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小说爬虫</title>
      <link href="/posts/40066/"/>
      <url>/posts/40066/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import time,random,os</span><br><span class="line">from tqdm import tqdm</span><br><span class="line">dir_name=&#x27;G:\\python\\xiaoshuospider\\&#x27;</span><br><span class="line">if not os.path.exists(dir_name):</span><br><span class="line">    os.mkdir(dir_name)</span><br><span class="line">def get_content(target):</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36 Edg/100.0.1185.29&#x27;&#125;</span><br><span class="line">    req=requests.get(url=target,headers=headers)</span><br><span class="line">    req.encoding = &#x27;utf-8&#x27;</span><br><span class="line">    html = req.text</span><br><span class="line">    bf = BeautifulSoup(html, &#x27;lxml&#x27;)</span><br><span class="line">    texts=bf.find(&#x27;div&#x27;,id=&#x27;content&#x27;)</span><br><span class="line">    content=texts.text.strip().split(&#x27;\xa0&#x27;*4)</span><br><span class="line">    return content</span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    headers=&#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36 Edg/100.0.1185.29&#x27;&#125;</span><br><span class="line">    server=&#x27;https://www.xinbiquge.org&#x27;</span><br><span class="line">    target=&#x27;https://www.xinbiquge.org/xiaoshuo/dbwq.html&#x27;</span><br><span class="line">    req=requests.get(url=target,headers=headers )</span><br><span class="line">    req.encoding=&#x27;utf-8&#x27;</span><br><span class="line">    html=req.text</span><br><span class="line">    bs=BeautifulSoup(html,&#x27;lxml&#x27;)</span><br><span class="line">    chapters=bs.find(&#x27;div&#x27;,class_=&#x27;listmain&#x27;)</span><br><span class="line">    chapters=chapters.find_all(&#x27;a&#x27;)</span><br><span class="line">    for chapter in tqdm(chapters[15:]):</span><br><span class="line">        chapter_name=chapter.string</span><br><span class="line">        url=server+chapter.get(&#x27;href&#x27;)</span><br><span class="line">        content=get_content(url)</span><br><span class="line">        with open(dir_name+&#x27;无上武道.txt&#x27;,&#x27;a&#x27;,encoding=&#x27;utf_8&#x27;) as f:</span><br><span class="line">            f.write(chapter_name)</span><br><span class="line">            f.write(&#x27;\n&#x27;)</span><br><span class="line">            f.write(&#x27;\n&#x27;.join(content))</span><br><span class="line">            f.write(&#x27;\n&#x27;)</span><br><span class="line">    time.sleep(random.randint(2,5))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度图片爬虫</title>
      <link href="/posts/63815/"/>
      <url>/posts/63815/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#一定要先导入对应的库</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">from tqdm import tqdm</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">from multiprocessing.dummy import Pool as ThreadPool</span><br><span class="line">headers = &#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36 Edg/100.0.1185.29&#x27;&#125;</span><br><span class="line">link=[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">word = input(&quot;你想要谁的照片？&quot;)</span><br><span class="line">dir=&quot;D:\\&#123;&#125;&quot;.format(word)  #这里可自定义存储路径</span><br><span class="line">if not os.path.exists(dir):</span><br><span class="line">  os.makedirs(dir)</span><br><span class="line">else:</span><br><span class="line">  os.rmdir(dir)</span><br><span class="line">  os.makedirs(dir)</span><br><span class="line">number=input(&quot;你想要多少张?&quot;)</span><br><span class="line">pn=int(int(number)/30)+1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for n in tqdm(range(0,pn)):</span><br><span class="line"> req = requests.get(url=&quot;https://image.baidu.com/search/acjson?tn=resultjson_com&amp;logid=6398918073314583411&amp;ipn=rj&amp;ct=201326592&amp;is=&amp;fp=result&amp;fr=&amp;word=&#123;&#125;&amp;cl=2&amp;lm=-1&amp;&quot;</span><br><span class="line">                        &quot;ie=utf-8&amp;oe=utf-8&amp;adpicid=&amp;st=-1&amp;z=&amp;ic=0&amp;hd=&amp;latest=&amp;copyright=&amp;s=&amp;se=&amp;tab=&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;qc=&amp;nc=1&amp;expermode=&amp;nojc=&amp;isAsync=&amp;&quot;</span><br><span class="line">                        &quot;pn=&#123;&#125;&amp;rn=30&amp;gsm=1e&amp;1655966698463=&quot;.format(word,n*30), headers=headers)</span><br><span class="line"> html = req.text</span><br><span class="line"></span><br><span class="line"> pattern = re.compile(&#x27;&quot;thumbURL&quot;:&quot;(.*?)&quot;&#x27;, re.S)</span><br><span class="line"> img_link_lists = pattern.findall(html)</span><br><span class="line"> for img_link_list in img_link_lists:</span><br><span class="line">  link.append(img_link_list)</span><br><span class="line">i=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def downvideo(target_url):</span><br><span class="line">     global i</span><br><span class="line">     filename = &#x27;&#123;&#125;.jpg&#x27;.format(i)</span><br><span class="line">     i += 1</span><br><span class="line">     with open(&quot;&#123;&#125;\\&#123;&#125;&quot;.format(dir,filename),&quot;wb&quot;) as pic:</span><br><span class="line">        r = requests.get(url=target_url, headers=headers).content</span><br><span class="line">        pic.write(r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time1=time.time()</span><br><span class="line">pool=ThreadPool(10)</span><br><span class="line">results=pool.map(downvideo, [target_url for target_url in link[0:int(number)]],chunksize=1)</span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br><span class="line">time2=time.time()</span><br><span class="line">print(&quot;计算用时:&quot;,time2-time1)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫画爬虫</title>
      <link href="/posts/8197/"/>
      <url>/posts/8197/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import os</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import re</span><br><span class="line">from tqdm import tqdm</span><br><span class="line">from contextlib import closing</span><br><span class="line">import time</span><br><span class="line">#创建保存目录</span><br><span class="line">save_dir=&#x27;G:\python\manhuaspider\灵虚游记&#x27;</span><br><span class="line">if save_dir not in os.listdir(&#x27;./&#x27;):</span><br><span class="line">    os.mkdir(save_dir)</span><br><span class="line">target_url=&quot;https://www.dmzj.com/info/lingxuyouji.html&quot;</span><br><span class="line">#获取漫画章节链接和章节名</span><br><span class="line">r=requests.get(url=target_url)</span><br><span class="line">bs=BeautifulSoup(r.text,&#x27;lxml&#x27;)#解析数据</span><br><span class="line">list_con_li=bs.find(&#x27;ul&#x27;,class_=&quot;list_con_li&quot;)</span><br><span class="line">comic_list=list_con_li.find_all(&#x27;a&#x27;)</span><br><span class="line">chapter_names=[]</span><br><span class="line">chapter_urls=[]</span><br><span class="line">for comic in comic_list:</span><br><span class="line">    href=comic.get(&#x27;href&#x27;)</span><br><span class="line">    name=comic.text</span><br><span class="line">    chapter_names.insert(0,name)</span><br><span class="line">    chapter_urls.insert(0,href)</span><br><span class="line">    #下载漫画</span><br><span class="line">for i,url in enumerate(tqdm(chapter_urls)):</span><br><span class="line">    download_header=&#123;</span><br><span class="line">        &#x27;Referer&#x27;:url</span><br><span class="line">    &#125;</span><br><span class="line">    name=chapter_names[i]</span><br><span class="line">    #去掉.</span><br><span class="line">    while &#x27;.&#x27; in name:</span><br><span class="line">        name=name.replace(&#x27;.&#x27;,&#x27;&#x27;)</span><br><span class="line">    chapter_save_dir=os.path.join(save_dir,name)</span><br><span class="line">    if name not in os.listdir(save_dir):</span><br><span class="line">        os.mkdir(chapter_save_dir)</span><br><span class="line">        r = requests.get(url=url)  # 向服务器发起GET请求</span><br><span class="line">        html = BeautifulSoup(r.text, &#x27;lxml&#x27;)  # 解析数据</span><br><span class="line">        script_info = html.script  # html中所有script信息</span><br><span class="line">        pics = re.findall(&#x27;\d&#123;13,14&#125;&#x27;, str(script_info))  # 返回str(scriot_info)中和\d&#123;13.14&#125;相同的值，也就是返回13，14位的整数</span><br><span class="line">        for idx, pic in enumerate(pics):</span><br><span class="line">            if len(pic) == 13:</span><br><span class="line">                pics[idx] = pic + &#x27;0&#x27;</span><br><span class="line">        pics = sorted(pics, key=lambda x: int(x))</span><br><span class="line">        chapterpic_hou=re.findall(&#x27;\|(\d&#123;6&#125;)\|&#x27;,str(script_info)) [0]</span><br><span class="line">        chapterpic_qian = re.findall(&#x27;\|(\d&#123;5&#125;)\|&#x27;, str(script_info)) [0]</span><br><span class="line">        for j,pic in enumerate(pics):  # 遍历得到所有的13，14位数字</span><br><span class="line">            if pic[-1] == &#x27;0&#x27;:</span><br><span class="line">                url = &#x27;https://images.dmzj.com/img/chapterpic/&#x27; + chapterpic_qian + &#x27;/&#x27; + chapterpic_hou + &#x27;/&#x27; + pic[:-1] + &#x27;.jpg&#x27;</span><br><span class="line">            else:</span><br><span class="line">                url = &#x27;https://images.dmzj.com/img/chapterpic/&#x27; + chapterpic_qian + &#x27;/&#x27; + chapterpic_hou + &#x27;/&#x27;+ pic + &#x27;.jpg&#x27;</span><br><span class="line">            pic_name=&#x27;%03d.jpg&#x27; % (j+1)</span><br><span class="line">            pic_save_path=os.path.join(chapter_save_dir,pic_name)</span><br><span class="line">            with closing(requests.get(url,headers=download_header,stream=True)) as response:</span><br><span class="line">                chunk_size=1024</span><br><span class="line">                content_size=int(response.headers[&#x27;content-length&#x27;])</span><br><span class="line">                if response.status_code==200:</span><br><span class="line">                    with open(pic_save_path,&quot;wb&quot;) as file:</span><br><span class="line">                        for data in response.iter_content(chunk_size=chunk_size):</span><br><span class="line">                            file.write(data)</span><br><span class="line">                else:</span><br><span class="line">                    print(&#x27;链接异常&#x27;)</span><br><span class="line">        time.sleep(10)#爬虫休眠时间</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频爬虫</title>
      <link href="/posts/8009/"/>
      <url>/posts/8009/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">本程序所用的库为requests,selenium,re,Beautifulsoup,ffmpy3,lxml库和edgedriver浏览器驱动（需安装对应浏览器版本的）以及ffmpeg</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.edge.options import Options</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">import re</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import ffmpy3</span><br><span class="line">from multiprocessing.dummy import Pool as ThreadPool</span><br><span class="line"></span><br><span class="line">#定义列表用于下边获取信息存储</span><br><span class="line">url_list=list()</span><br><span class="line">URL_list=list()</span><br><span class="line">name_list=list()</span><br><span class="line">m3u8_list=list()</span><br><span class="line"></span><br><span class="line">sever=&#x27;https://zxzj.vip/detail/3220.html&#x27;</span><br><span class="line">headers = &#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span><br><span class="line">                         &#x27;Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.47&#x27;,</span><br><span class="line">           &#x27;accept-encoding&#x27;: &#x27;gzip, deflate, br&#x27;,</span><br><span class="line">           &#x27;accept-language&#x27;: &#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&#x27;&#125;</span><br><span class="line"></span><br><span class="line">req=requests.get(sever,headers)</span><br><span class="line">HTML=etree.HTML(req.text)</span><br><span class="line">url_lists=HTML.xpath(&quot;//ul[@class=&#x27;stui-content__playlist clearfix&#x27;]//li//a[1]&quot;)</span><br><span class="line">for index in range(len(url_lists)):</span><br><span class="line">        url_list.append(url_lists[index].attrib)</span><br><span class="line">        name_list.append(url_lists[index].text)</span><br><span class="line"></span><br><span class="line">for href in url_list[0:10]:</span><br><span class="line">    href=href[&#x27;href&#x27;]</span><br><span class="line">    id=&quot;https://zxzj.vip&#123;&#125;&quot;.format(href)</span><br><span class="line">    URL_list.append(id)</span><br><span class="line"></span><br><span class="line">edge_options = Options()</span><br><span class="line"># 使用无头模式</span><br><span class="line">edge_options.add_argument(&#x27;-headless&#x27;)</span><br><span class="line"># 将参数传给浏览器</span><br><span class="line">driver = webdriver.Edge(options=edge_options)</span><br><span class="line"></span><br><span class="line">#注意需要获取的内容在iframe里边，我们不能直接获得</span><br><span class="line">for URL in URL_list:</span><br><span class="line">    # 启动浏览器</span><br><span class="line">    # 切换到iframe中，获取网页源代码</span><br><span class="line">    driver.get(URL)</span><br><span class="line">#selenium升级到4.xxx版本后新语法，注意区别老版本语法</span><br><span class="line">    iframe = driver.find_element(By.XPATH, &quot;//td//*&quot;)</span><br><span class="line">    driver.switch_to.frame(iframe)</span><br><span class="line">    html = driver.page_source</span><br><span class="line">    Html = BeautifulSoup(html, &#x27;lxml&#x27;)</span><br><span class="line">    m3u8 = re.findall(&#x27;https.*?.m3u8&#x27;,str(html))</span><br><span class="line">    m3u8_list.append(m3u8[0])</span><br><span class="line"></span><br><span class="line"># 关闭浏览器</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def downVideo(i):</span><br><span class="line">    dir=&#x27;&#123;&#125;.mp4&#x27;.format(name_list[i])</span><br><span class="line">    ffmpy3.FFmpeg(inputs=&#123; m3u8_list[i]: None&#125;, outputs=&#123;dir: None&#125;).run()</span><br><span class="line"></span><br><span class="line"># 开10个线程池</span><br><span class="line">pool=ThreadPool(10)</span><br><span class="line">data=[0,1,2,3,4,5,6,7,8,9]</span><br><span class="line">results=pool.map(downVideo, data)</span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc</title>
      <link href="/posts/2740/"/>
      <url>/posts/2740/</url>
      
        <content type="html"><![CDATA[<h3 id="1-SpringMVC的引言"><a href="#1-SpringMVC的引言" class="headerlink" title="1.SpringMVC的引言"></a>1.SpringMVC的引言</h3><p>为了使Spring可插入的MVC架构,SpringFrameWork在Spring基础上开发SpringMVC框架,从而在使用Spring进行WEB开发时可以选择使用Spring的SpringMVC框架作为web开发的控制器框架。</p><h3 id="2-为什么是SpringMVC？"><a href="#2-为什么是SpringMVC？" class="headerlink" title="2.为什么是SpringMVC？"></a>2.为什么是SpringMVC？</h3><ul><li>可以和spring框架无缝整合</li><li>运行效率高于struts2框架</li><li>注解式开发更高效</li></ul><h3 id="3-SpringMVC的特点"><a href="#3-SpringMVC的特点" class="headerlink" title="3.SpringMVC的特点"></a>3.SpringMVC的特点</h3><p>SpringMVC <strong>轻量级，典型MVC框架</strong>，在整个MVC架构中充当控制器框架,相对于之前学习的struts2框架,<strong>SpringMVC运行更快,其注解式开发更高效灵活</strong>。</p><p><img src="/../UpPictures/SpringMvcPictures/4768ad4add074769bfe5dae4f848bca8.png" alt="img"></p><h3 id="4-SpringMVC与Struts2运行流程对比"><a href="#4-SpringMVC与Struts2运行流程对比" class="headerlink" title="4.SpringMVC与Struts2运行流程对比"></a>4.SpringMVC与Struts2运行流程对比</h3><p><img src="/../UpPictures/SpringMvcPictures/001331fe89bf4071ab5729b7ea2a93a8.png" alt="img"></p><h3 id="5-第一个环境搭建"><a href="#5-第一个环境搭建" class="headerlink" title="5.第一个环境搭建"></a>5.第一个环境搭建</h3><p><strong>5.1思路</strong></p><p><img src="/../UpPictures/SpringMvcPictures/593470d028bf4abcab96e9380e1e2d73.png" alt="img"></p><p><strong>5.2代码实现</strong></p><p>新建Maven-webapp项目，添加java、resources目录以及test路径下java、resources目录</p><p>引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring核心及相关依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--springmvc核心依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--servlet-api--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--jstl--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写springmvc.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.study.controller&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--    &amp;lt;!&amp;ndash;注册处理器映射器&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &amp;lt;!&amp;ndash;注册处理器适配器&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--【推荐使用】注册处理器映射器、注册处理器适配器，完成参数类型转转、跳转、响应处理...--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入前缀和后缀：前缀和后缀固定写死，制可以根据项目页面目录动态变化--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 这里还要加载springmvc配置文件位置，通过在servlet写init-­param标签，还是contextConfigLocation属性，value用来加载springmvc配置文件。</p></blockquote><p>创建控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> HelloController</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/20 16:01</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@RequestMapping</span> 修饰范围: 用在 类上  和 方法上</span></span><br><span class="line"><span class="comment">      *  1.用在方法上用来给当前方法加入指定的请求路径  相当于之前struts2中action标签的name属性</span></span><br><span class="line"><span class="comment">      *  2.用在类上用来给类中所有方法加入一个统一请求路径在方法访问之前需要加入类上<span class="doctag">@requestMapping</span>的路径</span></span><br><span class="line"><span class="comment">      *    相当于之前struts2中package标签的namespace属性</span></span><br><span class="line"><span class="comment">      *  注意: 一旦类上和方法上同时加入<span class="doctag">@requestMapping</span>访问时必须</span></span><br><span class="line"><span class="comment">      *        /项目名/类上<span class="doctag">@requestMapping</span>的路径/访问方法上<span class="doctag">@requestMapping</span>的路径</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="comment">//访问路径：http://localhost:8888/springmvc01/hello/find</span></span><br><span class="line">     <span class="meta">@RequestMapping(value = &quot;/find&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">find</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="comment">//1.收集数据</span></span><br><span class="line">         <span class="comment">//2.调用业务方法</span></span><br><span class="line">         System.out.println(<span class="string">&quot;调用了find方法&quot;</span>);</span><br><span class="line">         <span class="comment">//3.处理响应</span></span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;<span class="comment">//页面逻辑名 对应 index.jsp</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//访问路径：http://localhost:8888/springmvc01/hello/save</span></span><br><span class="line">     <span class="meta">@RequestMapping(value = &quot;/save&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="comment">//1.收集数据</span></span><br><span class="line">         <span class="comment">//2.调用业务方法</span></span><br><span class="line">         System.out.println(<span class="string">&quot;调用了save方法&quot;</span>);</span><br><span class="line">         <span class="comment">//3.处理响应</span></span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;<span class="comment">//页面逻辑名 对应 index.jsp</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Controller: 该注解用来在类上标识这是一个控制器组件类，并创建这个类实例</p><p>@RequestMapping:</p><p>​修饰范围 : 用在方法或者类上</p><p>​注解作用: 用来指定类以及类中方法的请求路径</p><p>​注解详解 :</p><p>​用在类上相当于struts2中namespace在访问类中方法必须先加入这个路径</p><p>​用在方法上相当于action标签的name属性用来表示访问这个方法的路径</p></blockquote><p>部署项目在tomcat服务器上进行测试</p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324172653946.png" alt="image-20240324172653946"></p><p>启动项目进行测试：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">D:\Software_Development\IDEA_code\apache-tomcat-8.5.78\bin\catalina.bat run</span><br><span class="line">[2022-04-20 04:42:56,645] Artifact springmvc01:war exploded: Waiting for server connection to start artifact deployment...</span><br><span class="line">Using CATALINA_BASE:   &quot;C:\Users\cjn\AppData\Local\JetBrains\IntelliJIdea2020.1\tomcat\Unnamed_springmvc01&quot;</span><br><span class="line">Using CATALINA_HOME:   &quot;D:\Software_Development\IDEA_code\apache-tomcat-8.5.78&quot;</span><br><span class="line">Using CATALINA_TMPDIR: &quot;D:\Software_Development\IDEA_code\apache-tomcat-8.5.78\temp&quot;</span><br><span class="line">Using JRE_HOME:        &quot;D:\Software_Development\JDK&quot;</span><br><span class="line">Using CLASSPATH:       &quot;D:\Software_Development\IDEA_code\apache-tomcat-8.5.78\bin\bootstrap.jar;D:\Software_Development\IDEA_code\apache-tomcat-8.5.78\bin\tomcat-juli.jar&quot;</span><br><span class="line">Using CATALINA_OPTS:   &quot;&quot;</span><br><span class="line">......</span><br><span class="line">Connected to server</span><br><span class="line">[2022-04-20 04:42:58,218] Artifact springmvc01:war exploded: Artifact is being deployed, please wait...</span><br><span class="line">......</span><br><span class="line">[2022-04-20 04:42:59,430] Artifact springmvc01:war exploded: Artifact is deployed successfully</span><br><span class="line">[2022-04-20 04:42:59,430] Artifact springmvc01:war exploded: Deploy took 1,212 milliseconds</span><br><span class="line">...</span><br><span class="line">调用了find方法</span><br><span class="line">调用了save方法</span><br></pre></td></tr></table></figure><p>访问路径 :</p><p><a href="http://localhost:8888/springmvc01/hello/find">http://localhost:8888/springmvc01/hello/find</a></p><p>或</p><p><a href="http://localhost:8888/springmvc01/hello/save">http://localhost:8888/springmvc01/hello/save</a></p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324172738717.png" alt="image-20240324172738717"></p><p>与此同时，控制台输出“调用了xxx方法”</p><h3 id="6-SpringMVC中跳转方式"><a href="#6-SpringMVC中跳转方式" class="headerlink" title="6.SpringMVC中跳转方式"></a>6.SpringMVC中跳转方式</h3><p><strong>6.1 跳转方式</strong></p><ul><li>说明 : 跳转方式有两种,一种是<strong>forward</strong>,一种是<strong>redirect</strong>。<ul><li>forward跳转，一次请求，地址栏不变</li><li>redirect跳转，多次请求，地址栏改变</li></ul></li></ul><p><img src="/../UpPictures/SpringMvcPictures/image-20240324172933887.png" alt="image-20240324172933887"></p><p><strong>6.2 编写代码启动tomcat服务器进行测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@ClassName</span> ForwardAndRedirectController</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/21 10:57</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Controller</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;forwardAndRedirect&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForwardAndRedirectController</span> &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试forward跳转到页面</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/21 11:03</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;测试forward跳转到页面&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 访问路径：http://localhost:8888/springmvc01/forwardAndRedirect/test</span></span><br><span class="line"><span class="comment">           * 输出结果分析：</span></span><br><span class="line"><span class="comment">           *    不写时默认forward跳转，即从controller跳转到页面</span></span><br><span class="line"><span class="comment">           *    地址栏：不变，仍为 http://localhost:8888/springmvc01/forwardAndRedirect/test</span></span><br><span class="line"><span class="comment">           *    jsp页面：index.jsp（即原始默认输出Hello World！的页面）</span></span><br><span class="line"><span class="comment">           *    控制台输出：测试forward跳转到页面</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test1</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试redirect跳转到页面</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/21 11:04</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test1&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;测试redirect跳转到页面&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 访问路径：http://localhost:8888/springmvc01/forwardAndRedirect/test1</span></span><br><span class="line"><span class="comment">           * 输出结果分析：</span></span><br><span class="line"><span class="comment">           *    地址栏：经redirect改变一次，变为 http://localhost:8888/springmvc01/index.jsp</span></span><br><span class="line"><span class="comment">           *    jsp页面：index.jsp</span></span><br><span class="line"><span class="comment">           *    控制台输出：测试redirect跳转到页面</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test2</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试forward跳转到相同controller类中的不同方法</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/21 11:11</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test2&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;测试forward跳转到相同controller类中的不同方法&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;forward:/forwardAndRedirect/test&quot;</span>;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 访问路径：http://localhost:8888/springmvc01/forwardAndRedirect/test2</span></span><br><span class="line"><span class="comment">           * 输出结果分析：</span></span><br><span class="line"><span class="comment">           *    地址栏：不改变，仍为 http://localhost:8888/springmvc01/forwardAndRedirect/test2</span></span><br><span class="line"><span class="comment">           *    jsp页面：index.jsp</span></span><br><span class="line"><span class="comment">           *    控制台输出：测试forward跳转到相同controller类中的不同方法</span></span><br><span class="line"><span class="comment">           *              测试forward跳转到页面</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test3</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试redirect跳转到相同controller类中的不同方法</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/21 11:15</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test3&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;测试redirect跳转到相同controller类中的不同方法&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;redirect:/forwardAndRedirect/test&quot;</span>;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 访问路径：http://localhost:8888/springmvc01/forwardAndRedirect/test3</span></span><br><span class="line"><span class="comment">           * 输出结果分析：</span></span><br><span class="line"><span class="comment">           *    地址栏：经redirect改变一次，变为 http://localhost:8888/springmvc01/forwardAndRedirect/test</span></span><br><span class="line"><span class="comment">           *    jsp页面：index.jsp</span></span><br><span class="line"><span class="comment">           *    控制台输出：测试redirect跳转到相同controller类中的不同方法</span></span><br><span class="line"><span class="comment">           *              测试forward跳转到页面</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test4</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试forward跳转到不同controller类中的不同方法</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/21 11:18</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test4&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;测试forward跳转到不同controller类中的不同方法&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;forward:/hello/find&quot;</span>;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 访问路径：http://localhost:8888/springmvc01/forwardAndRedirect/test4</span></span><br><span class="line"><span class="comment">           * 输出结果分析：</span></span><br><span class="line"><span class="comment">           *    地址栏：不改变，仍为 http://localhost:8888/springmvc01/forwardAndRedirect/test4</span></span><br><span class="line"><span class="comment">           *    jsp页面：index.jsp</span></span><br><span class="line"><span class="comment">           *    控制台输出：测试forward跳转到不同controller类中的不同方法</span></span><br><span class="line"><span class="comment">           *              调用了find方法</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test5</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试redirect跳转到不同controller类中的不同方法</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/21 11:24</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test5&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;测试redirect跳转到不同controller类中的不同方法&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;redirect:/hello/find&quot;</span>;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 访问路径：http://localhost:8888/springmvc01/forwardAndRedirect/test5</span></span><br><span class="line"><span class="comment">           * 输出结果分析：</span></span><br><span class="line"><span class="comment">           *    地址栏：经redirect改变一次，变为 http://localhost:8888/springmvc01/hello/find</span></span><br><span class="line"><span class="comment">           *    jsp页面：index.jsp</span></span><br><span class="line"><span class="comment">           *    控制台输出：测试redirect跳转到不同controller类中的不同方法</span></span><br><span class="line"><span class="comment">           *              调用了find方法</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>6.3 跳转方式总结</strong></p><p><img src="/../UpPictures/SpringMvcPictures/1d1eb39c96004140809f9744cbd5b8c6.png" alt="img"></p><p>或</p><p><img src="/../UpPictures/SpringMvcPictures/4d972310893d471699f3cb1a912603fe.png" alt="img"></p><h3 id="7-SpringMVC中参数接收"><a href="#7-SpringMVC中参数接收" class="headerlink" title="7. SpringMVC中参数接收"></a>7. SpringMVC中参数接收</h3><blockquote><p>接收参数语法说明：springmvc中使用控制器方法参数来收集客户端的请求参数，因此在接收请求参数时直接在需要的控制器方法中声明即可，springmvc可以自动根据指定类型完成类型的转换操作。</p></blockquote><p><strong>7.1 接收零散类型参数</strong></p><blockquote><p>如: 八种基本类型 + String + 日期类型</p></blockquote><p>a.前台传递参数</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># GET 方式传递参数</span><br><span class="line">http://localhost:8080/springmvc_day1/param/test?name=zhangsan&amp;age=19&amp;sex=true&amp;salary=11.11&amp;bir=2012/12/12</span><br><span class="line">​</span><br><span class="line"># POST 方式传递参数</span><br><span class="line">&lt;h1&gt;测试参数接收&lt;/h1&gt;</span><br><span class="line">&lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/param/test&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    用户名: &lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;  &lt;br&gt;</span><br><span class="line">    年龄:  &lt;input type=&quot;text&quot; name=&quot;age&quot;/&gt;   &lt;br&gt;</span><br><span class="line">    性别:  &lt;input type=&quot;text&quot; name=&quot;sex&quot;&gt;    &lt;br&gt;</span><br><span class="line">    工资:  &lt;input type=&quot;text&quot; name=&quot;salary&quot;&gt; &lt;br&gt;</span><br><span class="line">    生日:  &lt;input type=&quot;text&quot; name=&quot;bir&quot;&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>b.后台控制器接收</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/param&quot;)</span><br><span class="line">public class ParamController &#123;</span><br><span class="line">    @RequestMapping(&quot;/test&quot;)</span><br><span class="line">    public String test(String name, Integer age, Boolean sex,Double salary,Date bir)&#123;</span><br><span class="line">        System.out.println(&quot;姓名: &quot;+name);</span><br><span class="line">        System.out.println(&quot;年龄: &quot;+age);</span><br><span class="line">        System.out.println(&quot;性别: &quot;+sex);</span><br><span class="line">        System.out.println(&quot;工资: &quot;+salary);</span><br><span class="line">        System.out.println(&quot;生日: &quot;+bir);</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:springmvc在接收日期类型参数时日期格式必须为yyyy&#x2F;MM&#x2F;dd HH:mm:ss</p></blockquote><p><strong>7.2 接收对象类型参数</strong></p><p>a.前台传递参数</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># GET 方式请求参数传递</span><br><span class="line">        http://localhost:8080/springmvc_day1/param/test1?name=zhangsan&amp;age=19&amp;sex=true&amp;salary=11.11&amp;bir=2012/12/12</span><br><span class="line"></span><br><span class="line"># POST 方式请求参数传递</span><br><span class="line">        &lt;h1&gt;测试对象类型参数接收&lt;/h1&gt;</span><br><span class="line">    &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/param/test1&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        用户名: &lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;  &lt;br&gt;</span><br><span class="line">        年龄:  &lt;input type=&quot;text&quot; name=&quot;age&quot;/&gt;   &lt;br&gt;</span><br><span class="line">        性别:  &lt;input type=&quot;text&quot; name=&quot;sex&quot;&gt;    &lt;br&gt;</span><br><span class="line">        工资:  &lt;input type=&quot;text&quot; name=&quot;salary&quot;&gt; &lt;br&gt;</span><br><span class="line">        生日:  &lt;input type=&quot;text&quot; name=&quot;bir&quot;&gt; &lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意:在接收对象类型参数时和struts2接收不同,springmvc直接根据传递参数名与对象中属性名一致自动封装对象</p></blockquote><p>b.后台控制器接收</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 1.定义对象</span><br><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private Double salary;</span><br><span class="line">    private Boolean sex;</span><br><span class="line">    private Date bir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  2.控制器中接收</span><br><span class="line"> @RequestMapping(&quot;/test1&quot;)</span><br><span class="line">public String test1(User user)&#123;</span><br><span class="line">  System.out.println(&quot;接收的对象: &quot;+user);</span><br><span class="line">  return &quot;index&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7.3 接收数组类型参数</strong></p><p>a.前台传递参数</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># GET 方式请求参数传递</span><br><span class="line">         http://localhost:8080/springmvc_day1/param/test2?names=zhangsan&amp;names=lisi&amp;names=wangwu</span><br><span class="line"> </span><br><span class="line"> # POST 方式请求参数传递</span><br><span class="line">         &lt;h1&gt;测试对象类型参数接收&lt;/h1&gt;</span><br><span class="line">     &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/param/test2&quot; method=&quot;post&quot;&gt;</span><br><span class="line">         爱好: &lt;br&gt;</span><br><span class="line">             看书:  &lt;input type=&quot;checkbox&quot; name=&quot;names&quot;/&gt; </span><br><span class="line">             看电视:&lt;input type=&quot;checkbox&quot; name=&quot;names&quot;/&gt;</span><br><span class="line">             吃饭:  &lt;input type=&quot;checkbox&quot; name=&quot;names&quot;/&gt;</span><br><span class="line">             玩游戏: &lt;input type=&quot;checkbox&quot; name=&quot;names&quot;/&gt;</span><br><span class="line">         &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">     &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>b.后台控制器接收</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/test2&quot;)</span><br><span class="line">public String test2(String[] names)&#123;</span><br><span class="line">  for (String name : names) &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">  &#125;</span><br><span class="line">  return &quot;index&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:接收数组类型数据时前台传递多个key一致自动放入同一个数组中</p></blockquote><p><strong>7.4 接收集合类型参数</strong></p><blockquote><p>说明:springmvc不支持直接将接收集合声明为控制器方法参数进行接收,如果要接收集合类型参数必须使用对象封装要接收接收类型才可以</p></blockquote><p>a.前台传递参数</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># GET 方式请求参数传递</span><br><span class="line">         http://localhost:8080/springmvc_day1/param/test3?lists=zhangsan&amp;lists=lisi&amp;lists=wangwu</span><br><span class="line"> </span><br><span class="line"> # POST 方式请求参数传递</span><br><span class="line">         &lt;h1&gt;测试对象类型参数接收&lt;/h1&gt;</span><br><span class="line">     &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/param/test3&quot; method=&quot;post&quot;&gt;</span><br><span class="line">         爱好: &lt;br&gt;</span><br><span class="line">             看书:  &lt;input type=&quot;checkbox&quot; name=&quot;lists&quot;/&gt; </span><br><span class="line">             看电视:&lt;input type=&quot;checkbox&quot; name=&quot;lists&quot;/&gt;</span><br><span class="line">             吃饭:  &lt;input type=&quot;checkbox&quot; name=&quot;lists&quot;/&gt;</span><br><span class="line">             玩游戏: &lt;input type=&quot;checkbox&quot; name=&quot;lists&quot;/&gt;</span><br><span class="line">         &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">     &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>b.后台控制器接收</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 1.封装接收集合类型对象----&gt;在spring mvc中用来接收集合类型参数</span><br><span class="line"> public class CollectionVO &#123;</span><br><span class="line">     private List&lt;String&gt; lists;</span><br><span class="line"> </span><br><span class="line">     public List&lt;String&gt; getLists() &#123;</span><br><span class="line">         return lists;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public void setLists(List&lt;String&gt; lists) &#123;</span><br><span class="line">         this.lists = lists;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> // 2.控制器中接收集合类型参数</span><br><span class="line"> @RequestMapping(&quot;/test3&quot;)</span><br><span class="line"> public String test3(CollectionVO collectionVO)&#123;</span><br><span class="line">   collectionVO.getLists().forEach(name-&gt; System.out.println(name));</span><br><span class="line">   return &quot;index&quot;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>7.5 代码实测</strong></p><blockquote><p>User</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.entity;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@ClassName</span> User</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/21 15:37</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> String name;</span><br><span class="line">      <span class="keyword">private</span> Integer age;</span><br><span class="line">      <span class="keyword">private</span> Boolean sex;</span><br><span class="line">      <span class="keyword">private</span> Double salary;</span><br><span class="line">      <span class="keyword">private</span> Date bir;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Integer age, Boolean sex, Double salary, Date bir)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.name = name;</span><br><span class="line">          <span class="built_in">this</span>.age = age;</span><br><span class="line">          <span class="built_in">this</span>.sex = sex;</span><br><span class="line">          <span class="built_in">this</span>.salary = salary;</span><br><span class="line">          <span class="built_in">this</span>.bir = bir;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.name = name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> age;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.age = age;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> Boolean <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> sex;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(Boolean sex)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.sex = sex;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> Double <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> salary;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(Double salary)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.salary = salary;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> Date <span class="title function_">getBir</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> bir;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBir</span><span class="params">(Date bir)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.bir = bir;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                  <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                  <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                  <span class="string">&quot;, sex=&quot;</span> + sex +</span><br><span class="line">                  <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                  <span class="string">&quot;, bir=&quot;</span> + bir +</span><br><span class="line">                  <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>CollectionVO</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.vo;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> java.util.List;</span><br><span class="line"> <span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> CollectionVO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> 自定义VO对象</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/21 15:38</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionVO</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> List&lt;String&gt; lists;</span><br><span class="line">     <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getLists</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> lists;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLists</span><span class="params">(List&lt;String&gt; lists)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.lists = lists;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getMaps</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> maps;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.maps = maps;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>ParamController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"> <span class="keyword">import</span> com.study.vo.CollectionVO;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> ParamController</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/21 15:36</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> test</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 用来测试零散类型参数接收</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: name</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: age</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: sex</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: salary</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: bir</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/21 15:44</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String name, Integer age, Boolean sex, Double salary, Date bir)</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;用来测试零散类型参数接收&quot;</span>);</span><br><span class="line">         System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">         System.out.println(<span class="string">&quot;age = &quot;</span> + age);</span><br><span class="line">         System.out.println(<span class="string">&quot;sex = &quot;</span> + sex);</span><br><span class="line">         System.out.println(<span class="string">&quot;salary = &quot;</span> + salary);</span><br><span class="line">         System.out.println(<span class="string">&quot;bir = &quot;</span> + bir);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 访问路径：http://localhost:8888/springmvc01/param/test?name=张三&amp;age=20&amp;sex=true&amp;salary=1234.5&amp;bir=2020/12/12 12:34:56</span></span><br><span class="line"><span class="comment">          * 输出结果：</span></span><br><span class="line"><span class="comment">          *      用来测试零散类型参数接收</span></span><br><span class="line"><span class="comment">          *      name = 张三</span></span><br><span class="line"><span class="comment">          *      age = 20</span></span><br><span class="line"><span class="comment">          *      sex = true</span></span><br><span class="line"><span class="comment">          *      salary = 1234.5</span></span><br><span class="line"><span class="comment">          *      bir = Sat Dec 12 12:34:56 CST 2020</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 注意：</span></span><br><span class="line"><span class="comment">          *      日期默认格式：yyyy/MM/dd HH:mm:ss</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> test1</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 用来测试对象类型的参数接收</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: user</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: name</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/21 15:50</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;test1&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">(User user,String name)</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;用来测试对象类型的参数接收&quot;</span>);</span><br><span class="line">         System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">         System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 访问路径：http://localhost:8888/springmvc01/param/test1?name=张三&amp;age=20&amp;sex=true&amp;salary=1234.5&amp;bir=2020/12/12 12:34:56</span></span><br><span class="line"><span class="comment">          * 输出结果：</span></span><br><span class="line"><span class="comment">          *      用来测试对象类型的参数接收</span></span><br><span class="line"><span class="comment">          *      user = User&#123;name=&#x27;张三&#x27;, age=20, sex=true, salary=1234.5, bir=Sat Dec 12 12:34:56 CST 2020&#125;</span></span><br><span class="line"><span class="comment">          *      name = 张三</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 注意：</span></span><br><span class="line"><span class="comment">          *      此处的User中的name属性和变量name都会赋值</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 总结：</span></span><br><span class="line"><span class="comment">          *      接收对象类型: 也是直接将要接收对象作为控制器方法参数声明</span></span><br><span class="line"><span class="comment">          *      注意:springmvc封装对象时直接根据传递参数key与对象中属性名一致自动封装对象</span></span><br><span class="line"><span class="comment">          *      url提交: http://localhost:8888/springmvc01/param/test1?name=张三&amp;age=20&amp;sex=true&amp;salary=1234.5&amp;bir=2020/12/12 12:34:56</span></span><br><span class="line"><span class="comment">          *      form表单提交:</span></span><br><span class="line"><span class="comment">          *          input  name=&quot;id&quot;</span></span><br><span class="line"><span class="comment">          *          input  name=&quot;name&quot;</span></span><br><span class="line"><span class="comment">          *          input  name=&quot;age&quot;</span></span><br><span class="line"><span class="comment">          *          ....</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> test2</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 用来测试数组类型的参数接收</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: collectionVO</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/21 15:55</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;test2&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">(String[] arrays)</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;用来测试数组类型的参数接收&quot;</span>);</span><br><span class="line">         <span class="keyword">for</span> (String array : arrays) &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;array = &quot;</span> + array);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 访问路径：http://localhost:8888/springmvc01/param/test2?arrays=吃饭&amp;arrays=睡觉&amp;arrays=打豆豆</span></span><br><span class="line"><span class="comment">          * 输出结果：</span></span><br><span class="line"><span class="comment">          *      用来测试数组类型的参数接收</span></span><br><span class="line"><span class="comment">          *      arrays = 吃饭</span></span><br><span class="line"><span class="comment">          *      arrays = 睡觉</span></span><br><span class="line"><span class="comment">          *      arrays = 打豆豆</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 总结：</span></span><br><span class="line"><span class="comment">          *      接收数组: 将要接收数组类型直接声明为方法的形参即可</span></span><br><span class="line"><span class="comment">          *      注意: 保证请求参数多个参数key与声明数组变量名一致,springmvc会自动放入同一个数组中</span></span><br><span class="line"><span class="comment">          *      url提交: http://localhost:8888/springmvc01/param/test2?arrays=吃饭&amp;arrays=睡觉&amp;arrays=打豆豆</span></span><br><span class="line"><span class="comment">          *      form表单提交中多用于checkbox</span></span><br><span class="line"><span class="comment">          *          input   type=&quot;checkbox&quot;  name=&quot;arrays&quot; value=&quot;卖吃饭&quot;</span></span><br><span class="line"><span class="comment">          *          input   type=&quot;checkbox&quot;  name=&quot;arrays&quot; value=&quot;睡觉&quot;</span></span><br><span class="line"><span class="comment">          *          input   type=&quot;checkbox&quot;  name=&quot;qqs&quot; value=&quot;打豆豆&quot;</span></span><br><span class="line"><span class="comment">          *          ....</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> test3</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 用来测试list集合类型参数接收</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: collectionVO </span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.lang.String </span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/21 16:08</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;test3&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">test3</span><span class="params">(CollectionVO collectionVO)</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;用来测试list集合类型参数接收&quot;</span>);</span><br><span class="line">         collectionVO.getLists().forEach(list -&gt; System.out.println(<span class="string">&quot;list = &quot;</span> + list));</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 访问路径：http://localhost:8888/springmvc01/param/test3?lists=吃饭&amp;lists=睡觉&amp;lists=打豆豆</span></span><br><span class="line"><span class="comment">          * 注意：在url中对参数进行赋值的时候要给CollectionVO中的集合赋值而不是collectionVO赋值</span></span><br><span class="line"><span class="comment">          * 输出结果：</span></span><br><span class="line"><span class="comment">          * 用来测试list集合类型参数接收</span></span><br><span class="line"><span class="comment">          *      list = 吃饭</span></span><br><span class="line"><span class="comment">          *      list = 睡觉</span></span><br><span class="line"><span class="comment">          *      list = 打豆豆</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 总结：</span></span><br><span class="line"><span class="comment">          *      springmvc不能直接通过形参列表方式收集集合类型参数</span></span><br><span class="line"><span class="comment">          *      如果要接收集合类型的参数必须将集合放入对象中接收才可以，推荐放入vo对象中接收集合类型，即新创建vo包，包中自定义集合</span></span><br><span class="line"><span class="comment">          *      vo = value object  值对象</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> test4</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 用来测试map集合类型参数接收</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: collectionVO</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/21 16:21</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;test4&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">test4</span><span class="params">(CollectionVO collectionVO)</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;用来测试map集合类型参数接收&quot;</span>);</span><br><span class="line">         collectionVO.getMaps().forEach((k,v)-&gt; System.out.println(<span class="string">&quot;k=&quot;</span> + k+<span class="string">&quot;,v=&quot;</span>+v));</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 访问路径：http://localhost:8888/springmvc01/param/test4?maps[1]=吃饭&amp;maps[2]=睡觉&amp;maps[3]=打豆豆</span></span><br><span class="line"><span class="comment">          * 注意：在url中对参数进行赋值的时候要给CollectionVO中的集合赋值而不是collectionVO赋值</span></span><br><span class="line"><span class="comment">          * 输出结果：</span></span><br><span class="line"><span class="comment">          *      用来测试map集合类型参数接收</span></span><br><span class="line"><span class="comment">          *      k= 1，v= 吃饭</span></span><br><span class="line"><span class="comment">          *      k= 2，v= 睡觉</span></span><br><span class="line"><span class="comment">          *      k= 3，v= 打豆豆</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果map传递参数时出现400错误，如下所示：</p></blockquote><p><img src="/../UpPictures/SpringMvcPictures/ff989c4484d647e88c0b01dedef3fd5e.png" alt="img"></p><p>解决方案：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> 如果测试时出现HTTP状态 400-错误的请求，是因为日志显示请求地址中包含了不合法字符.</span><br><span class="line">tomcat高版本严格按照RFC 3986规范解析地址。该规范只允许包含a-z A-Z 0-9 - _ . ~</span><br><span class="line">以及所有保留字符 ! * ’ ( ) ; : @ &amp; = + $ , / ? # [ ]  </span><br><span class="line">  </span><br><span class="line">解决方案：在使用的tomcat文件夹中找到conf，打开后对server.xml进行编辑，在</span><br><span class="line">        &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">                  connectionTimeout=&quot;20000&quot;</span><br><span class="line">                  redirectPort=&quot;8443&quot;/&gt;</span><br><span class="line">后面加上relaxedPathChars=&quot;|&#123;&#125;[],%&quot; relaxedQueryChars=&quot;|&#123;&#125;[],%&quot;，其余不用修改，即：</span><br><span class="line">        &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">                connectionTimeout=&quot;20000&quot;</span><br><span class="line">                redirectPort=&quot;8443&quot; relaxedPathChars=&quot;|&#123;&#125;[],%&quot; relaxedQueryChars=&quot;|&#123;&#125;[],%&quot;/&gt;</span><br><span class="line">保存后，重启tomcat即可解决。</span><br><span class="line">参考链接：https://blog.51cto.com/u_15196075/2765608</span><br></pre></td></tr></table></figure><p><img src="/../UpPictures/SpringMvcPictures/image-20240324175449385.png" alt="image-20240324175449385"></p><p><img src="/../UpPictures/SpringMvcPictures/ba181e404df14f779b4d85e1cf4e7a48.png" alt="img"></p><p><strong>7.6 接收参数中文乱码解决方案</strong></p><p>param.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">  &lt;!doctype html&gt;</span><br><span class="line">  &lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">      &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">            content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">      &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">      &lt;title&gt;测试参数接收&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">      &lt;h1&gt;测试对象和零散类型参数接收&lt;/h1&gt;</span><br><span class="line">      &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/param/test1&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">          用户姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">          用户年龄：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">          用户性别：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;sex&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">          用户收入：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;salary&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">          用户生日：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bir&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">          &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8888/springmvc01/param.jsp">http://localhost:8888/springmvc01/param.jsp</a></p><p>测试结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">1.英文状态</span><br><span class="line">用来测试对象类型的参数接收</span><br><span class="line">user = User&#123;name=&#x27;xiaosan&#x27;, age=20, sex=false, salary=1000.0, bir=Mon Dec 12 00:00:00 CST 2022&#125;</span><br><span class="line">name = xiaosan</span><br><span class="line"></span><br><span class="line">2.中文状态</span><br><span class="line">用来测试对象类型的参数接收</span><br><span class="line">user = User&#123;name=&#x27;?°?è??&#x27;, age=22, sex=true, salary=800.0, bir=Thu Mar 15 00:00:00 CST 2018&#125;</span><br><span class="line">name = ?°?è??</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>在使用springmvc接收客户端的请求参数的过程中有时会出现中文乱码问题，这是因为springmvc并没有对对象请求参数进行编码控制，如果需要控制需要自行指定。</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 1.针对于GET方式中文乱码解决方案:</span><br><span class="line"> &lt;Connector connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot;/&gt;</span><br><span class="line"> </span><br><span class="line"> # 2.针对POST方式中文乱码解决方案：</span><br><span class="line"> web.xml中配置字符Filter</span><br><span class="line">   &lt;!--配置post请求方式中文乱码的Filter--&gt;</span><br><span class="line">   &lt;filter&gt;</span><br><span class="line">     &lt;filter-name&gt;charset&lt;/filter-name&gt;</span><br><span class="line">     &lt;!--自定义的Filter--&gt;</span><br><span class="line"> &lt;!--    &lt;filter-class&gt;com.study.filter.CharacterEncodingFilter&lt;/filter-class&gt;--&gt;</span><br><span class="line">     &lt;!--spring框架提供的Filter--&gt;</span><br><span class="line">     &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">     &lt;init-param&gt;</span><br><span class="line">       &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">       &lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class="line">     &lt;/init-param&gt;</span><br><span class="line">   &lt;/filter&gt;</span><br><span class="line">   &lt;filter-mapping&gt;</span><br><span class="line">     &lt;filter-name&gt;charset&lt;/filter-name&gt;</span><br><span class="line">     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><p>自定义编码Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">package</span> com.study.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CharacterEncodingFilter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义编码Filter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/22 15:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String encoding;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">this</span>.encoding = filterConfig.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">        System.out.println(encoding);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(encoding);</span><br><span class="line">        servletResponse.setCharacterEncoding(encoding);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p><img src="/../UpPictures/SpringMvcPictures/570f674ae228445e8fb1deea3d1b12bf.png" alt="img"></p><p><strong>7.7 总结</strong></p><p><img src="/../UpPictures/SpringMvcPictures/9abae0f3887346c0ba66f9427453190b.png" alt="img"></p><h3 id="8-SpringMVC中数据传递机制"><a href="#8-SpringMVC中数据传递机制" class="headerlink" title="8.SpringMVC中数据传递机制"></a>8.SpringMVC中数据传递机制</h3><p><strong>8.1 数据传递机制</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1.数据怎么存</span><br><span class="line">    Servlet 作用域             Struts2  作用域        SpringMVC  作用域</span><br><span class="line"># 2.数据怎么取</span><br><span class="line">    Servlet EL表达式           Struts2  EL表达式      SpringMVC  EL表达式</span><br><span class="line"># 3.数据怎么展示      </span><br><span class="line">    Servlet JSTL标签           Struts2  JSTl标签      SpringMVC  JSTL标签</span><br></pre></td></tr></table></figure><p><strong>8.2 使用forward跳转传递数据</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1.使用servlet中原始的request作用域传递数据</span><br><span class="line">    request.setAttribute(&quot;key&quot;,value);</span><br><span class="line"></span><br><span class="line"># 2.使用是springmvc中封装的Model和ModelMap对象(底层对request作用域封装)</span><br><span class="line">    model.addAttribute(key,value);</span><br><span class="line">    modelMap.addAttribute(key,value);</span><br></pre></td></tr></table></figure><p><strong>8.3 使用Redirect跳转传递数据</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1.使用地址栏进行数据传递</span><br><span class="line">    url?name=zhangsan&amp;age=21</span><br><span class="line"></span><br><span class="line"># 2.使用session作用域</span><br><span class="line">    session.setAttribute(key,value);</span><br><span class="line">    session.getAttribute(key);</span><br></pre></td></tr></table></figure><p><strong>8.4 代码测试</strong></p><blockquote><p>AttributeController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> AttributeController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用来测试SpringMVC中的数据传递机制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/22 20:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;attribute&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttributeController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用forward跳转页面数据传递</span></span><br><span class="line"><span class="comment">     * 1.传递零散类型数据</span></span><br><span class="line"><span class="comment">     * 2.传递对象类型数据</span></span><br><span class="line"><span class="comment">     * 3.传递集合类型数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 可以使用request对象进行数据传递，也可以使用model对象进行数据传递，其底层封装的也是request对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Model model,HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="comment">//1.收集参数</span></span><br><span class="line">        <span class="comment">//2.调用业务方法</span></span><br><span class="line">        <span class="comment">//传递零散类型数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;茶白&quot;</span>;</span><br><span class="line">        <span class="comment">//request.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">        <span class="comment">//传递对象类型数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;光头强&quot;</span>,<span class="number">50</span>,<span class="literal">true</span>,<span class="number">12.12</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//request.setAttribute(&quot;user&quot;,user);</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        <span class="comment">//传递集合类型数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;熊大&quot;</span>,<span class="number">30</span>,<span class="literal">true</span>,<span class="number">6.06</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;熊二&quot;</span>,<span class="number">20</span>,<span class="literal">true</span>,<span class="number">3.03</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(user1, user2);</span><br><span class="line">        <span class="comment">//request.setAttribute(&quot;users&quot;,users);</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;attribute&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用redirect跳转传递数据</span></span><br><span class="line"><span class="comment">     * 传递数据的方式有2种：</span></span><br><span class="line"><span class="comment">     * 1.地址栏?拼接数据</span></span><br><span class="line"><span class="comment">     * 2.session对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">//1.收集数据</span></span><br><span class="line">        <span class="comment">//2.调用业务</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小猫&quot;</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小猪&quot;</span>, <span class="number">3</span>, <span class="literal">false</span>, <span class="number">0.1234</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小狗&quot;</span>, <span class="number">4</span>, <span class="literal">false</span>, <span class="number">1.2345</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小兔&quot;</span>, <span class="number">5</span>, <span class="literal">false</span>, <span class="number">2.3456</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(user1, user2);</span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line">        <span class="comment">//3.流程跳转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/attribute.jsp?name=&quot;</span> + URLEncoder.encode(name,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>attribute.jsp</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">          content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;测试数据传递&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;用来测试request作用域传递数据&lt;/h1&gt;</span><br><span class="line">    获取request作用域数据：$&#123;requestScope.name&#125;&lt;br&gt;</span><br><span class="line">    获取request作用域数据：$&#123;name&#125;&lt;br&gt;</span><br><span class="line">    &lt;hr color=<span class="string">&quot;red&quot;</span>&gt;</span><br><span class="line">    name：$&#123;requestScope.user.name&#125;&lt;br&gt;</span><br><span class="line">    age：$&#123;requestScope.user.age&#125;&lt;br&gt;</span><br><span class="line">    sex：$&#123;requestScope.user.sex&#125;&lt;br&gt;</span><br><span class="line">    salary：$&#123;requestScope.user.salary&#125;&lt;br&gt;</span><br><span class="line">    bir：&lt;fmt:formatDate value=<span class="string">&quot;$&#123;requestScope.user.bir&#125;&quot;</span> pattern=<span class="string">&quot;yyyy-MM-dd&quot;</span>/&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.users&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">        name：$&#123;user.name&#125;&lt;br&gt;</span><br><span class="line">        age: $&#123;user.age&#125;&lt;br&gt;</span><br><span class="line">        sex: $&#123;user.sex&#125;&lt;br&gt;</span><br><span class="line">        salary: $&#123;user.salary&#125;&lt;br&gt;</span><br><span class="line">        bir: &lt;fmt:formatDate value=<span class="string">&quot;$&#123;user.bir&#125;&quot;</span>/&gt;&lt;br&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;测试使用redirect跳转传递数据&lt;/h1&gt;</span><br><span class="line">    获取地址栏数据：$&#123;param.name&#125;&lt;br&gt;</span><br><span class="line">    &lt;hr color=<span class="string">&quot;red&quot;</span>&gt;</span><br><span class="line">    name: $&#123;sessionScope.user.name&#125;&lt;br&gt;</span><br><span class="line">    age: $&#123;sessionScope.user.age&#125;&lt;br&gt;</span><br><span class="line">    sex: $&#123;sessionScope.user.sex&#125;&lt;br&gt;</span><br><span class="line">    salary: $&#123;sessionScope.user.salary&#125;&lt;br&gt;</span><br><span class="line">    bir: $&#123;sessionScope.user.bir&#125;&lt;br&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;sessionScope.users&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">        name：$&#123;user.name&#125;&lt;br&gt;</span><br><span class="line">        age: $&#123;user.age&#125;&lt;br&gt;</span><br><span class="line">        sex: $&#123;user.sex&#125;&lt;br&gt;</span><br><span class="line">        salary: $&#123;user.salary&#125;&lt;br&gt;</span><br><span class="line">        bir: &lt;fmt:formatDate value=<span class="string">&quot;$&#123;user.bir&#125;&quot;</span>/&gt;&lt;br&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p>（1）<a href="http://localhost:8888/springmvc01/attribute/test">http://localhost:8888/springmvc01/attribute/test</a></p><p><img src="/../UpPictures/SpringMvcPictures/ce2bfaad50824e7f94883db8f95a364c.png" alt="img"></p><p>  （2）<a href="http://localhost:8888/springmvc01/attribute/test1">http://localhost:8888/springmvc01/attribute/test1</a></p><p><img src="/../UpPictures/SpringMvcPictures/df4c00f87d1f4274b60391181073fc9a.png" alt="img"></p><p><strong>8.5 总结</strong></p><p><img src="/../UpPictures/SpringMvcPictures/56215a404fe34338915bc9391a372856.png" alt="img"></p><h3 id="9-SpringMVC处理静态资源拦截"><a href="#9-SpringMVC处理静态资源拦截" class="headerlink" title="9.SpringMVC处理静态资源拦截"></a>9.SpringMVC处理静态资源拦截</h3><p><img src="/../UpPictures/SpringMvcPictures/7255f98f42d9405c9d5c576f1b3edaaf.png" alt="img"></p><h3 id="10-Spring-SpringMVC-MyBatis整合编程"><a href="#10-Spring-SpringMVC-MyBatis整合编程" class="headerlink" title="10.Spring+SpringMVC+MyBatis整合编程"></a>10.Spring+SpringMVC+MyBatis整合编程</h3><p>1.新建maven-webapp工程，添加java、resources目录及test目录下的java、resources</p><p>2.引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring核心及相关依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--springmvc核心依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--servlet-api--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--jstl--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> &lt;/dependency</span><br></pre></td></tr></table></figure><p>3.Spring+Mybatis整合</p><p>3.1 新建表</p><p><img src="/../UpPictures/SpringMvcPictures/0309ee62bf334366a6278f76d9a58e49.png" alt="img"></p><p>3.2 新建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">package</span> com.study.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/23 10:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date bir;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, bir=&quot;</span> + bir +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String id, String name, Integer age, Date bir)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.bir = bir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBir</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBir</span><span class="params">(Date bir)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bir = bir;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.3 新建DAO接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.dao;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> UserDAO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/23 10:45</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDAO</span> &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> selectAllUsers</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 查询所有用户</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.util.List&lt;com.study.entity.User&gt;</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/23 10:50</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     List&lt;User&gt; <span class="title function_">selectAllUsers</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> insertUser</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 添加用户</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: user</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/23 10:49</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>3.4 新建Mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line">  <span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">          <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">          <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.study.dao.UserDAO&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--selectAllUsers--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">          select id,name,age,bir from t_user</span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">&lt;!--insertUser--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">          insert into t_user values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;,#&#123;bir&#125;)</span><br><span class="line">      <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.5 新建Service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.service;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> java.util.List;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@ClassName</span> UserService</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/23 10:55</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> selectAllUsers</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 查询所有用户</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.util.List&lt;com.study.entity.User&gt;</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/23 10:50</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      List&lt;User&gt; <span class="title function_">selectAllUsers</span><span class="params">()</span>;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> insertUser</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 添加用户</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span>: user</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/23 10:49</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>3.6 新建ServiceImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.service;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.study.dao.UserDAO;</span><br><span class="line"> <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> java.util.List;</span><br><span class="line"> <span class="keyword">import</span> java.util.UUID;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> UserServiceImpl</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/23 10:55</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"> <span class="meta">@Transactional</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="meta">@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">     <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> userDAO.selectAllUsers();</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">         user.setId(UUID.randomUUID().toString());</span><br><span class="line">         userDAO.insertUser(user);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.7 引入spring.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.study&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--创建数据源对象--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--创建SqlSessionFactory--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/study/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.study.entity&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--创建DAO--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.study.dao&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--开启注解式事务生效--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.8 引入log4j.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=ERROR,stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.conversionPattern=[%p] %d&#123;yyyy-MM-dd&#125; %m%n</span><br><span class="line"></span><br><span class="line">log4j.logger.com.study.dao=DEBUG</span><br><span class="line">log4j.logger.org.springframework=ERROR</span><br></pre></td></tr></table></figure><p>3.9 测试Service方法是否可以成功调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.test;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"> <span class="keyword">import</span> com.study.service.UserService;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> TestUserService</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/23 11:11</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUserService</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">         <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">         List&lt;User&gt; users = userService.selectAllUsers();</span><br><span class="line">         <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] 2022-04-23 ==&gt;  Preparing: select id,name,age,bir from t_user </span><br><span class="line">[DEBUG] 2022-04-23 ==&gt; Parameters: </span><br><span class="line">[DEBUG] 2022-04-23 &lt;==      Total: 18</span><br><span class="line">user = User&#123;id=&#x27;1&#x27;, name=&#x27;张三&#x27;, age=10, bir=Fri Apr 01 00:00:00 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;2&#x27;, name=&#x27;李四&#x27;, age=20, bir=Sat Apr 02 00:00:00 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;2d237778-835d-477b-9721-fe6f575064b9&#x27;, name=&#x27;波比&#x27;, age=18, bir=Sun Feb 02 00:00:00 CST 2020&#125;</span><br><span class="line">user = User&#123;id=&#x27;2f278828-6422-432d-ab1b-a727b33c23bc&#x27;, name=&#x27;小胖墩&#x27;, age=3, bir=Mon Apr 11 21:43:57 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;3&#x27;, name=&#x27;王五&#x27;, age=30, bir=Sun Apr 03 00:00:00 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;4&#x27;, name=&#x27;灰太狼&#x27;, age=60, bir=Sun Apr 10 09:56:17 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;5&#x27;, name=&#x27;小超超&#x27;, age=36, bir=Sun Apr 10 09:55:41 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;586a5f71-836c-4171-a038-4620fe0f9354&#x27;, name=&#x27;葫芦娃&#x27;, age=5, bir=Tue Apr 12 09:45:17 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;6&#x27;, name=&#x27;小呆呆&#x27;, age=60, bir=Sun Apr 10 09:55:43 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;7&#x27;, name=&#x27;小超超&#x27;, age=36, bir=Sun Apr 10 09:55:44 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;7a1a00aa-1507-461a-95c0-50110d6f4333&#x27;, name=&#x27;唐三&#x27;, age=20, bir=Fri Apr 15 00:00:00 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;8&#x27;, name=&#x27;胖嘟嘟&#x27;, age=50, bir=Sun Apr 10 09:55:39 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;8a3e8ab8-5abc-44e1-9aec-31f3978d97f2&#x27;, name=&#x27;小胖墩&#x27;, age=3, bir=Tue Apr 12 10:23:33 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;9&#x27;, name=&#x27;茶白&#x27;, age=25, bir=Sun Apr 10 09:55:52 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;985cd035-dedc-4e84-973a-a5fdaa2b8475&#x27;, name=&#x27;喜洋洋&#x27;, age=8, bir=Tue Oct 10 00:00:00 CST 2000&#125;</span><br><span class="line">user = User&#123;id=&#x27;a6be9263-f05f-415f-855e-33843b22e71d&#x27;, name=&#x27;皮卡丘&#x27;, age=10, bir=Thu Apr 14 00:00:00 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;cd280176-68b2-4ceb-b781-ba2f5e1fbeff&#x27;, name=&#x27;小胖墩&#x27;, age=3, bir=Tue Apr 12 10:21:18 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;e3863fd3-173c-46f4-a753-c72f7c92ad56&#x27;, name=&#x27;小猫咪&#x27;, age=3, bir=Mon Apr 11 21:36:31 CST 2022&#125;</span><br></pre></td></tr></table></figure><p>4.Spring+SpringMVC整合</p><p>4.1 配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置工厂监听器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!--配置工厂配置文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!--配置springmvc核心servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!--配置post请求参数的中文乱码问题--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charset<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charset<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.2 引入springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">      http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">      http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">      http://www.springframework.org/schema/context/spring-context.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">      http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="string"><span class="tag">      http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.study.controller&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--配置处理映射器和处理适配器--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--解决静态资源拦截的配置--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span>​</span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.3 新建Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"> <span class="keyword">import</span> com.study.service.UserService;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"> <span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> UserController</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/23 12:12</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> UserService userService;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@RequestMapping(&quot;selectAllUsers&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">selectAllUsers</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">         <span class="comment">//1.收集数据</span></span><br><span class="line">         <span class="comment">//2.调用业务对象</span></span><br><span class="line">         List&lt;User&gt; users = userService.selectAllUsers();</span><br><span class="line">         request.setAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;selectAllUsers&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@RequestMapping(&quot;insertUser&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">insertUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">         <span class="comment">//1.收集参数</span></span><br><span class="line">         <span class="comment">//2.调用业务方法</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             userService.insertUser(user);</span><br><span class="line">             <span class="keyword">return</span> <span class="string">&quot;redirect:/user/selectAllUsers&quot;</span>;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">             <span class="keyword">return</span> <span class="string">&quot;redirect:/insertUser.jsp&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>4.4 添加jsp文件</p><blockquote><p>selectAllUsers.jsp</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"> &lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line"> &lt;!doctype html&gt;</span><br><span class="line"> &lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">     &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">     &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">           content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">     &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">     &lt;title&gt;用来展示所有用户信息&lt;/title&gt;</span><br><span class="line">     &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/js/jquery-3.5.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         $(function()&#123;</span><br><span class="line">             alert();</span><br><span class="line">         &#125;)</span><br><span class="line">     &lt;/script&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">     &lt;h1&gt;展示用户列表&lt;/h1&gt;</span><br><span class="line">     &lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.users&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">         $&#123;user.id&#125; ==== $&#123;user.name&#125; ==== $&#123;user.age&#125; ==== $&#123;user.bir&#125; &lt;br&gt;</span><br><span class="line">     &lt;/c:forEach&gt;</span><br><span class="line"> </span><br><span class="line">     &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/insertUser.jsp&quot;</span>&gt;添加用户信息&lt;/a&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>insertUser.jsp</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">          content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;添加用户信息&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;添加用户信息&lt;/h1&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/insertUser&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">        年龄:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">        生日:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bir&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;保存用户信息&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>5.部署tomcat服务器测试</p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324181211354.png" alt="image-20240324181211354"></p><p> 测试结果：</p><p><img src="/../UpPictures/SpringMvcPictures/b856b89ea1ba4e46ad45df818cfa7114.png" alt="img"></p><p>6.总结</p><p><img src="/../UpPictures/SpringMvcPictures/b725fb569a1b48e0a5461b6d23f55416.png" alt="img"></p><p>7.项目目录结构：</p><p><img src="/../UpPictures/SpringMvcPictures/c860f271b8424ce7a83ef3ecc3c744a7.png" alt="img"></p><h3 id="11-文件上传"><a href="#11-文件上传" class="headerlink" title="11.文件上传"></a>11.文件上传</h3><blockquote><p>文件上传:  指将用户本地计算机中的文件上传到服务器上。</p></blockquote><p><strong>1.springmvc中文件上传流程：</strong></p><p><img src="/../UpPictures/SpringMvcPictures/cffcfe268042494b9280e718536abd2b.png" alt="img"></p><p><strong>2.代码实现</strong></p><p>新建maven-webapp工程，添加java、resources目录</p><p>pom.xml引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring核心及相关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--springmvc核心依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jstl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--commons-fileupload--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--@ResponseBody注解在转换json时使用jackson依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!--配置post请求方式中文乱码的Filter--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charset<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charset<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!--配置springmvc核心servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--配置springmvc配置文件位置--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.study.controller&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">&lt;!--开启注解驱动--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">&lt;!--配置静态资源拦截--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">&lt;!--配置文件上传解析器：id必须指定为multipartResolver--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--控制文件上传大小，单位：字节，默认没有大小限制，这里设置为2M--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2097152&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 开发上传页面upload.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line"> &lt;!doctype html&gt;</span><br><span class="line"> &lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">     &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">     &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">           content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">     &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">     &lt;title&gt;测试文件上传&lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">     &lt;h1&gt;文件上传&lt;/h1&gt;</span><br><span class="line">     &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/upload&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">         &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;img&quot;</span>/&gt;</span><br><span class="line">         &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传文件&quot;</span>&gt;</span><br><span class="line">     &lt;/form&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>开发控制器FileController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> org.apache.commons.io.FilenameUtils;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"> <span class="keyword">import</span> java.io.File;</span><br><span class="line"> <span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> <span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"> <span class="keyword">import</span> java.util.UUID;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> FileController</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/24 9:24</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;file&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> upload</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 测试文件上传</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: img</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/24 9:34</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;upload&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile img, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">         <span class="comment">//获取上传文件属性</span></span><br><span class="line">         System.out.println(<span class="string">&quot;文件原始名称为：&quot;</span> + img.getOriginalFilename());</span><br><span class="line">         System.out.println(<span class="string">&quot;文件大小：&quot;</span> + img.getSize());</span><br><span class="line">         System.out.println(<span class="string">&quot;文件类型：&quot;</span> + img.getContentType());</span><br><span class="line"> </span><br><span class="line">         <span class="comment">//1.根据upload相对路径获取部署到服务之后的绝对路径</span></span><br><span class="line">         <span class="comment">//获取上传路径</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">         System.out.println(<span class="string">&quot;上传路径为：&quot;</span> + realPath);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">//2.修改文件原始名称</span></span><br><span class="line">         <span class="comment">//获取原始文件名称</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">originalFileName</span> <span class="operator">=</span> img.getOriginalFilename();</span><br><span class="line">         <span class="comment">//获取原始文件后缀 FilenameUtils为工具类，里面提供了一些静态方法</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> FilenameUtils.getExtension(originalFileName);</span><br><span class="line">         <span class="comment">//设置新文件名</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>) + <span class="string">&quot;.&quot;</span> + extension;</span><br><span class="line">         System.out.println(<span class="string">&quot;文件新名称为: &quot;</span> + newFileName);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">//3.生成当天日期目录</span></span><br><span class="line">         <span class="type">LocalDate</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">         <span class="comment">//realPath：父路径，now.toString()：子路径</span></span><br><span class="line">         <span class="type">File</span> <span class="variable">dateDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath, now.toString());</span><br><span class="line">         <span class="keyword">if</span>(!dateDir.exists())</span><br><span class="line">             dateDir.mkdirs();</span><br><span class="line">         System.out.println(<span class="string">&quot;日期目录为：&quot;</span> + dateDir.getName());</span><br><span class="line"> </span><br><span class="line">         <span class="comment">//4.上传文件到服务器中对应日期的目录中</span></span><br><span class="line">         <span class="comment">//dateDir：存放文件的日期目录，newFileName：新文件名</span></span><br><span class="line">         img.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(dateDir,newFileName));</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>部署到tomcat服务器上进行测试</p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324181730799.png" alt="image-20240324181730799"></p><p>访问路径：<a href="http://localhost:8888/springmvc02/upload.jsp%EF%BC%8C%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E5%90%8E%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0">http://localhost:8888/springmvc02/upload.jsp，选择文件后进行上传</a></p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324181743757.png" alt="image-20240324181743757"></p><p>上传成功后跳转到index.jsp页面：</p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324181755027.png" alt="image-20240324181755027"></p><p>控制台输出文件信息、target目录下出现upload本地上传的文件：</p><p><img src="/../UpPictures/SpringMvcPictures/bdd4087a31c84b9d9912ea420325e288.png" alt="img"></p><p><strong>3.springmvc中文件上传细节处理：</strong></p><p><img src="/../UpPictures/SpringMvcPictures/39e63aa00537419291d79bade6d5a23b.png" alt="img"></p><h3 id="12-文件下载"><a href="#12-文件下载" class="headerlink" title="12.文件下载"></a>12.文件下载</h3><blockquote><p><strong>文件下载：</strong>即将服务器上的文件下载到当前用户访问的计算机。</p></blockquote><p><strong>1.思路</strong></p><p><img src="/../UpPictures/SpringMvcPictures/d6d77e55bc3549638ba2b5019ea03209.png" alt="img"></p><p><strong>完善upload.jsp页面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>文件下载<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          a.txt <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=a.txt&quot;</span>&gt;</span>在线打开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=a.txt&amp;openStyle=attach&quot;</span>&gt;</span>附件下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          b.rar <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=b.rar&quot;</span>&gt;</span>在线打开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=b.rar&amp;openStyle=attach&quot;</span>&gt;</span>附件下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          c.png <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=c.png&quot;</span>&gt;</span>在线打开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=c.png&amp;openStyle=attach&quot;</span>&gt;</span>附件下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          自我介绍.txt <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=自我介绍.txt&quot;</span>&gt;</span>在线打开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=自我介绍.txt&amp;openStyle=attach&quot;</span>&gt;</span>附件下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加测试文件：</p><p><img src="/../UpPictures/SpringMvcPictures/7ae1e72395614b20985fb55a01c1c5b6.png" alt="img"></p><p><strong>完善控制器FileController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@MethodName</span> download</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> 测试文件下载</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>: openStyle 文件打开方式</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>: fileName 文件名</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>: request</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>: response</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/25 16:27</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;download&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String openStyle, String fileName, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">     <span class="comment">//三目表达式 若不设置打开方式，即openStyle为null时，说明文件可以在线打开</span></span><br><span class="line">     <span class="comment">//         若设置了文件打开方式，即openStyle不为null，说明文件可以以压缩包进行下载</span></span><br><span class="line">     openStyle = openStyle == <span class="literal">null</span> ? <span class="string">&quot;inline&quot;</span>:<span class="string">&quot;attachment&quot;</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;下载文件的名称为：&quot;</span> + fileName);</span><br><span class="line">     <span class="comment">//1.根据下载相对目录获取下载目录在服务器部署之后的绝对目录</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/download&quot;</span>);</span><br><span class="line">     System.out.println(<span class="string">&quot;绝对路径：&quot;</span> + realPath);</span><br><span class="line">     <span class="comment">//2.通过文件输入流读取文件                               文件路径     文件名</span></span><br><span class="line">     <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(realPath, fileName));</span><br><span class="line">     <span class="comment">//3.解决流乱码问题</span></span><br><span class="line">     response.setContentType(<span class="string">&quot;text/plain;charset=UTF-8&quot;</span>);</span><br><span class="line">     <span class="comment">//4.判断是在线打开还是下载附件                   openStyle：attachment 附件下载、online 在线打开</span></span><br><span class="line">     response.setHeader(<span class="string">&quot;content-disposition&quot;</span>,openStyle + <span class="string">&quot;;fileName=&quot;</span> + URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">     <span class="comment">//5.获取响应输出流</span></span><br><span class="line">     <span class="type">ServletOutputStream</span> <span class="variable">sos</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//6.处理下载流赋值</span></span><br><span class="line">     <span class="comment">//流操作使用Utils工具类：1.操作io流用IOUtils；2.操作file用FileUtils</span></span><br><span class="line">     IOUtils.copy(fis,sos);</span><br><span class="line">     IOUtils.closeQuietly(fis);<span class="comment">//优雅关闭，安静关流</span></span><br><span class="line">     IOUtils.closeQuietly(sos);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     <span class="comment">/*//传统写法：流操作读写</span></span><br><span class="line"><span class="comment">     int len;</span></span><br><span class="line"><span class="comment">     byte[] b = new byte[1024];</span></span><br><span class="line"><span class="comment">     while(true)&#123;</span></span><br><span class="line"><span class="comment">         len = fis.read(b);</span></span><br><span class="line"><span class="comment">         if(len == -1)//读到末尾</span></span><br><span class="line"><span class="comment">             break;</span></span><br><span class="line"><span class="comment">         sos.write(b,0,len);</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">     //释放资源</span></span><br><span class="line"><span class="comment">     fis.close();</span></span><br><span class="line"><span class="comment">     sos.close();*/</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>​    <strong>注意：</strong>下载时必须设置响应的头信息，指定文件以何种方式保存，另外，下载文件的控制器不能存在返回值，代表响应只用来下载文件信息。</p></blockquote><p><strong>启动服务器进行测试</strong></p><p>访问路径：<a href="http://localhost:8888/springmvc02/upload.jsp">http://localhost:8888/springmvc02/upload.jsp</a></p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324182407464.png" alt="image-20240324182407464"></p><p>若文件可以在线打开，点击“在线打开”后，文件在浏览器页面上进行显示；</p><p>文件不能在线打开，则点击“在线打开”后文件会以附件形式下载；</p><p>点击“附件下载”后文件均可以以附件形式进行下载</p><h3 id="13-springmvc与Ajax的集成（-ResponseBody注解使用）"><a href="#13-springmvc与Ajax的集成（-ResponseBody注解使用）" class="headerlink" title="13.springmvc与Ajax的集成（@ResponseBody注解使用）"></a>13.springmvc与Ajax的集成（@ResponseBody注解使用）</h3><blockquote><p>Ajax：异步处理、局部更新数据、在处理响应的时候只认json格式的字符串</p><p>fastjson：阿里巴巴提供的转json格式工具</p><p>springmvc提供的@ResponseBody注解：为了进一步方便控制器与ajax集成，springmvc提供了@responseBody注解用在方法的返回值上，代表可以将方法的返回值转换为json格式字符串并响应到前台，省去了通过第三方工具转换json的过程。</p></blockquote><p><strong>1.思路</strong></p><p><img src="/../UpPictures/SpringMvcPictures/2a3da693b5494534bdbe93f08c74dcf2.png" alt="img"></p><p><strong>2.代码实现</strong></p><p><strong>引入相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--@ResponseBody注解在转换json时使用jackson依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>开发实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.entity;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@ClassName</span> User</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/26 11:51</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> String id;</span><br><span class="line">      <span class="keyword">private</span> String name;</span><br><span class="line">      <span class="keyword">private</span> Integer age;</span><br><span class="line">      <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> <span class="comment">//json日期格式转换（jackson依赖提供）</span></span><br><span class="line">      <span class="keyword">private</span> Date bir;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                  <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                  <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                  <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                  <span class="string">&quot;, bir=&quot;</span> + bir +</span><br><span class="line">                  <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String id, String name, Integer age, Date bir)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.id = id;</span><br><span class="line">          <span class="built_in">this</span>.name = name;</span><br><span class="line">          <span class="built_in">this</span>.age = age;</span><br><span class="line">          <span class="built_in">this</span>.bir = bir;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> id;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.id = id;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.name = name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> age;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.age = age;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> Date <span class="title function_">getBir</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> bir;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBir</span><span class="params">(Date bir)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.bir = bir;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><strong>开发控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line">  <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line">  <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">  <span class="keyword">import</span> java.util.*;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@ClassName</span> JSonController</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/26 11:42</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Controller</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;json&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonController</span> &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试<span class="doctag">@ResponseBody</span>注解  </span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.util.Map&lt;java.lang.String,java.lang.String&gt; </span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/26 12:11</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">      <span class="meta">@ResponseBody</span></span><br><span class="line">      <span class="keyword">public</span> Map&lt;String,String&gt; <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">          Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">          map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;测试成功&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> map;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> findAll</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 使用阿里fastjson转换json</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span>: response</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/26 12:05</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;findAll&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAll</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">          <span class="comment">//1.收集数据</span></span><br><span class="line">          <span class="comment">//2.调用业务</span></span><br><span class="line">          List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">          users.add(<span class="keyword">new</span> <span class="title class_">User</span>(UUID.randomUUID().toString(),<span class="string">&quot;熊大&quot;</span>,<span class="number">20</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">          users.add(<span class="keyword">new</span> <span class="title class_">User</span>(UUID.randomUUID().toString(),<span class="string">&quot;熊二&quot;</span>,<span class="number">10</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">          users.add(<span class="keyword">new</span> <span class="title class_">User</span>(UUID.randomUUID().toString(),<span class="string">&quot;光头强&quot;</span>,<span class="number">50</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">          <span class="comment">//fastjson</span></span><br><span class="line">          <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSONObject.toJSONStringWithDateFormat(users, <span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">          response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">          response.getWriter().println();</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> showAll</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 使用springmvc提供的注解<span class="doctag">@ResponseBody</span>，将控制器方法的返回值转为json,并响应给前台</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.util.List&lt;com.study.entity.User&gt;</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/26 12:06</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;showAll&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> <span class="meta">@ResponseBody</span> List&lt;User&gt; <span class="title function_">showAll</span><span class="params">()</span>&#123;</span><br><span class="line">          <span class="comment">//1.收集数据</span></span><br><span class="line">          <span class="comment">//2.调用业务</span></span><br><span class="line">          List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">          users.add(<span class="keyword">new</span> <span class="title class_">User</span>(UUID.randomUUID().toString(),<span class="string">&quot;熊大&quot;</span>,<span class="number">20</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">          users.add(<span class="keyword">new</span> <span class="title class_">User</span>(UUID.randomUUID().toString(),<span class="string">&quot;熊二&quot;</span>,<span class="number">10</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">          users.add(<span class="keyword">new</span> <span class="title class_">User</span>(UUID.randomUUID().toString(),<span class="string">&quot;光头强&quot;</span>,<span class="number">50</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">          <span class="keyword">return</span> users;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>开发json.jsp页面</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">  &lt;!doctype html&gt;</span><br><span class="line">  &lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">      &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">            content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">      &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">      &lt;title&gt;测试springmvc与ajax集成&lt;/title&gt;</span><br><span class="line">      &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/js/jquery-3.5.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script&gt;</span><br><span class="line">          $(function()&#123;</span><br><span class="line">              $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">                  &lt;%--$.get(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/json/showAll&quot;</span>,function(res)&#123;--%&gt;</span><br><span class="line">                  &lt;%--    console.log(res)--%&gt;</span><br><span class="line">                  &lt;%--&#125;,<span class="string">&quot;JSON&quot;</span>);--%&gt;</span><br><span class="line">                  $.get(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/json/showAll&quot;</span>,function(res)&#123;</span><br><span class="line">                      $.each(res,function(i,user)&#123;</span><br><span class="line">                          <span class="keyword">var</span> ul= $(<span class="string">&quot;&lt;ul/&gt;&quot;</span>);</span><br><span class="line">                          <span class="type">var</span> <span class="variable">idLi</span> <span class="operator">=</span> $(<span class="string">&quot;&lt;li/&gt;&quot;</span>).text(user.id);</span><br><span class="line">                          <span class="type">var</span> <span class="variable">nameLi</span> <span class="operator">=</span> $(<span class="string">&quot;&lt;li/&gt;&quot;</span>).text(user.name);</span><br><span class="line">                          <span class="type">var</span> <span class="variable">ageLi</span> <span class="operator">=</span> $(<span class="string">&quot;&lt;li/&gt;&quot;</span>).text(user.age);</span><br><span class="line">                          <span class="type">var</span> <span class="variable">birLi</span> <span class="operator">=</span> $(<span class="string">&quot;&lt;li/&gt;&quot;</span>).text(user.bir);</span><br><span class="line">                          ul.append(idLi).append(nameLi).append(ageLi).append(birLi);</span><br><span class="line">                          $(<span class="string">&quot;#bd&quot;</span>).append(ul);</span><br><span class="line">                      &#125;)</span><br><span class="line">                  &#125;,<span class="string">&quot;JSON&quot;</span>);</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;)</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body id=<span class="string">&quot;bd&quot;</span>&gt;</span><br><span class="line">      &lt;button id=<span class="string">&quot;btn&quot;</span>&gt;显示一群人&lt;/button&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>启动服务器进行测试</p><p>访问路径：<a href="http://localhost:8888/springmvc02/json/test">http://localhost:8888/springmvc02/json/test</a></p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324182727287.png" alt="image-20240324182727287"></p><p>访问路径：<a href="http://localhost:8888/springmvc02/json.jsp">http://localhost:8888/springmvc02/json.jsp</a></p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324182740973.png" alt="image-20240324182740973"></p><p>访问路径：<a href="http://localhost:8888/springmvc02/json/findAll">http://localhost:8888/springmvc02/json/findAll</a></p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324182755085.png" alt="image-20240324182755085"></p><p>访问路径：<a href="http://localhost:8888/springmvc02/json/showAll">http://localhost:8888/springmvc02/json/showAll</a></p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324182808605.png" alt="image-20240324182808605"></p><h3 id="14-SpringMVC中拦截器"><a href="#14-SpringMVC中拦截器" class="headerlink" title="14.SpringMVC中拦截器"></a>14.SpringMVC中拦截器</h3><p><img src="/../UpPictures/SpringMvcPictures/a7fef079179b45bd82c665b5f91d3dc4.png" alt="img"></p><p><strong>1 作用</strong><br>       类似于javaweb中的Filter，用来对控制器请求进行拦截，可以将多个Controller中执行的共同代码放入拦截器中执行，减少Controller类中代码的冗余。</p><p><strong>2 特点</strong><br>拦截器器只能拦截Controller的请求，不能拦截jsp、静态资源等相关请求</p><p>拦截器可中断用户的请求轨迹</p><p>请求先经过拦截器，之后还会经过拦截器</p><p><strong>3 自定义拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MyInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/26 15:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//执行顺序：1、2、3、4</span></span><br><span class="line">    <span class="comment">//1.请求会最先进入拦截器中的preHandler方法，执行preHandler方法中内容</span></span><br><span class="line">    <span class="comment">//return true表示放行请求；false表示中断请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(((HandlerMethod)o).getMethod().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;===========1=============&quot;</span>);</span><br><span class="line"><span class="comment">//        //强制用户登录</span></span><br><span class="line"><span class="comment">//        Object user = httpServletRequest.getSession().getAttribute(&quot;user&quot;);</span></span><br><span class="line"><span class="comment">//        if(user==null)&#123;</span></span><br><span class="line"><span class="comment">//            //重定向到登录页面</span></span><br><span class="line"><span class="comment">//            httpServletResponse.sendRedirect(httpServletRequest.getContextPath() + &quot;/login.jsp&quot;);</span></span><br><span class="line"><span class="comment">//            return false;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.当控制器方法执行结束以后，会返回拦截器中，执行拦截器中的postHandler方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(modelAndView);</span><br><span class="line">        System.out.println(<span class="string">&quot;===========3=============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.postHandler执行完成之后响应请求，在响应请求完成后，会执行afterCompletion方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(e!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========4=============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.开发控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@MethodName</span> testInterceptor</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> 测试拦截器</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/26 15:47</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;interceptor&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">testInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;===========2=============&quot;</span>);</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;程序出错啦！&quot;</span>);</span><br><span class="line"> <span class="comment">//        return &quot;index&quot;;//此处的ModelAndView只有view，即index</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>5.springmvc.xml中配置拦截器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册拦截器--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.study.interceptors.MyInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--配置一个具体的拦截器--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--配置拦截哪个路径--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/json/*&quot;</span>/&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--配置不拦截哪个路径--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/json/showAll&quot;</span>/&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--使用哪个拦截器--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;myInterceptor&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：&#x2F;*代表拦截所有请求路径</p></blockquote><p><strong>6 启动服务测试拦截器</strong></p><p>访问路径：<a href="http://localhost:8888/springmvc02/json/interceptor">http://localhost:8888/springmvc02/json/interceptor</a></p><p>控制台输出结果：</p><p>（1）正常执行时</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">testInterceptor</span><br><span class="line">===========1=============</span><br><span class="line">===========2=============</span><br><span class="line">ModelAndView: reference to view with name &#x27;index&#x27;; model is &#123;&#125;</span><br><span class="line">===========3=============</span><br><span class="line">===========4=============</span><br></pre></td></tr></table></figure><p>（2）出错时</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">testInterceptor</span><br><span class="line">===========1=============</span><br><span class="line">===========2=============</span><br><span class="line">程序出错啦！</span><br><span class="line">===========4=============</span><br></pre></td></tr></table></figure><p><img src="/../UpPictures/SpringMvcPictures/3bc2e2ffae5c42da91529979d2791dc1.png" alt="img"></p><p>访问路径：<a href="http://localhost:8888/springmvc02/json/findAll">http://localhost:8888/springmvc02/json/findAll</a></p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324183305859.png" alt="image-20240324183305859"></p><p> 控制台输出结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">findAll</span><br><span class="line">===========1=============</span><br><span class="line">null</span><br><span class="line">===========3=============</span><br><span class="line">===========4=============</span><br></pre></td></tr></table></figure><p>访问路径：<a href="http://localhost:8888/springmvc02/json/showAll">http://localhost:8888/springmvc02/json/showAll</a></p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324183316379.png" alt="image-20240324183316379"></p><p>控制台无输出结果</p><h3 id="15-SpringMVC全局异常处理"><a href="#15-SpringMVC全局异常处理" class="headerlink" title="15.SpringMVC全局异常处理"></a>15.SpringMVC全局异常处理</h3><p><img src="/../UpPictures/SpringMvcPictures/86471303e3b24530a9fba65c5c081478.png" alt="img"></p><p><strong>1.作用</strong></p><p>​    当控制器中某个方法在运行过程中突然发生运行时异常时，为了增加用户体验不能出现500错误代码，应该给用户良好展示错误界面，全局异常处理就能更好解决这个问题。</p><p><strong>2 控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@MethodName</span> testInterceptor</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> 测试拦截器</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/26 15:47</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;interceptor&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">testInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;===========2=============&quot;</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNameNotFoundException</span>(<span class="string">&quot;保存失败，请稍后再试......&quot;</span>);</span><br><span class="line">      <span class="comment">//throw new RuntimeException(&quot;程序出错啦......&quot;);</span></span><br><span class="line">      <span class="comment">//return &quot;index&quot;;//此处的ModelAndView只有view，即index</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>3 自定义异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">package</span> com.study.exceptions;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> UserNameNotFoundException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/26 19:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserNameNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserNameNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4 全局异常处理开发</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.handlerexception;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> com.study.exceptions.UserNameNotFoundException;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line">  <span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@ClassName</span> GlobalExceptionResolver</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/26 19:22</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span> &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> resolveException</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 用来处理发生异常时的方法</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span>: httpServletRequest 当前请求对象</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span>: httpServletResponse 当前请求对应的响应对象</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span>: o 当前请求的方法对象</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span>: e 当前出现异常时的异常对象</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: org.springframework.web.servlet.ModelAndView</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/26 19:24</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;进入全局异常处理器获取的异常信息为：&quot;</span> + e.getMessage());</span><br><span class="line">          <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">          <span class="comment">//基于不同业务异常跳转到不同页面</span></span><br><span class="line">          <span class="keyword">if</span>(e <span class="keyword">instanceof</span> UserNameNotFoundException)&#123;</span><br><span class="line">              modelAndView.setViewName(<span class="string">&quot;redirect:/login.jsp&quot;</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              modelAndView.setViewName(<span class="string">&quot;redirect:/error.jsp&quot;</span>);<span class="comment">//相当于 return &quot;error&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//modelAndView中model默认放入request作用域，如果使用redirect跳转，model中数据会自动拼接到跳转url</span></span><br><span class="line">          modelAndView.addObject(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">          <span class="keyword">return</span> modelAndView;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>5 springmvc.xml配置全局异常处理</strong></p>  <!--配置全局异常处理类-->  <bean class="com.study.handlerexception.GlobalExceptionResolver"/><p><strong>6 jsp页面</strong></p><blockquote><p>login.jsp</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;%@page contentType=&quot;text/html; UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户登录界面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录失败:$&#123;param.msg&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>error.jsp</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/html; UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line"> <span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>全局错误页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">&quot;bd&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span>&gt;</span>系统出现错误: $&#123;param.msg&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>7 启动服务进行测试</strong></p><p>访问路径：<a href="http://localhost:8888/springmvc02/json/interceptor">http://localhost:8888/springmvc02/json/interceptor</a></p><p><img src="/../UpPictures/SpringMvcPictures/image-20240324183751722.png" alt="image-20240324183751722"></p><p> 控制台输出结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">testInterceptor</span><br><span class="line">===========1=============</span><br><span class="line">===========2=============</span><br><span class="line">null</span><br><span class="line">进入全局异常处理器获取的异常信息为：保存失败，请稍后重试......</span><br><span class="line">===========4=============</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107/"/>
      <url>/posts/16107/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="/posts/9964/"/>
      <url>/posts/9964/</url>
      
        <content type="html"><![CDATA[<h3 id="1-SpringMVC的引言"><a href="#1-SpringMVC的引言" class="headerlink" title="1.SpringMVC的引言"></a>1.SpringMVC的引言</h3><p>为了使Spring可插入的MVC架构,SpringFrameWork在Spring基础上开发SpringMVC框架,从而在使用Spring进行WEB开发时可以选择使用Spring的SpringMVC框架作为web开发的控制器框架。</p><h3 id="2-为什么是SpringMVC？"><a href="#2-为什么是SpringMVC？" class="headerlink" title="2.为什么是SpringMVC？"></a>2.为什么是SpringMVC？</h3><ul><li>可以和spring框架无缝整合</li><li>运行效率高于struts2框架</li><li>注解式开发更高效</li></ul><h3 id="3-SpringMVC的特点"><a href="#3-SpringMVC的特点" class="headerlink" title="3.SpringMVC的特点"></a>3.SpringMVC的特点</h3><p>SpringMVC <strong>轻量级，典型MVC框架</strong>，在整个MVC架构中充当控制器框架,相对于之前学习的struts2框架,<strong>SpringMVC运行更快,其注解式开发更高效灵活</strong>。</p><p><img src="/../UpPictures/spring-0Pictures/4768ad4add074769bfe5dae4f848bca8.png" alt="img"></p><h3 id="4-SpringMVC与Struts2运行流程对比"><a href="#4-SpringMVC与Struts2运行流程对比" class="headerlink" title="4.SpringMVC与Struts2运行流程对比"></a>4.SpringMVC与Struts2运行流程对比</h3><p><img src="/../UpPictures/spring-0Pictures/001331fe89bf4071ab5729b7ea2a93a8.png" alt="img"></p><h3 id="5-第一个环境搭建"><a href="#5-第一个环境搭建" class="headerlink" title="5.第一个环境搭建"></a>5.第一个环境搭建</h3><p><strong>5.1思路</strong></p><p><img src="/../UpPictures/spring-0Pictures/593470d028bf4abcab96e9380e1e2d73.png" alt="img"></p><p><strong>5.2代码实现</strong></p><p>新建Maven-webapp项目，添加java、resources目录以及test路径下java、resources目录</p><p>引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring核心及相关依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--springmvc核心依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--servlet-api--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--jstl--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写springmvc.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.study.controller&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--    &amp;lt;!&amp;ndash;注册处理器映射器&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &amp;lt;!&amp;ndash;注册处理器适配器&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--【推荐使用】注册处理器映射器、注册处理器适配器，完成参数类型转转、跳转、响应处理...--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入前缀和后缀：前缀和后缀固定写死，制可以根据项目页面目录动态变化--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 这里还要加载springmvc配置文件位置，通过在servlet写init-­param标签，还是contextConfigLocation属性，value用来加载springmvc配置文件。</p></blockquote><p>创建控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> HelloController</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/20 16:01</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@RequestMapping</span> 修饰范围: 用在 类上  和 方法上</span></span><br><span class="line"><span class="comment">      *  1.用在方法上用来给当前方法加入指定的请求路径  相当于之前struts2中action标签的name属性</span></span><br><span class="line"><span class="comment">      *  2.用在类上用来给类中所有方法加入一个统一请求路径在方法访问之前需要加入类上<span class="doctag">@requestMapping</span>的路径</span></span><br><span class="line"><span class="comment">      *    相当于之前struts2中package标签的namespace属性</span></span><br><span class="line"><span class="comment">      *  注意: 一旦类上和方法上同时加入<span class="doctag">@requestMapping</span>访问时必须</span></span><br><span class="line"><span class="comment">      *        /项目名/类上<span class="doctag">@requestMapping</span>的路径/访问方法上<span class="doctag">@requestMapping</span>的路径</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="comment">//访问路径：http://localhost:8888/springmvc01/hello/find</span></span><br><span class="line">     <span class="meta">@RequestMapping(value = &quot;/find&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">find</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="comment">//1.收集数据</span></span><br><span class="line">         <span class="comment">//2.调用业务方法</span></span><br><span class="line">         System.out.println(<span class="string">&quot;调用了find方法&quot;</span>);</span><br><span class="line">         <span class="comment">//3.处理响应</span></span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;<span class="comment">//页面逻辑名 对应 index.jsp</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//访问路径：http://localhost:8888/springmvc01/hello/save</span></span><br><span class="line">     <span class="meta">@RequestMapping(value = &quot;/save&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="comment">//1.收集数据</span></span><br><span class="line">         <span class="comment">//2.调用业务方法</span></span><br><span class="line">         System.out.println(<span class="string">&quot;调用了save方法&quot;</span>);</span><br><span class="line">         <span class="comment">//3.处理响应</span></span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;<span class="comment">//页面逻辑名 对应 index.jsp</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Controller: 该注解用来在类上标识这是一个控制器组件类，并创建这个类实例</p><p>@RequestMapping:</p><p>​修饰范围 : 用在方法或者类上</p><p>​注解作用: 用来指定类以及类中方法的请求路径</p><p>​注解详解 :</p><p>​用在类上相当于struts2中namespace在访问类中方法必须先加入这个路径</p><p>​用在方法上相当于action标签的name属性用来表示访问这个方法的路径</p></blockquote><p>部署项目在tomcat服务器上进行测试</p><p><img src="/../UpPictures/spring-0Pictures/image-20240324172653946.png" alt="image-20240324172653946"></p><p>启动项目进行测试：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">D:\Software_Development\IDEA_code\apache-tomcat-8.5.78\bin\catalina.bat run</span><br><span class="line">[2022-04-20 04:42:56,645] Artifact springmvc01:war exploded: Waiting for server connection to start artifact deployment...</span><br><span class="line">Using CATALINA_BASE:   &quot;C:\Users\cjn\AppData\Local\JetBrains\IntelliJIdea2020.1\tomcat\Unnamed_springmvc01&quot;</span><br><span class="line">Using CATALINA_HOME:   &quot;D:\Software_Development\IDEA_code\apache-tomcat-8.5.78&quot;</span><br><span class="line">Using CATALINA_TMPDIR: &quot;D:\Software_Development\IDEA_code\apache-tomcat-8.5.78\temp&quot;</span><br><span class="line">Using JRE_HOME:        &quot;D:\Software_Development\JDK&quot;</span><br><span class="line">Using CLASSPATH:       &quot;D:\Software_Development\IDEA_code\apache-tomcat-8.5.78\bin\bootstrap.jar;D:\Software_Development\IDEA_code\apache-tomcat-8.5.78\bin\tomcat-juli.jar&quot;</span><br><span class="line">Using CATALINA_OPTS:   &quot;&quot;</span><br><span class="line">......</span><br><span class="line">Connected to server</span><br><span class="line">[2022-04-20 04:42:58,218] Artifact springmvc01:war exploded: Artifact is being deployed, please wait...</span><br><span class="line">......</span><br><span class="line">[2022-04-20 04:42:59,430] Artifact springmvc01:war exploded: Artifact is deployed successfully</span><br><span class="line">[2022-04-20 04:42:59,430] Artifact springmvc01:war exploded: Deploy took 1,212 milliseconds</span><br><span class="line">...</span><br><span class="line">调用了find方法</span><br><span class="line">调用了save方法</span><br></pre></td></tr></table></figure><p>访问路径 :</p><p><a href="http://localhost:8888/springmvc01/hello/find">http://localhost:8888/springmvc01/hello/find</a></p><p>或</p><p><a href="http://localhost:8888/springmvc01/hello/save">http://localhost:8888/springmvc01/hello/save</a></p><p><img src="/../UpPictures/spring-0Pictures/image-20240324172738717.png" alt="image-20240324172738717"></p><p>与此同时，控制台输出“调用了xxx方法”</p><h3 id="6-SpringMVC中跳转方式"><a href="#6-SpringMVC中跳转方式" class="headerlink" title="6.SpringMVC中跳转方式"></a>6.SpringMVC中跳转方式</h3><p><strong>6.1 跳转方式</strong></p><ul><li>说明 : 跳转方式有两种,一种是<strong>forward</strong>,一种是<strong>redirect</strong>。<ul><li>forward跳转，一次请求，地址栏不变</li><li>redirect跳转，多次请求，地址栏改变</li></ul></li></ul><p><img src="/../UpPictures/spring-0Pictures/image-20240324172933887.png" alt="image-20240324172933887"></p><p><strong>6.2 编写代码启动tomcat服务器进行测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@ClassName</span> ForwardAndRedirectController</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/21 10:57</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Controller</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;forwardAndRedirect&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForwardAndRedirectController</span> &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试forward跳转到页面</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/21 11:03</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;测试forward跳转到页面&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 访问路径：http://localhost:8888/springmvc01/forwardAndRedirect/test</span></span><br><span class="line"><span class="comment">           * 输出结果分析：</span></span><br><span class="line"><span class="comment">           *    不写时默认forward跳转，即从controller跳转到页面</span></span><br><span class="line"><span class="comment">           *    地址栏：不变，仍为 http://localhost:8888/springmvc01/forwardAndRedirect/test</span></span><br><span class="line"><span class="comment">           *    jsp页面：index.jsp（即原始默认输出Hello World！的页面）</span></span><br><span class="line"><span class="comment">           *    控制台输出：测试forward跳转到页面</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test1</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试redirect跳转到页面</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/21 11:04</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test1&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;测试redirect跳转到页面&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 访问路径：http://localhost:8888/springmvc01/forwardAndRedirect/test1</span></span><br><span class="line"><span class="comment">           * 输出结果分析：</span></span><br><span class="line"><span class="comment">           *    地址栏：经redirect改变一次，变为 http://localhost:8888/springmvc01/index.jsp</span></span><br><span class="line"><span class="comment">           *    jsp页面：index.jsp</span></span><br><span class="line"><span class="comment">           *    控制台输出：测试redirect跳转到页面</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test2</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试forward跳转到相同controller类中的不同方法</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/21 11:11</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test2&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;测试forward跳转到相同controller类中的不同方法&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;forward:/forwardAndRedirect/test&quot;</span>;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 访问路径：http://localhost:8888/springmvc01/forwardAndRedirect/test2</span></span><br><span class="line"><span class="comment">           * 输出结果分析：</span></span><br><span class="line"><span class="comment">           *    地址栏：不改变，仍为 http://localhost:8888/springmvc01/forwardAndRedirect/test2</span></span><br><span class="line"><span class="comment">           *    jsp页面：index.jsp</span></span><br><span class="line"><span class="comment">           *    控制台输出：测试forward跳转到相同controller类中的不同方法</span></span><br><span class="line"><span class="comment">           *              测试forward跳转到页面</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test3</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试redirect跳转到相同controller类中的不同方法</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/21 11:15</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test3&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;测试redirect跳转到相同controller类中的不同方法&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;redirect:/forwardAndRedirect/test&quot;</span>;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 访问路径：http://localhost:8888/springmvc01/forwardAndRedirect/test3</span></span><br><span class="line"><span class="comment">           * 输出结果分析：</span></span><br><span class="line"><span class="comment">           *    地址栏：经redirect改变一次，变为 http://localhost:8888/springmvc01/forwardAndRedirect/test</span></span><br><span class="line"><span class="comment">           *    jsp页面：index.jsp</span></span><br><span class="line"><span class="comment">           *    控制台输出：测试redirect跳转到相同controller类中的不同方法</span></span><br><span class="line"><span class="comment">           *              测试forward跳转到页面</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test4</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试forward跳转到不同controller类中的不同方法</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/21 11:18</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test4&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;测试forward跳转到不同controller类中的不同方法&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;forward:/hello/find&quot;</span>;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 访问路径：http://localhost:8888/springmvc01/forwardAndRedirect/test4</span></span><br><span class="line"><span class="comment">           * 输出结果分析：</span></span><br><span class="line"><span class="comment">           *    地址栏：不改变，仍为 http://localhost:8888/springmvc01/forwardAndRedirect/test4</span></span><br><span class="line"><span class="comment">           *    jsp页面：index.jsp</span></span><br><span class="line"><span class="comment">           *    控制台输出：测试forward跳转到不同controller类中的不同方法</span></span><br><span class="line"><span class="comment">           *              调用了find方法</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test5</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试redirect跳转到不同controller类中的不同方法</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/21 11:24</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test5&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;测试redirect跳转到不同controller类中的不同方法&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;redirect:/hello/find&quot;</span>;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 访问路径：http://localhost:8888/springmvc01/forwardAndRedirect/test5</span></span><br><span class="line"><span class="comment">           * 输出结果分析：</span></span><br><span class="line"><span class="comment">           *    地址栏：经redirect改变一次，变为 http://localhost:8888/springmvc01/hello/find</span></span><br><span class="line"><span class="comment">           *    jsp页面：index.jsp</span></span><br><span class="line"><span class="comment">           *    控制台输出：测试redirect跳转到不同controller类中的不同方法</span></span><br><span class="line"><span class="comment">           *              调用了find方法</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>6.3 跳转方式总结</strong></p><p><img src="/../UpPictures/spring-0Pictures/1d1eb39c96004140809f9744cbd5b8c6.png" alt="img"></p><p>或</p><p><img src="/../UpPictures/spring-0Pictures/4d972310893d471699f3cb1a912603fe.png" alt="img"></p><h3 id="7-SpringMVC中参数接收"><a href="#7-SpringMVC中参数接收" class="headerlink" title="7. SpringMVC中参数接收"></a>7. SpringMVC中参数接收</h3><blockquote><p>接收参数语法说明：springmvc中使用控制器方法参数来收集客户端的请求参数，因此在接收请求参数时直接在需要的控制器方法中声明即可，springmvc可以自动根据指定类型完成类型的转换操作。</p></blockquote><p><strong>7.1 接收零散类型参数</strong></p><blockquote><p>如: 八种基本类型 + String + 日期类型</p></blockquote><p>a.前台传递参数</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># GET 方式传递参数</span><br><span class="line">http://localhost:8080/springmvc_day1/param/test?name=zhangsan&amp;age=19&amp;sex=true&amp;salary=11.11&amp;bir=2012/12/12</span><br><span class="line">​</span><br><span class="line"># POST 方式传递参数</span><br><span class="line">&lt;h1&gt;测试参数接收&lt;/h1&gt;</span><br><span class="line">&lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/param/test&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    用户名: &lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;  &lt;br&gt;</span><br><span class="line">    年龄:  &lt;input type=&quot;text&quot; name=&quot;age&quot;/&gt;   &lt;br&gt;</span><br><span class="line">    性别:  &lt;input type=&quot;text&quot; name=&quot;sex&quot;&gt;    &lt;br&gt;</span><br><span class="line">    工资:  &lt;input type=&quot;text&quot; name=&quot;salary&quot;&gt; &lt;br&gt;</span><br><span class="line">    生日:  &lt;input type=&quot;text&quot; name=&quot;bir&quot;&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>b.后台控制器接收</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/param&quot;)</span><br><span class="line">public class ParamController &#123;</span><br><span class="line">    @RequestMapping(&quot;/test&quot;)</span><br><span class="line">    public String test(String name, Integer age, Boolean sex,Double salary,Date bir)&#123;</span><br><span class="line">        System.out.println(&quot;姓名: &quot;+name);</span><br><span class="line">        System.out.println(&quot;年龄: &quot;+age);</span><br><span class="line">        System.out.println(&quot;性别: &quot;+sex);</span><br><span class="line">        System.out.println(&quot;工资: &quot;+salary);</span><br><span class="line">        System.out.println(&quot;生日: &quot;+bir);</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:springmvc在接收日期类型参数时日期格式必须为yyyy&#x2F;MM&#x2F;dd HH:mm:ss</p></blockquote><p><strong>7.2 接收对象类型参数</strong></p><p>a.前台传递参数</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># GET 方式请求参数传递</span><br><span class="line">        http://localhost:8080/springmvc_day1/param/test1?name=zhangsan&amp;age=19&amp;sex=true&amp;salary=11.11&amp;bir=2012/12/12</span><br><span class="line"></span><br><span class="line"># POST 方式请求参数传递</span><br><span class="line">        &lt;h1&gt;测试对象类型参数接收&lt;/h1&gt;</span><br><span class="line">    &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/param/test1&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        用户名: &lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;  &lt;br&gt;</span><br><span class="line">        年龄:  &lt;input type=&quot;text&quot; name=&quot;age&quot;/&gt;   &lt;br&gt;</span><br><span class="line">        性别:  &lt;input type=&quot;text&quot; name=&quot;sex&quot;&gt;    &lt;br&gt;</span><br><span class="line">        工资:  &lt;input type=&quot;text&quot; name=&quot;salary&quot;&gt; &lt;br&gt;</span><br><span class="line">        生日:  &lt;input type=&quot;text&quot; name=&quot;bir&quot;&gt; &lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意:在接收对象类型参数时和struts2接收不同,springmvc直接根据传递参数名与对象中属性名一致自动封装对象</p></blockquote><p>b.后台控制器接收</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 1.定义对象</span><br><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private Double salary;</span><br><span class="line">    private Boolean sex;</span><br><span class="line">    private Date bir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  2.控制器中接收</span><br><span class="line"> @RequestMapping(&quot;/test1&quot;)</span><br><span class="line">public String test1(User user)&#123;</span><br><span class="line">  System.out.println(&quot;接收的对象: &quot;+user);</span><br><span class="line">  return &quot;index&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7.3 接收数组类型参数</strong></p><p>a.前台传递参数</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># GET 方式请求参数传递</span><br><span class="line">         http://localhost:8080/springmvc_day1/param/test2?names=zhangsan&amp;names=lisi&amp;names=wangwu</span><br><span class="line"> </span><br><span class="line"> # POST 方式请求参数传递</span><br><span class="line">         &lt;h1&gt;测试对象类型参数接收&lt;/h1&gt;</span><br><span class="line">     &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/param/test2&quot; method=&quot;post&quot;&gt;</span><br><span class="line">         爱好: &lt;br&gt;</span><br><span class="line">             看书:  &lt;input type=&quot;checkbox&quot; name=&quot;names&quot;/&gt; </span><br><span class="line">             看电视:&lt;input type=&quot;checkbox&quot; name=&quot;names&quot;/&gt;</span><br><span class="line">             吃饭:  &lt;input type=&quot;checkbox&quot; name=&quot;names&quot;/&gt;</span><br><span class="line">             玩游戏: &lt;input type=&quot;checkbox&quot; name=&quot;names&quot;/&gt;</span><br><span class="line">         &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">     &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>b.后台控制器接收</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/test2&quot;)</span><br><span class="line">public String test2(String[] names)&#123;</span><br><span class="line">  for (String name : names) &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">  &#125;</span><br><span class="line">  return &quot;index&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:接收数组类型数据时前台传递多个key一致自动放入同一个数组中</p></blockquote><p><strong>7.4 接收集合类型参数</strong></p><blockquote><p>说明:springmvc不支持直接将接收集合声明为控制器方法参数进行接收,如果要接收集合类型参数必须使用对象封装要接收接收类型才可以</p></blockquote><p>a.前台传递参数</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># GET 方式请求参数传递</span><br><span class="line">         http://localhost:8080/springmvc_day1/param/test3?lists=zhangsan&amp;lists=lisi&amp;lists=wangwu</span><br><span class="line"> </span><br><span class="line"> # POST 方式请求参数传递</span><br><span class="line">         &lt;h1&gt;测试对象类型参数接收&lt;/h1&gt;</span><br><span class="line">     &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/param/test3&quot; method=&quot;post&quot;&gt;</span><br><span class="line">         爱好: &lt;br&gt;</span><br><span class="line">             看书:  &lt;input type=&quot;checkbox&quot; name=&quot;lists&quot;/&gt; </span><br><span class="line">             看电视:&lt;input type=&quot;checkbox&quot; name=&quot;lists&quot;/&gt;</span><br><span class="line">             吃饭:  &lt;input type=&quot;checkbox&quot; name=&quot;lists&quot;/&gt;</span><br><span class="line">             玩游戏: &lt;input type=&quot;checkbox&quot; name=&quot;lists&quot;/&gt;</span><br><span class="line">         &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">     &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>b.后台控制器接收</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 1.封装接收集合类型对象----&gt;在spring mvc中用来接收集合类型参数</span><br><span class="line"> public class CollectionVO &#123;</span><br><span class="line">     private List&lt;String&gt; lists;</span><br><span class="line"> </span><br><span class="line">     public List&lt;String&gt; getLists() &#123;</span><br><span class="line">         return lists;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public void setLists(List&lt;String&gt; lists) &#123;</span><br><span class="line">         this.lists = lists;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> // 2.控制器中接收集合类型参数</span><br><span class="line"> @RequestMapping(&quot;/test3&quot;)</span><br><span class="line"> public String test3(CollectionVO collectionVO)&#123;</span><br><span class="line">   collectionVO.getLists().forEach(name-&gt; System.out.println(name));</span><br><span class="line">   return &quot;index&quot;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>7.5 代码实测</strong></p><blockquote><p>User</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.entity;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@ClassName</span> User</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/21 15:37</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> String name;</span><br><span class="line">      <span class="keyword">private</span> Integer age;</span><br><span class="line">      <span class="keyword">private</span> Boolean sex;</span><br><span class="line">      <span class="keyword">private</span> Double salary;</span><br><span class="line">      <span class="keyword">private</span> Date bir;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Integer age, Boolean sex, Double salary, Date bir)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.name = name;</span><br><span class="line">          <span class="built_in">this</span>.age = age;</span><br><span class="line">          <span class="built_in">this</span>.sex = sex;</span><br><span class="line">          <span class="built_in">this</span>.salary = salary;</span><br><span class="line">          <span class="built_in">this</span>.bir = bir;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.name = name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> age;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.age = age;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> Boolean <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> sex;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(Boolean sex)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.sex = sex;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> Double <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> salary;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(Double salary)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.salary = salary;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> Date <span class="title function_">getBir</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> bir;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBir</span><span class="params">(Date bir)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.bir = bir;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                  <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                  <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                  <span class="string">&quot;, sex=&quot;</span> + sex +</span><br><span class="line">                  <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                  <span class="string">&quot;, bir=&quot;</span> + bir +</span><br><span class="line">                  <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>CollectionVO</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.vo;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> java.util.List;</span><br><span class="line"> <span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> CollectionVO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> 自定义VO对象</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/21 15:38</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionVO</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> List&lt;String&gt; lists;</span><br><span class="line">     <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getLists</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> lists;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLists</span><span class="params">(List&lt;String&gt; lists)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.lists = lists;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getMaps</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> maps;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.maps = maps;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>ParamController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"> <span class="keyword">import</span> com.study.vo.CollectionVO;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> ParamController</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/21 15:36</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> test</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 用来测试零散类型参数接收</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: name</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: age</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: sex</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: salary</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: bir</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/21 15:44</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String name, Integer age, Boolean sex, Double salary, Date bir)</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;用来测试零散类型参数接收&quot;</span>);</span><br><span class="line">         System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">         System.out.println(<span class="string">&quot;age = &quot;</span> + age);</span><br><span class="line">         System.out.println(<span class="string">&quot;sex = &quot;</span> + sex);</span><br><span class="line">         System.out.println(<span class="string">&quot;salary = &quot;</span> + salary);</span><br><span class="line">         System.out.println(<span class="string">&quot;bir = &quot;</span> + bir);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 访问路径：http://localhost:8888/springmvc01/param/test?name=张三&amp;age=20&amp;sex=true&amp;salary=1234.5&amp;bir=2020/12/12 12:34:56</span></span><br><span class="line"><span class="comment">          * 输出结果：</span></span><br><span class="line"><span class="comment">          *      用来测试零散类型参数接收</span></span><br><span class="line"><span class="comment">          *      name = 张三</span></span><br><span class="line"><span class="comment">          *      age = 20</span></span><br><span class="line"><span class="comment">          *      sex = true</span></span><br><span class="line"><span class="comment">          *      salary = 1234.5</span></span><br><span class="line"><span class="comment">          *      bir = Sat Dec 12 12:34:56 CST 2020</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 注意：</span></span><br><span class="line"><span class="comment">          *      日期默认格式：yyyy/MM/dd HH:mm:ss</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> test1</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 用来测试对象类型的参数接收</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: user</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: name</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/21 15:50</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;test1&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">(User user,String name)</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;用来测试对象类型的参数接收&quot;</span>);</span><br><span class="line">         System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">         System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 访问路径：http://localhost:8888/springmvc01/param/test1?name=张三&amp;age=20&amp;sex=true&amp;salary=1234.5&amp;bir=2020/12/12 12:34:56</span></span><br><span class="line"><span class="comment">          * 输出结果：</span></span><br><span class="line"><span class="comment">          *      用来测试对象类型的参数接收</span></span><br><span class="line"><span class="comment">          *      user = User&#123;name=&#x27;张三&#x27;, age=20, sex=true, salary=1234.5, bir=Sat Dec 12 12:34:56 CST 2020&#125;</span></span><br><span class="line"><span class="comment">          *      name = 张三</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 注意：</span></span><br><span class="line"><span class="comment">          *      此处的User中的name属性和变量name都会赋值</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 总结：</span></span><br><span class="line"><span class="comment">          *      接收对象类型: 也是直接将要接收对象作为控制器方法参数声明</span></span><br><span class="line"><span class="comment">          *      注意:springmvc封装对象时直接根据传递参数key与对象中属性名一致自动封装对象</span></span><br><span class="line"><span class="comment">          *      url提交: http://localhost:8888/springmvc01/param/test1?name=张三&amp;age=20&amp;sex=true&amp;salary=1234.5&amp;bir=2020/12/12 12:34:56</span></span><br><span class="line"><span class="comment">          *      form表单提交:</span></span><br><span class="line"><span class="comment">          *          input  name=&quot;id&quot;</span></span><br><span class="line"><span class="comment">          *          input  name=&quot;name&quot;</span></span><br><span class="line"><span class="comment">          *          input  name=&quot;age&quot;</span></span><br><span class="line"><span class="comment">          *          ....</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> test2</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 用来测试数组类型的参数接收</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: collectionVO</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/21 15:55</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;test2&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">(String[] arrays)</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;用来测试数组类型的参数接收&quot;</span>);</span><br><span class="line">         <span class="keyword">for</span> (String array : arrays) &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;array = &quot;</span> + array);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 访问路径：http://localhost:8888/springmvc01/param/test2?arrays=吃饭&amp;arrays=睡觉&amp;arrays=打豆豆</span></span><br><span class="line"><span class="comment">          * 输出结果：</span></span><br><span class="line"><span class="comment">          *      用来测试数组类型的参数接收</span></span><br><span class="line"><span class="comment">          *      arrays = 吃饭</span></span><br><span class="line"><span class="comment">          *      arrays = 睡觉</span></span><br><span class="line"><span class="comment">          *      arrays = 打豆豆</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 总结：</span></span><br><span class="line"><span class="comment">          *      接收数组: 将要接收数组类型直接声明为方法的形参即可</span></span><br><span class="line"><span class="comment">          *      注意: 保证请求参数多个参数key与声明数组变量名一致,springmvc会自动放入同一个数组中</span></span><br><span class="line"><span class="comment">          *      url提交: http://localhost:8888/springmvc01/param/test2?arrays=吃饭&amp;arrays=睡觉&amp;arrays=打豆豆</span></span><br><span class="line"><span class="comment">          *      form表单提交中多用于checkbox</span></span><br><span class="line"><span class="comment">          *          input   type=&quot;checkbox&quot;  name=&quot;arrays&quot; value=&quot;卖吃饭&quot;</span></span><br><span class="line"><span class="comment">          *          input   type=&quot;checkbox&quot;  name=&quot;arrays&quot; value=&quot;睡觉&quot;</span></span><br><span class="line"><span class="comment">          *          input   type=&quot;checkbox&quot;  name=&quot;qqs&quot; value=&quot;打豆豆&quot;</span></span><br><span class="line"><span class="comment">          *          ....</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> test3</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 用来测试list集合类型参数接收</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: collectionVO </span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.lang.String </span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/21 16:08</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;test3&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">test3</span><span class="params">(CollectionVO collectionVO)</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;用来测试list集合类型参数接收&quot;</span>);</span><br><span class="line">         collectionVO.getLists().forEach(list -&gt; System.out.println(<span class="string">&quot;list = &quot;</span> + list));</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 访问路径：http://localhost:8888/springmvc01/param/test3?lists=吃饭&amp;lists=睡觉&amp;lists=打豆豆</span></span><br><span class="line"><span class="comment">          * 注意：在url中对参数进行赋值的时候要给CollectionVO中的集合赋值而不是collectionVO赋值</span></span><br><span class="line"><span class="comment">          * 输出结果：</span></span><br><span class="line"><span class="comment">          * 用来测试list集合类型参数接收</span></span><br><span class="line"><span class="comment">          *      list = 吃饭</span></span><br><span class="line"><span class="comment">          *      list = 睡觉</span></span><br><span class="line"><span class="comment">          *      list = 打豆豆</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 总结：</span></span><br><span class="line"><span class="comment">          *      springmvc不能直接通过形参列表方式收集集合类型参数</span></span><br><span class="line"><span class="comment">          *      如果要接收集合类型的参数必须将集合放入对象中接收才可以，推荐放入vo对象中接收集合类型，即新创建vo包，包中自定义集合</span></span><br><span class="line"><span class="comment">          *      vo = value object  值对象</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> test4</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 用来测试map集合类型参数接收</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: collectionVO</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/21 16:21</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;test4&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">test4</span><span class="params">(CollectionVO collectionVO)</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;用来测试map集合类型参数接收&quot;</span>);</span><br><span class="line">         collectionVO.getMaps().forEach((k,v)-&gt; System.out.println(<span class="string">&quot;k=&quot;</span> + k+<span class="string">&quot;,v=&quot;</span>+v));</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 访问路径：http://localhost:8888/springmvc01/param/test4?maps[1]=吃饭&amp;maps[2]=睡觉&amp;maps[3]=打豆豆</span></span><br><span class="line"><span class="comment">          * 注意：在url中对参数进行赋值的时候要给CollectionVO中的集合赋值而不是collectionVO赋值</span></span><br><span class="line"><span class="comment">          * 输出结果：</span></span><br><span class="line"><span class="comment">          *      用来测试map集合类型参数接收</span></span><br><span class="line"><span class="comment">          *      k= 1，v= 吃饭</span></span><br><span class="line"><span class="comment">          *      k= 2，v= 睡觉</span></span><br><span class="line"><span class="comment">          *      k= 3，v= 打豆豆</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果map传递参数时出现400错误，如下所示：</p></blockquote><p><img src="/../UpPictures/spring-0Pictures/ff989c4484d647e88c0b01dedef3fd5e.png" alt="img"></p><p>解决方案：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> 如果测试时出现HTTP状态 400-错误的请求，是因为日志显示请求地址中包含了不合法字符.</span><br><span class="line">tomcat高版本严格按照RFC 3986规范解析地址。该规范只允许包含a-z A-Z 0-9 - _ . ~</span><br><span class="line">以及所有保留字符 ! * ’ ( ) ; : @ &amp; = + $ , / ? # [ ]  </span><br><span class="line">  </span><br><span class="line">解决方案：在使用的tomcat文件夹中找到conf，打开后对server.xml进行编辑，在</span><br><span class="line">        &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">                  connectionTimeout=&quot;20000&quot;</span><br><span class="line">                  redirectPort=&quot;8443&quot;/&gt;</span><br><span class="line">后面加上relaxedPathChars=&quot;|&#123;&#125;[],%&quot; relaxedQueryChars=&quot;|&#123;&#125;[],%&quot;，其余不用修改，即：</span><br><span class="line">        &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">                connectionTimeout=&quot;20000&quot;</span><br><span class="line">                redirectPort=&quot;8443&quot; relaxedPathChars=&quot;|&#123;&#125;[],%&quot; relaxedQueryChars=&quot;|&#123;&#125;[],%&quot;/&gt;</span><br><span class="line">保存后，重启tomcat即可解决。</span><br><span class="line">参考链接：https://blog.51cto.com/u_15196075/2765608</span><br></pre></td></tr></table></figure><p><img src="/../UpPictures/spring-0Pictures/image-20240324175449385.png" alt="image-20240324175449385"></p><p><img src="/../UpPictures/spring-0Pictures/ba181e404df14f779b4d85e1cf4e7a48.png" alt="img"></p><p><strong>7.6 接收参数中文乱码解决方案</strong></p><p>param.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">  &lt;!doctype html&gt;</span><br><span class="line">  &lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">      &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">            content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">      &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">      &lt;title&gt;测试参数接收&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">      &lt;h1&gt;测试对象和零散类型参数接收&lt;/h1&gt;</span><br><span class="line">      &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/param/test1&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">          用户姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">          用户年龄：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">          用户性别：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;sex&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">          用户收入：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;salary&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">          用户生日：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bir&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">          &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8888/springmvc01/param.jsp">http://localhost:8888/springmvc01/param.jsp</a></p><p>测试结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">1.英文状态</span><br><span class="line">用来测试对象类型的参数接收</span><br><span class="line">user = User&#123;name=&#x27;xiaosan&#x27;, age=20, sex=false, salary=1000.0, bir=Mon Dec 12 00:00:00 CST 2022&#125;</span><br><span class="line">name = xiaosan</span><br><span class="line"></span><br><span class="line">2.中文状态</span><br><span class="line">用来测试对象类型的参数接收</span><br><span class="line">user = User&#123;name=&#x27;?°?è??&#x27;, age=22, sex=true, salary=800.0, bir=Thu Mar 15 00:00:00 CST 2018&#125;</span><br><span class="line">name = ?°?è??</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>在使用springmvc接收客户端的请求参数的过程中有时会出现中文乱码问题，这是因为springmvc并没有对对象请求参数进行编码控制，如果需要控制需要自行指定。</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 1.针对于GET方式中文乱码解决方案:</span><br><span class="line"> &lt;Connector connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot;/&gt;</span><br><span class="line"> </span><br><span class="line"> # 2.针对POST方式中文乱码解决方案：</span><br><span class="line"> web.xml中配置字符Filter</span><br><span class="line">   &lt;!--配置post请求方式中文乱码的Filter--&gt;</span><br><span class="line">   &lt;filter&gt;</span><br><span class="line">     &lt;filter-name&gt;charset&lt;/filter-name&gt;</span><br><span class="line">     &lt;!--自定义的Filter--&gt;</span><br><span class="line"> &lt;!--    &lt;filter-class&gt;com.study.filter.CharacterEncodingFilter&lt;/filter-class&gt;--&gt;</span><br><span class="line">     &lt;!--spring框架提供的Filter--&gt;</span><br><span class="line">     &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">     &lt;init-param&gt;</span><br><span class="line">       &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">       &lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class="line">     &lt;/init-param&gt;</span><br><span class="line">   &lt;/filter&gt;</span><br><span class="line">   &lt;filter-mapping&gt;</span><br><span class="line">     &lt;filter-name&gt;charset&lt;/filter-name&gt;</span><br><span class="line">     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><p>自定义编码Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">package</span> com.study.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CharacterEncodingFilter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义编码Filter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/22 15:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String encoding;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">this</span>.encoding = filterConfig.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">        System.out.println(encoding);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(encoding);</span><br><span class="line">        servletResponse.setCharacterEncoding(encoding);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p><img src="/../UpPictures/spring-0Pictures/570f674ae228445e8fb1deea3d1b12bf.png" alt="img"></p><p><strong>7.7 总结</strong></p><p><img src="/../UpPictures/spring-0Pictures/9abae0f3887346c0ba66f9427453190b.png" alt="img"></p><h3 id="8-SpringMVC中数据传递机制"><a href="#8-SpringMVC中数据传递机制" class="headerlink" title="8.SpringMVC中数据传递机制"></a>8.SpringMVC中数据传递机制</h3><p><strong>8.1 数据传递机制</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1.数据怎么存</span><br><span class="line">    Servlet 作用域             Struts2  作用域        SpringMVC  作用域</span><br><span class="line"># 2.数据怎么取</span><br><span class="line">    Servlet EL表达式           Struts2  EL表达式      SpringMVC  EL表达式</span><br><span class="line"># 3.数据怎么展示      </span><br><span class="line">    Servlet JSTL标签           Struts2  JSTl标签      SpringMVC  JSTL标签</span><br></pre></td></tr></table></figure><p><strong>8.2 使用forward跳转传递数据</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1.使用servlet中原始的request作用域传递数据</span><br><span class="line">    request.setAttribute(&quot;key&quot;,value);</span><br><span class="line"></span><br><span class="line"># 2.使用是springmvc中封装的Model和ModelMap对象(底层对request作用域封装)</span><br><span class="line">    model.addAttribute(key,value);</span><br><span class="line">    modelMap.addAttribute(key,value);</span><br></pre></td></tr></table></figure><p><strong>8.3 使用Redirect跳转传递数据</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1.使用地址栏进行数据传递</span><br><span class="line">    url?name=zhangsan&amp;age=21</span><br><span class="line"></span><br><span class="line"># 2.使用session作用域</span><br><span class="line">    session.setAttribute(key,value);</span><br><span class="line">    session.getAttribute(key);</span><br></pre></td></tr></table></figure><p><strong>8.4 代码测试</strong></p><blockquote><p>AttributeController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> AttributeController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用来测试SpringMVC中的数据传递机制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/22 20:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;attribute&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttributeController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用forward跳转页面数据传递</span></span><br><span class="line"><span class="comment">     * 1.传递零散类型数据</span></span><br><span class="line"><span class="comment">     * 2.传递对象类型数据</span></span><br><span class="line"><span class="comment">     * 3.传递集合类型数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 可以使用request对象进行数据传递，也可以使用model对象进行数据传递，其底层封装的也是request对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Model model,HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="comment">//1.收集参数</span></span><br><span class="line">        <span class="comment">//2.调用业务方法</span></span><br><span class="line">        <span class="comment">//传递零散类型数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;茶白&quot;</span>;</span><br><span class="line">        <span class="comment">//request.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">        <span class="comment">//传递对象类型数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;光头强&quot;</span>,<span class="number">50</span>,<span class="literal">true</span>,<span class="number">12.12</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//request.setAttribute(&quot;user&quot;,user);</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        <span class="comment">//传递集合类型数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;熊大&quot;</span>,<span class="number">30</span>,<span class="literal">true</span>,<span class="number">6.06</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;熊二&quot;</span>,<span class="number">20</span>,<span class="literal">true</span>,<span class="number">3.03</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(user1, user2);</span><br><span class="line">        <span class="comment">//request.setAttribute(&quot;users&quot;,users);</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;attribute&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用redirect跳转传递数据</span></span><br><span class="line"><span class="comment">     * 传递数据的方式有2种：</span></span><br><span class="line"><span class="comment">     * 1.地址栏?拼接数据</span></span><br><span class="line"><span class="comment">     * 2.session对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">//1.收集数据</span></span><br><span class="line">        <span class="comment">//2.调用业务</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小猫&quot;</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小猪&quot;</span>, <span class="number">3</span>, <span class="literal">false</span>, <span class="number">0.1234</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小狗&quot;</span>, <span class="number">4</span>, <span class="literal">false</span>, <span class="number">1.2345</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小兔&quot;</span>, <span class="number">5</span>, <span class="literal">false</span>, <span class="number">2.3456</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(user1, user2);</span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line">        <span class="comment">//3.流程跳转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/attribute.jsp?name=&quot;</span> + URLEncoder.encode(name,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>attribute.jsp</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">          content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;测试数据传递&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;用来测试request作用域传递数据&lt;/h1&gt;</span><br><span class="line">    获取request作用域数据：$&#123;requestScope.name&#125;&lt;br&gt;</span><br><span class="line">    获取request作用域数据：$&#123;name&#125;&lt;br&gt;</span><br><span class="line">    &lt;hr color=<span class="string">&quot;red&quot;</span>&gt;</span><br><span class="line">    name：$&#123;requestScope.user.name&#125;&lt;br&gt;</span><br><span class="line">    age：$&#123;requestScope.user.age&#125;&lt;br&gt;</span><br><span class="line">    sex：$&#123;requestScope.user.sex&#125;&lt;br&gt;</span><br><span class="line">    salary：$&#123;requestScope.user.salary&#125;&lt;br&gt;</span><br><span class="line">    bir：&lt;fmt:formatDate value=<span class="string">&quot;$&#123;requestScope.user.bir&#125;&quot;</span> pattern=<span class="string">&quot;yyyy-MM-dd&quot;</span>/&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.users&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">        name：$&#123;user.name&#125;&lt;br&gt;</span><br><span class="line">        age: $&#123;user.age&#125;&lt;br&gt;</span><br><span class="line">        sex: $&#123;user.sex&#125;&lt;br&gt;</span><br><span class="line">        salary: $&#123;user.salary&#125;&lt;br&gt;</span><br><span class="line">        bir: &lt;fmt:formatDate value=<span class="string">&quot;$&#123;user.bir&#125;&quot;</span>/&gt;&lt;br&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;测试使用redirect跳转传递数据&lt;/h1&gt;</span><br><span class="line">    获取地址栏数据：$&#123;param.name&#125;&lt;br&gt;</span><br><span class="line">    &lt;hr color=<span class="string">&quot;red&quot;</span>&gt;</span><br><span class="line">    name: $&#123;sessionScope.user.name&#125;&lt;br&gt;</span><br><span class="line">    age: $&#123;sessionScope.user.age&#125;&lt;br&gt;</span><br><span class="line">    sex: $&#123;sessionScope.user.sex&#125;&lt;br&gt;</span><br><span class="line">    salary: $&#123;sessionScope.user.salary&#125;&lt;br&gt;</span><br><span class="line">    bir: $&#123;sessionScope.user.bir&#125;&lt;br&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;sessionScope.users&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">        name：$&#123;user.name&#125;&lt;br&gt;</span><br><span class="line">        age: $&#123;user.age&#125;&lt;br&gt;</span><br><span class="line">        sex: $&#123;user.sex&#125;&lt;br&gt;</span><br><span class="line">        salary: $&#123;user.salary&#125;&lt;br&gt;</span><br><span class="line">        bir: &lt;fmt:formatDate value=<span class="string">&quot;$&#123;user.bir&#125;&quot;</span>/&gt;&lt;br&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p>（1）<a href="http://localhost:8888/springmvc01/attribute/test">http://localhost:8888/springmvc01/attribute/test</a></p><p><img src="/../UpPictures/spring-0Pictures/ce2bfaad50824e7f94883db8f95a364c.png" alt="img"></p><p>  （2）<a href="http://localhost:8888/springmvc01/attribute/test1">http://localhost:8888/springmvc01/attribute/test1</a></p><p><img src="/../UpPictures/spring-0Pictures/df4c00f87d1f4274b60391181073fc9a.png" alt="img"></p><p><strong>8.5 总结</strong></p><p><img src="/../UpPictures/spring-0Pictures/56215a404fe34338915bc9391a372856.png" alt="img"></p><h3 id="9-SpringMVC处理静态资源拦截"><a href="#9-SpringMVC处理静态资源拦截" class="headerlink" title="9.SpringMVC处理静态资源拦截"></a>9.SpringMVC处理静态资源拦截</h3><p><img src="/../UpPictures/spring-0Pictures/7255f98f42d9405c9d5c576f1b3edaaf.png" alt="img"></p><h3 id="10-Spring-SpringMVC-MyBatis整合编程"><a href="#10-Spring-SpringMVC-MyBatis整合编程" class="headerlink" title="10.Spring+SpringMVC+MyBatis整合编程"></a>10.Spring+SpringMVC+MyBatis整合编程</h3><p>1.新建maven-webapp工程，添加java、resources目录及test目录下的java、resources</p><p>2.引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring核心及相关依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--springmvc核心依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--servlet-api--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--jstl--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> &lt;/dependency</span><br></pre></td></tr></table></figure><p>3.Spring+Mybatis整合</p><p>3.1 新建表</p><p><img src="/../UpPictures/spring-0Pictures/0309ee62bf334366a6278f76d9a58e49.png" alt="img"></p><p>3.2 新建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">package</span> com.study.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/23 10:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date bir;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, bir=&quot;</span> + bir +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String id, String name, Integer age, Date bir)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.bir = bir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBir</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBir</span><span class="params">(Date bir)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bir = bir;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.3 新建DAO接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.dao;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> UserDAO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/23 10:45</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDAO</span> &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> selectAllUsers</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 查询所有用户</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.util.List&lt;com.study.entity.User&gt;</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/23 10:50</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     List&lt;User&gt; <span class="title function_">selectAllUsers</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> insertUser</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 添加用户</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: user</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/23 10:49</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>3.4 新建Mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line">  <span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">          <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">          <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.study.dao.UserDAO&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--selectAllUsers--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">          select id,name,age,bir from t_user</span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">&lt;!--insertUser--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">          insert into t_user values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;,#&#123;bir&#125;)</span><br><span class="line">      <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.5 新建Service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.service;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> java.util.List;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@ClassName</span> UserService</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/23 10:55</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> selectAllUsers</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 查询所有用户</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.util.List&lt;com.study.entity.User&gt;</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/23 10:50</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      List&lt;User&gt; <span class="title function_">selectAllUsers</span><span class="params">()</span>;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> insertUser</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 添加用户</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span>: user</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/23 10:49</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>3.6 新建ServiceImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.service;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.study.dao.UserDAO;</span><br><span class="line"> <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> java.util.List;</span><br><span class="line"> <span class="keyword">import</span> java.util.UUID;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> UserServiceImpl</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/23 10:55</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"> <span class="meta">@Transactional</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="meta">@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">     <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> userDAO.selectAllUsers();</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">         user.setId(UUID.randomUUID().toString());</span><br><span class="line">         userDAO.insertUser(user);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.7 引入spring.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.study&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--创建数据源对象--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--创建SqlSessionFactory--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/study/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.study.entity&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--创建DAO--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.study.dao&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--开启注解式事务生效--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.8 引入log4j.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=ERROR,stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.conversionPattern=[%p] %d&#123;yyyy-MM-dd&#125; %m%n</span><br><span class="line"></span><br><span class="line">log4j.logger.com.study.dao=DEBUG</span><br><span class="line">log4j.logger.org.springframework=ERROR</span><br></pre></td></tr></table></figure><p>3.9 测试Service方法是否可以成功调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.test;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"> <span class="keyword">import</span> com.study.service.UserService;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> TestUserService</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/23 11:11</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUserService</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">         <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">         List&lt;User&gt; users = userService.selectAllUsers();</span><br><span class="line">         <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] 2022-04-23 ==&gt;  Preparing: select id,name,age,bir from t_user </span><br><span class="line">[DEBUG] 2022-04-23 ==&gt; Parameters: </span><br><span class="line">[DEBUG] 2022-04-23 &lt;==      Total: 18</span><br><span class="line">user = User&#123;id=&#x27;1&#x27;, name=&#x27;张三&#x27;, age=10, bir=Fri Apr 01 00:00:00 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;2&#x27;, name=&#x27;李四&#x27;, age=20, bir=Sat Apr 02 00:00:00 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;2d237778-835d-477b-9721-fe6f575064b9&#x27;, name=&#x27;波比&#x27;, age=18, bir=Sun Feb 02 00:00:00 CST 2020&#125;</span><br><span class="line">user = User&#123;id=&#x27;2f278828-6422-432d-ab1b-a727b33c23bc&#x27;, name=&#x27;小胖墩&#x27;, age=3, bir=Mon Apr 11 21:43:57 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;3&#x27;, name=&#x27;王五&#x27;, age=30, bir=Sun Apr 03 00:00:00 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;4&#x27;, name=&#x27;灰太狼&#x27;, age=60, bir=Sun Apr 10 09:56:17 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;5&#x27;, name=&#x27;小超超&#x27;, age=36, bir=Sun Apr 10 09:55:41 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;586a5f71-836c-4171-a038-4620fe0f9354&#x27;, name=&#x27;葫芦娃&#x27;, age=5, bir=Tue Apr 12 09:45:17 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;6&#x27;, name=&#x27;小呆呆&#x27;, age=60, bir=Sun Apr 10 09:55:43 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;7&#x27;, name=&#x27;小超超&#x27;, age=36, bir=Sun Apr 10 09:55:44 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;7a1a00aa-1507-461a-95c0-50110d6f4333&#x27;, name=&#x27;唐三&#x27;, age=20, bir=Fri Apr 15 00:00:00 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;8&#x27;, name=&#x27;胖嘟嘟&#x27;, age=50, bir=Sun Apr 10 09:55:39 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;8a3e8ab8-5abc-44e1-9aec-31f3978d97f2&#x27;, name=&#x27;小胖墩&#x27;, age=3, bir=Tue Apr 12 10:23:33 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;9&#x27;, name=&#x27;茶白&#x27;, age=25, bir=Sun Apr 10 09:55:52 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;985cd035-dedc-4e84-973a-a5fdaa2b8475&#x27;, name=&#x27;喜洋洋&#x27;, age=8, bir=Tue Oct 10 00:00:00 CST 2000&#125;</span><br><span class="line">user = User&#123;id=&#x27;a6be9263-f05f-415f-855e-33843b22e71d&#x27;, name=&#x27;皮卡丘&#x27;, age=10, bir=Thu Apr 14 00:00:00 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;cd280176-68b2-4ceb-b781-ba2f5e1fbeff&#x27;, name=&#x27;小胖墩&#x27;, age=3, bir=Tue Apr 12 10:21:18 CST 2022&#125;</span><br><span class="line">user = User&#123;id=&#x27;e3863fd3-173c-46f4-a753-c72f7c92ad56&#x27;, name=&#x27;小猫咪&#x27;, age=3, bir=Mon Apr 11 21:36:31 CST 2022&#125;</span><br></pre></td></tr></table></figure><p>4.Spring+SpringMVC整合</p><p>4.1 配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置工厂监听器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!--配置工厂配置文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!--配置springmvc核心servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!--配置post请求参数的中文乱码问题--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charset<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charset<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.2 引入springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">      http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">      http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">      http://www.springframework.org/schema/context/spring-context.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">      http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="string"><span class="tag">      http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.study.controller&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--配置处理映射器和处理适配器--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--解决静态资源拦截的配置--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span>​</span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.3 新建Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line"> <span class="keyword">import</span> com.study.service.UserService;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"> <span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> UserController</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/23 12:12</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> UserService userService;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@RequestMapping(&quot;selectAllUsers&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">selectAllUsers</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">         <span class="comment">//1.收集数据</span></span><br><span class="line">         <span class="comment">//2.调用业务对象</span></span><br><span class="line">         List&lt;User&gt; users = userService.selectAllUsers();</span><br><span class="line">         request.setAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;selectAllUsers&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@RequestMapping(&quot;insertUser&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">insertUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">         <span class="comment">//1.收集参数</span></span><br><span class="line">         <span class="comment">//2.调用业务方法</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             userService.insertUser(user);</span><br><span class="line">             <span class="keyword">return</span> <span class="string">&quot;redirect:/user/selectAllUsers&quot;</span>;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">             <span class="keyword">return</span> <span class="string">&quot;redirect:/insertUser.jsp&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>4.4 添加jsp文件</p><blockquote><p>selectAllUsers.jsp</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"> &lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line"> &lt;!doctype html&gt;</span><br><span class="line"> &lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">     &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">     &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">           content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">     &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">     &lt;title&gt;用来展示所有用户信息&lt;/title&gt;</span><br><span class="line">     &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/js/jquery-3.5.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         $(function()&#123;</span><br><span class="line">             alert();</span><br><span class="line">         &#125;)</span><br><span class="line">     &lt;/script&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">     &lt;h1&gt;展示用户列表&lt;/h1&gt;</span><br><span class="line">     &lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.users&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">         $&#123;user.id&#125; ==== $&#123;user.name&#125; ==== $&#123;user.age&#125; ==== $&#123;user.bir&#125; &lt;br&gt;</span><br><span class="line">     &lt;/c:forEach&gt;</span><br><span class="line"> </span><br><span class="line">     &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/insertUser.jsp&quot;</span>&gt;添加用户信息&lt;/a&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>insertUser.jsp</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">          content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;添加用户信息&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;添加用户信息&lt;/h1&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/insertUser&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">        年龄:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">        生日:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bir&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;保存用户信息&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>5.部署tomcat服务器测试</p><p><img src="/../UpPictures/spring-0Pictures/image-20240324181211354.png" alt="image-20240324181211354"></p><p> 测试结果：</p><p><img src="/../UpPictures/spring-0Pictures/b856b89ea1ba4e46ad45df818cfa7114.png" alt="img"></p><p>6.总结</p><p><img src="/../UpPictures/spring-0Pictures/b725fb569a1b48e0a5461b6d23f55416.png" alt="img"></p><p>7.项目目录结构：</p><p><img src="/../UpPictures/spring-0Pictures/c860f271b8424ce7a83ef3ecc3c744a7.png" alt="img"></p><h3 id="11-文件上传"><a href="#11-文件上传" class="headerlink" title="11.文件上传"></a>11.文件上传</h3><blockquote><p>文件上传:  指将用户本地计算机中的文件上传到服务器上。</p></blockquote><p><strong>1.springmvc中文件上传流程：</strong></p><p><img src="/../UpPictures/spring-0Pictures/cffcfe268042494b9280e718536abd2b.png" alt="img"></p><p><strong>2.代码实现</strong></p><p>新建maven-webapp工程，添加java、resources目录</p><p>pom.xml引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring核心及相关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--springmvc核心依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jstl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--commons-fileupload--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--@ResponseBody注解在转换json时使用jackson依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!--配置post请求方式中文乱码的Filter--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charset<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charset<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!--配置springmvc核心servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--配置springmvc配置文件位置--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.study.controller&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">&lt;!--开启注解驱动--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">&lt;!--配置静态资源拦截--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">&lt;!--配置文件上传解析器：id必须指定为multipartResolver--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--控制文件上传大小，单位：字节，默认没有大小限制，这里设置为2M--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2097152&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 开发上传页面upload.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line"> &lt;!doctype html&gt;</span><br><span class="line"> &lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">     &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">     &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">           content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">     &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">     &lt;title&gt;测试文件上传&lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">     &lt;h1&gt;文件上传&lt;/h1&gt;</span><br><span class="line">     &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/upload&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">         &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;img&quot;</span>/&gt;</span><br><span class="line">         &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传文件&quot;</span>&gt;</span><br><span class="line">     &lt;/form&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>开发控制器FileController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> org.apache.commons.io.FilenameUtils;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"> <span class="keyword">import</span> java.io.File;</span><br><span class="line"> <span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> <span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"> <span class="keyword">import</span> java.util.UUID;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@ClassName</span> FileController</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/24 9:24</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;file&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@MethodName</span> upload</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Description</span> 测试文件上传</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>: img</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@Date</span> 2022/4/24 9:34</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;upload&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile img, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">         <span class="comment">//获取上传文件属性</span></span><br><span class="line">         System.out.println(<span class="string">&quot;文件原始名称为：&quot;</span> + img.getOriginalFilename());</span><br><span class="line">         System.out.println(<span class="string">&quot;文件大小：&quot;</span> + img.getSize());</span><br><span class="line">         System.out.println(<span class="string">&quot;文件类型：&quot;</span> + img.getContentType());</span><br><span class="line"> </span><br><span class="line">         <span class="comment">//1.根据upload相对路径获取部署到服务之后的绝对路径</span></span><br><span class="line">         <span class="comment">//获取上传路径</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">         System.out.println(<span class="string">&quot;上传路径为：&quot;</span> + realPath);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">//2.修改文件原始名称</span></span><br><span class="line">         <span class="comment">//获取原始文件名称</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">originalFileName</span> <span class="operator">=</span> img.getOriginalFilename();</span><br><span class="line">         <span class="comment">//获取原始文件后缀 FilenameUtils为工具类，里面提供了一些静态方法</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> FilenameUtils.getExtension(originalFileName);</span><br><span class="line">         <span class="comment">//设置新文件名</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>) + <span class="string">&quot;.&quot;</span> + extension;</span><br><span class="line">         System.out.println(<span class="string">&quot;文件新名称为: &quot;</span> + newFileName);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">//3.生成当天日期目录</span></span><br><span class="line">         <span class="type">LocalDate</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">         <span class="comment">//realPath：父路径，now.toString()：子路径</span></span><br><span class="line">         <span class="type">File</span> <span class="variable">dateDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath, now.toString());</span><br><span class="line">         <span class="keyword">if</span>(!dateDir.exists())</span><br><span class="line">             dateDir.mkdirs();</span><br><span class="line">         System.out.println(<span class="string">&quot;日期目录为：&quot;</span> + dateDir.getName());</span><br><span class="line"> </span><br><span class="line">         <span class="comment">//4.上传文件到服务器中对应日期的目录中</span></span><br><span class="line">         <span class="comment">//dateDir：存放文件的日期目录，newFileName：新文件名</span></span><br><span class="line">         img.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(dateDir,newFileName));</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>部署到tomcat服务器上进行测试</p><p><img src="/../UpPictures/spring-0Pictures/image-20240324181730799.png" alt="image-20240324181730799"></p><p>访问路径：<a href="http://localhost:8888/springmvc02/upload.jsp%EF%BC%8C%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E5%90%8E%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0">http://localhost:8888/springmvc02/upload.jsp，选择文件后进行上传</a></p><p><img src="/../UpPictures/spring-0Pictures/image-20240324181743757.png" alt="image-20240324181743757"></p><p>上传成功后跳转到index.jsp页面：</p><p><img src="/../UpPictures/spring-0Pictures/image-20240324181755027.png" alt="image-20240324181755027"></p><p>控制台输出文件信息、target目录下出现upload本地上传的文件：</p><p><img src="/../UpPictures/spring-0Pictures/bdd4087a31c84b9d9912ea420325e288.png" alt="img"></p><p><strong>3.springmvc中文件上传细节处理：</strong></p><p><img src="/../UpPictures/spring-0Pictures/39e63aa00537419291d79bade6d5a23b.png" alt="img"></p><h3 id="12-文件下载"><a href="#12-文件下载" class="headerlink" title="12.文件下载"></a>12.文件下载</h3><blockquote><p><strong>文件下载：</strong>即将服务器上的文件下载到当前用户访问的计算机。</p></blockquote><p><strong>1.思路</strong></p><p><img src="/../UpPictures/spring-0Pictures/d6d77e55bc3549638ba2b5019ea03209.png" alt="img"></p><p><strong>完善upload.jsp页面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>文件下载<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          a.txt <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=a.txt&quot;</span>&gt;</span>在线打开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=a.txt&amp;openStyle=attach&quot;</span>&gt;</span>附件下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          b.rar <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=b.rar&quot;</span>&gt;</span>在线打开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=b.rar&amp;openStyle=attach&quot;</span>&gt;</span>附件下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          c.png <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=c.png&quot;</span>&gt;</span>在线打开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=c.png&amp;openStyle=attach&quot;</span>&gt;</span>附件下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          自我介绍.txt <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=自我介绍.txt&quot;</span>&gt;</span>在线打开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?fileName=自我介绍.txt&amp;openStyle=attach&quot;</span>&gt;</span>附件下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加测试文件：</p><p><img src="/../UpPictures/spring-0Pictures/7ae1e72395614b20985fb55a01c1c5b6.png" alt="img"></p><p><strong>完善控制器FileController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@MethodName</span> download</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> 测试文件下载</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>: openStyle 文件打开方式</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>: fileName 文件名</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>: request</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>: response</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/25 16:27</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;download&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String openStyle, String fileName, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">     <span class="comment">//三目表达式 若不设置打开方式，即openStyle为null时，说明文件可以在线打开</span></span><br><span class="line">     <span class="comment">//         若设置了文件打开方式，即openStyle不为null，说明文件可以以压缩包进行下载</span></span><br><span class="line">     openStyle = openStyle == <span class="literal">null</span> ? <span class="string">&quot;inline&quot;</span>:<span class="string">&quot;attachment&quot;</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;下载文件的名称为：&quot;</span> + fileName);</span><br><span class="line">     <span class="comment">//1.根据下载相对目录获取下载目录在服务器部署之后的绝对目录</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/download&quot;</span>);</span><br><span class="line">     System.out.println(<span class="string">&quot;绝对路径：&quot;</span> + realPath);</span><br><span class="line">     <span class="comment">//2.通过文件输入流读取文件                               文件路径     文件名</span></span><br><span class="line">     <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(realPath, fileName));</span><br><span class="line">     <span class="comment">//3.解决流乱码问题</span></span><br><span class="line">     response.setContentType(<span class="string">&quot;text/plain;charset=UTF-8&quot;</span>);</span><br><span class="line">     <span class="comment">//4.判断是在线打开还是下载附件                   openStyle：attachment 附件下载、online 在线打开</span></span><br><span class="line">     response.setHeader(<span class="string">&quot;content-disposition&quot;</span>,openStyle + <span class="string">&quot;;fileName=&quot;</span> + URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">     <span class="comment">//5.获取响应输出流</span></span><br><span class="line">     <span class="type">ServletOutputStream</span> <span class="variable">sos</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//6.处理下载流赋值</span></span><br><span class="line">     <span class="comment">//流操作使用Utils工具类：1.操作io流用IOUtils；2.操作file用FileUtils</span></span><br><span class="line">     IOUtils.copy(fis,sos);</span><br><span class="line">     IOUtils.closeQuietly(fis);<span class="comment">//优雅关闭，安静关流</span></span><br><span class="line">     IOUtils.closeQuietly(sos);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     <span class="comment">/*//传统写法：流操作读写</span></span><br><span class="line"><span class="comment">     int len;</span></span><br><span class="line"><span class="comment">     byte[] b = new byte[1024];</span></span><br><span class="line"><span class="comment">     while(true)&#123;</span></span><br><span class="line"><span class="comment">         len = fis.read(b);</span></span><br><span class="line"><span class="comment">         if(len == -1)//读到末尾</span></span><br><span class="line"><span class="comment">             break;</span></span><br><span class="line"><span class="comment">         sos.write(b,0,len);</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">     //释放资源</span></span><br><span class="line"><span class="comment">     fis.close();</span></span><br><span class="line"><span class="comment">     sos.close();*/</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>​    <strong>注意：</strong>下载时必须设置响应的头信息，指定文件以何种方式保存，另外，下载文件的控制器不能存在返回值，代表响应只用来下载文件信息。</p></blockquote><p><strong>启动服务器进行测试</strong></p><p>访问路径：<a href="http://localhost:8888/springmvc02/upload.jsp">http://localhost:8888/springmvc02/upload.jsp</a></p><p><img src="/../UpPictures/spring-0Pictures/image-20240324182407464.png" alt="image-20240324182407464"></p><p>若文件可以在线打开，点击“在线打开”后，文件在浏览器页面上进行显示；</p><p>文件不能在线打开，则点击“在线打开”后文件会以附件形式下载；</p><p>点击“附件下载”后文件均可以以附件形式进行下载</p><h3 id="13-springmvc与Ajax的集成（-ResponseBody注解使用）"><a href="#13-springmvc与Ajax的集成（-ResponseBody注解使用）" class="headerlink" title="13.springmvc与Ajax的集成（@ResponseBody注解使用）"></a>13.springmvc与Ajax的集成（@ResponseBody注解使用）</h3><blockquote><p>Ajax：异步处理、局部更新数据、在处理响应的时候只认json格式的字符串</p><p>fastjson：阿里巴巴提供的转json格式工具</p><p>springmvc提供的@ResponseBody注解：为了进一步方便控制器与ajax集成，springmvc提供了@responseBody注解用在方法的返回值上，代表可以将方法的返回值转换为json格式字符串并响应到前台，省去了通过第三方工具转换json的过程。</p></blockquote><p><strong>1.思路</strong></p><p><img src="/../UpPictures/spring-0Pictures/2a3da693b5494534bdbe93f08c74dcf2.png" alt="img"></p><p><strong>2.代码实现</strong></p><p><strong>引入相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--@ResponseBody注解在转换json时使用jackson依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>开发实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.entity;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@ClassName</span> User</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/26 11:51</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> String id;</span><br><span class="line">      <span class="keyword">private</span> String name;</span><br><span class="line">      <span class="keyword">private</span> Integer age;</span><br><span class="line">      <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> <span class="comment">//json日期格式转换（jackson依赖提供）</span></span><br><span class="line">      <span class="keyword">private</span> Date bir;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                  <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                  <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                  <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                  <span class="string">&quot;, bir=&quot;</span> + bir +</span><br><span class="line">                  <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String id, String name, Integer age, Date bir)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.id = id;</span><br><span class="line">          <span class="built_in">this</span>.name = name;</span><br><span class="line">          <span class="built_in">this</span>.age = age;</span><br><span class="line">          <span class="built_in">this</span>.bir = bir;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> id;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.id = id;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.name = name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> age;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.age = age;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> Date <span class="title function_">getBir</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> bir;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBir</span><span class="params">(Date bir)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.bir = bir;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><strong>开发控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.controller;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line">  <span class="keyword">import</span> com.study.entity.User;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line">  <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">  <span class="keyword">import</span> java.util.*;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@ClassName</span> JSonController</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/26 11:42</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Controller</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;json&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonController</span> &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> test</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 测试<span class="doctag">@ResponseBody</span>注解  </span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.util.Map&lt;java.lang.String,java.lang.String&gt; </span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/26 12:11</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">      <span class="meta">@ResponseBody</span></span><br><span class="line">      <span class="keyword">public</span> Map&lt;String,String&gt; <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">          Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">          map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;测试成功&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> map;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> findAll</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 使用阿里fastjson转换json</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span>: response</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/26 12:05</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;findAll&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAll</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">          <span class="comment">//1.收集数据</span></span><br><span class="line">          <span class="comment">//2.调用业务</span></span><br><span class="line">          List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">          users.add(<span class="keyword">new</span> <span class="title class_">User</span>(UUID.randomUUID().toString(),<span class="string">&quot;熊大&quot;</span>,<span class="number">20</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">          users.add(<span class="keyword">new</span> <span class="title class_">User</span>(UUID.randomUUID().toString(),<span class="string">&quot;熊二&quot;</span>,<span class="number">10</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">          users.add(<span class="keyword">new</span> <span class="title class_">User</span>(UUID.randomUUID().toString(),<span class="string">&quot;光头强&quot;</span>,<span class="number">50</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">          <span class="comment">//fastjson</span></span><br><span class="line">          <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSONObject.toJSONStringWithDateFormat(users, <span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">          response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">          response.getWriter().println();</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> showAll</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 使用springmvc提供的注解<span class="doctag">@ResponseBody</span>，将控制器方法的返回值转为json,并响应给前台</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: java.util.List&lt;com.study.entity.User&gt;</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/26 12:06</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@RequestMapping(&quot;showAll&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> <span class="meta">@ResponseBody</span> List&lt;User&gt; <span class="title function_">showAll</span><span class="params">()</span>&#123;</span><br><span class="line">          <span class="comment">//1.收集数据</span></span><br><span class="line">          <span class="comment">//2.调用业务</span></span><br><span class="line">          List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">          users.add(<span class="keyword">new</span> <span class="title class_">User</span>(UUID.randomUUID().toString(),<span class="string">&quot;熊大&quot;</span>,<span class="number">20</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">          users.add(<span class="keyword">new</span> <span class="title class_">User</span>(UUID.randomUUID().toString(),<span class="string">&quot;熊二&quot;</span>,<span class="number">10</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">          users.add(<span class="keyword">new</span> <span class="title class_">User</span>(UUID.randomUUID().toString(),<span class="string">&quot;光头强&quot;</span>,<span class="number">50</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">          <span class="keyword">return</span> users;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>开发json.jsp页面</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">  &lt;!doctype html&gt;</span><br><span class="line">  &lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">      &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">            content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">      &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">      &lt;title&gt;测试springmvc与ajax集成&lt;/title&gt;</span><br><span class="line">      &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/js/jquery-3.5.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script&gt;</span><br><span class="line">          $(function()&#123;</span><br><span class="line">              $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">                  &lt;%--$.get(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/json/showAll&quot;</span>,function(res)&#123;--%&gt;</span><br><span class="line">                  &lt;%--    console.log(res)--%&gt;</span><br><span class="line">                  &lt;%--&#125;,<span class="string">&quot;JSON&quot;</span>);--%&gt;</span><br><span class="line">                  $.get(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/json/showAll&quot;</span>,function(res)&#123;</span><br><span class="line">                      $.each(res,function(i,user)&#123;</span><br><span class="line">                          <span class="keyword">var</span> ul= $(<span class="string">&quot;&lt;ul/&gt;&quot;</span>);</span><br><span class="line">                          <span class="type">var</span> <span class="variable">idLi</span> <span class="operator">=</span> $(<span class="string">&quot;&lt;li/&gt;&quot;</span>).text(user.id);</span><br><span class="line">                          <span class="type">var</span> <span class="variable">nameLi</span> <span class="operator">=</span> $(<span class="string">&quot;&lt;li/&gt;&quot;</span>).text(user.name);</span><br><span class="line">                          <span class="type">var</span> <span class="variable">ageLi</span> <span class="operator">=</span> $(<span class="string">&quot;&lt;li/&gt;&quot;</span>).text(user.age);</span><br><span class="line">                          <span class="type">var</span> <span class="variable">birLi</span> <span class="operator">=</span> $(<span class="string">&quot;&lt;li/&gt;&quot;</span>).text(user.bir);</span><br><span class="line">                          ul.append(idLi).append(nameLi).append(ageLi).append(birLi);</span><br><span class="line">                          $(<span class="string">&quot;#bd&quot;</span>).append(ul);</span><br><span class="line">                      &#125;)</span><br><span class="line">                  &#125;,<span class="string">&quot;JSON&quot;</span>);</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;)</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body id=<span class="string">&quot;bd&quot;</span>&gt;</span><br><span class="line">      &lt;button id=<span class="string">&quot;btn&quot;</span>&gt;显示一群人&lt;/button&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>启动服务器进行测试</p><p>访问路径：<a href="http://localhost:8888/springmvc02/json/test">http://localhost:8888/springmvc02/json/test</a></p><p><img src="/../UpPictures/spring-0Pictures/image-20240324182727287.png" alt="image-20240324182727287"></p><p>访问路径：<a href="http://localhost:8888/springmvc02/json.jsp">http://localhost:8888/springmvc02/json.jsp</a></p><p><img src="/../UpPictures/spring-0Pictures/image-20240324182740973.png" alt="image-20240324182740973"></p><p>访问路径：<a href="http://localhost:8888/springmvc02/json/findAll">http://localhost:8888/springmvc02/json/findAll</a></p><p><img src="/../UpPictures/spring-0Pictures/image-20240324182755085.png" alt="image-20240324182755085"></p><p>访问路径：<a href="http://localhost:8888/springmvc02/json/showAll">http://localhost:8888/springmvc02/json/showAll</a></p><p><img src="/../UpPictures/spring-0Pictures/image-20240324182808605.png" alt="image-20240324182808605"></p><h3 id="14-SpringMVC中拦截器"><a href="#14-SpringMVC中拦截器" class="headerlink" title="14.SpringMVC中拦截器"></a>14.SpringMVC中拦截器</h3><p><img src="/../UpPictures/spring-0Pictures/a7fef079179b45bd82c665b5f91d3dc4.png" alt="img"></p><p><strong>1 作用</strong><br>       类似于javaweb中的Filter，用来对控制器请求进行拦截，可以将多个Controller中执行的共同代码放入拦截器中执行，减少Controller类中代码的冗余。</p><p><strong>2 特点</strong><br>拦截器器只能拦截Controller的请求，不能拦截jsp、静态资源等相关请求</p><p>拦截器可中断用户的请求轨迹</p><p>请求先经过拦截器，之后还会经过拦截器</p><p><strong>3 自定义拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MyInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/26 15:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//执行顺序：1、2、3、4</span></span><br><span class="line">    <span class="comment">//1.请求会最先进入拦截器中的preHandler方法，执行preHandler方法中内容</span></span><br><span class="line">    <span class="comment">//return true表示放行请求；false表示中断请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(((HandlerMethod)o).getMethod().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;===========1=============&quot;</span>);</span><br><span class="line"><span class="comment">//        //强制用户登录</span></span><br><span class="line"><span class="comment">//        Object user = httpServletRequest.getSession().getAttribute(&quot;user&quot;);</span></span><br><span class="line"><span class="comment">//        if(user==null)&#123;</span></span><br><span class="line"><span class="comment">//            //重定向到登录页面</span></span><br><span class="line"><span class="comment">//            httpServletResponse.sendRedirect(httpServletRequest.getContextPath() + &quot;/login.jsp&quot;);</span></span><br><span class="line"><span class="comment">//            return false;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.当控制器方法执行结束以后，会返回拦截器中，执行拦截器中的postHandler方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(modelAndView);</span><br><span class="line">        System.out.println(<span class="string">&quot;===========3=============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.postHandler执行完成之后响应请求，在响应请求完成后，会执行afterCompletion方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(e!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========4=============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.开发控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@MethodName</span> testInterceptor</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> 测试拦截器</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span> 2022/4/26 15:47</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;interceptor&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">testInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;===========2=============&quot;</span>);</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;程序出错啦！&quot;</span>);</span><br><span class="line"> <span class="comment">//        return &quot;index&quot;;//此处的ModelAndView只有view，即index</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>5.springmvc.xml中配置拦截器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册拦截器--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.study.interceptors.MyInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--配置一个具体的拦截器--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--配置拦截哪个路径--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/json/*&quot;</span>/&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--配置不拦截哪个路径--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/json/showAll&quot;</span>/&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--使用哪个拦截器--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;myInterceptor&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：&#x2F;*代表拦截所有请求路径</p></blockquote><p><strong>6 启动服务测试拦截器</strong></p><p>访问路径：<a href="http://localhost:8888/springmvc02/json/interceptor">http://localhost:8888/springmvc02/json/interceptor</a></p><p>控制台输出结果：</p><p>（1）正常执行时</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">testInterceptor</span><br><span class="line">===========1=============</span><br><span class="line">===========2=============</span><br><span class="line">ModelAndView: reference to view with name &#x27;index&#x27;; model is &#123;&#125;</span><br><span class="line">===========3=============</span><br><span class="line">===========4=============</span><br></pre></td></tr></table></figure><p>（2）出错时</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">testInterceptor</span><br><span class="line">===========1=============</span><br><span class="line">===========2=============</span><br><span class="line">程序出错啦！</span><br><span class="line">===========4=============</span><br></pre></td></tr></table></figure><p><img src="/../UpPictures/spring-0Pictures/3bc2e2ffae5c42da91529979d2791dc1.png" alt="img"></p><p>访问路径：<a href="http://localhost:8888/springmvc02/json/findAll">http://localhost:8888/springmvc02/json/findAll</a></p><p><img src="/../UpPictures/spring-0Pictures/image-20240324183305859.png" alt="image-20240324183305859"></p><p> 控制台输出结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">findAll</span><br><span class="line">===========1=============</span><br><span class="line">null</span><br><span class="line">===========3=============</span><br><span class="line">===========4=============</span><br></pre></td></tr></table></figure><p>访问路径：<a href="http://localhost:8888/springmvc02/json/showAll">http://localhost:8888/springmvc02/json/showAll</a></p><p><img src="/../UpPictures/spring-0Pictures/image-20240324183316379.png" alt="image-20240324183316379"></p><p>控制台无输出结果</p><h3 id="15-SpringMVC全局异常处理"><a href="#15-SpringMVC全局异常处理" class="headerlink" title="15.SpringMVC全局异常处理"></a>15.SpringMVC全局异常处理</h3><p><img src="/../UpPictures/spring-0Pictures/86471303e3b24530a9fba65c5c081478.png" alt="img"></p><p><strong>1.作用</strong></p><p>​    当控制器中某个方法在运行过程中突然发生运行时异常时，为了增加用户体验不能出现500错误代码，应该给用户良好展示错误界面，全局异常处理就能更好解决这个问题。</p><p><strong>2 控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@MethodName</span> testInterceptor</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> 测试拦截器</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/26 15:47</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;interceptor&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">testInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;===========2=============&quot;</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNameNotFoundException</span>(<span class="string">&quot;保存失败，请稍后再试......&quot;</span>);</span><br><span class="line">      <span class="comment">//throw new RuntimeException(&quot;程序出错啦......&quot;);</span></span><br><span class="line">      <span class="comment">//return &quot;index&quot;;//此处的ModelAndView只有view，即index</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>3 自定义异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">package</span> com.study.exceptions;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> UserNameNotFoundException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/26 19:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserNameNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserNameNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4 全局异常处理开发</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.handlerexception;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> com.study.exceptions.UserNameNotFoundException;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line">  <span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@ClassName</span> GlobalExceptionResolver</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/26 19:22</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span> &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@MethodName</span> resolveException</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span> 用来处理发生异常时的方法</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span>: httpServletRequest 当前请求对象</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span>: httpServletResponse 当前请求对应的响应对象</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span>: o 当前请求的方法对象</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span>: e 当前出现异常时的异常对象</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: org.springframework.web.servlet.ModelAndView</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span> chabai</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span> 2022/4/26 19:24</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;进入全局异常处理器获取的异常信息为：&quot;</span> + e.getMessage());</span><br><span class="line">          <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">          <span class="comment">//基于不同业务异常跳转到不同页面</span></span><br><span class="line">          <span class="keyword">if</span>(e <span class="keyword">instanceof</span> UserNameNotFoundException)&#123;</span><br><span class="line">              modelAndView.setViewName(<span class="string">&quot;redirect:/login.jsp&quot;</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              modelAndView.setViewName(<span class="string">&quot;redirect:/error.jsp&quot;</span>);<span class="comment">//相当于 return &quot;error&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//modelAndView中model默认放入request作用域，如果使用redirect跳转，model中数据会自动拼接到跳转url</span></span><br><span class="line">          modelAndView.addObject(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">          <span class="keyword">return</span> modelAndView;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>5 springmvc.xml配置全局异常处理</strong></p>  <!--配置全局异常处理类-->  <bean class="com.study.handlerexception.GlobalExceptionResolver"/><p><strong>6 jsp页面</strong></p><blockquote><p>login.jsp</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;%@page contentType=&quot;text/html; UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户登录界面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录失败:$&#123;param.msg&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>error.jsp</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/html; UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line"> <span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>全局错误页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">&quot;bd&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span>&gt;</span>系统出现错误: $&#123;param.msg&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>7 启动服务进行测试</strong></p><p>访问路径：<a href="http://localhost:8888/springmvc02/json/interceptor">http://localhost:8888/springmvc02/json/interceptor</a></p><p><img src="/../UpPictures/spring-0Pictures/image-20240324183751722.png" alt="image-20240324183751722"></p><p> 控制台输出结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">testInterceptor</span><br><span class="line">===========1=============</span><br><span class="line">===========2=============</span><br><span class="line">null</span><br><span class="line">进入全局异常处理器获取的异常信息为：保存失败，请稍后重试......</span><br><span class="line">===========4=============</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
